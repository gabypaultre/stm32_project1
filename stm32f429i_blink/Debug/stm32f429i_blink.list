
stm32f429i_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060b4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000046c  08006268  08006268  00007268  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080066d4  080066d4  000081d4  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  080066d4  080066d4  000076d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080066dc  080066dc  000081d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080066dc  080066dc  000076dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080066e0  080066e0  000076e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d4  20000000  080066e4  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000081d4  2**0
                  CONTENTS
 10 .bss          000001d4  200001d4  200001d4  000081d4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200003a8  200003a8  000081d4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000081d4  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000747e  00000000  00000000  00008204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000190e  00000000  00000000  0000f682  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000790  00000000  00000000  00010f90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000591  00000000  00000000  00011720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023d98  00000000  00000000  00011cb1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00008fc0  00000000  00000000  00035a49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d40a4  00000000  00000000  0003ea09  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00112aad  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00002d7c  00000000  00000000  00112af0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  0011586c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	00000000 	.word	0x00000000
 80001d0:	0800624c 	.word	0x0800624c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	200001d8 	.word	0x200001d8
 80001ec:	0800624c 	.word	0x0800624c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <strlen>:
 8000290:	4603      	mov	r3, r0
 8000292:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000296:	2a00      	cmp	r2, #0
 8000298:	d1fb      	bne.n	8000292 <strlen+0x2>
 800029a:	1a18      	subs	r0, r3, r0
 800029c:	3801      	subs	r0, #1
 800029e:	4770      	bx	lr

080002a0 <__aeabi_drsub>:
 80002a0:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80002a4:	e002      	b.n	80002ac <__adddf3>
 80002a6:	bf00      	nop

080002a8 <__aeabi_dsub>:
 80002a8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080002ac <__adddf3>:
 80002ac:	b530      	push	{r4, r5, lr}
 80002ae:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002b2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002b6:	ea94 0f05 	teq	r4, r5
 80002ba:	bf08      	it	eq
 80002bc:	ea90 0f02 	teqeq	r0, r2
 80002c0:	bf1f      	itttt	ne
 80002c2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002c6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ca:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ce:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002d2:	f000 80e2 	beq.w	800049a <__adddf3+0x1ee>
 80002d6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002da:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002de:	bfb8      	it	lt
 80002e0:	426d      	neglt	r5, r5
 80002e2:	dd0c      	ble.n	80002fe <__adddf3+0x52>
 80002e4:	442c      	add	r4, r5
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	ea82 0000 	eor.w	r0, r2, r0
 80002f2:	ea83 0101 	eor.w	r1, r3, r1
 80002f6:	ea80 0202 	eor.w	r2, r0, r2
 80002fa:	ea81 0303 	eor.w	r3, r1, r3
 80002fe:	2d36      	cmp	r5, #54	@ 0x36
 8000300:	bf88      	it	hi
 8000302:	bd30      	pophi	{r4, r5, pc}
 8000304:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000308:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800030c:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000310:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000314:	d002      	beq.n	800031c <__adddf3+0x70>
 8000316:	4240      	negs	r0, r0
 8000318:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800031c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000320:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000324:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000328:	d002      	beq.n	8000330 <__adddf3+0x84>
 800032a:	4252      	negs	r2, r2
 800032c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000330:	ea94 0f05 	teq	r4, r5
 8000334:	f000 80a7 	beq.w	8000486 <__adddf3+0x1da>
 8000338:	f1a4 0401 	sub.w	r4, r4, #1
 800033c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000340:	db0d      	blt.n	800035e <__adddf3+0xb2>
 8000342:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000346:	fa22 f205 	lsr.w	r2, r2, r5
 800034a:	1880      	adds	r0, r0, r2
 800034c:	f141 0100 	adc.w	r1, r1, #0
 8000350:	fa03 f20e 	lsl.w	r2, r3, lr
 8000354:	1880      	adds	r0, r0, r2
 8000356:	fa43 f305 	asr.w	r3, r3, r5
 800035a:	4159      	adcs	r1, r3
 800035c:	e00e      	b.n	800037c <__adddf3+0xd0>
 800035e:	f1a5 0520 	sub.w	r5, r5, #32
 8000362:	f10e 0e20 	add.w	lr, lr, #32
 8000366:	2a01      	cmp	r2, #1
 8000368:	fa03 fc0e 	lsl.w	ip, r3, lr
 800036c:	bf28      	it	cs
 800036e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000372:	fa43 f305 	asr.w	r3, r3, r5
 8000376:	18c0      	adds	r0, r0, r3
 8000378:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800037c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000380:	d507      	bpl.n	8000392 <__adddf3+0xe6>
 8000382:	f04f 0e00 	mov.w	lr, #0
 8000386:	f1dc 0c00 	rsbs	ip, ip, #0
 800038a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800038e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000392:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000396:	d31b      	bcc.n	80003d0 <__adddf3+0x124>
 8000398:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800039c:	d30c      	bcc.n	80003b8 <__adddf3+0x10c>
 800039e:	0849      	lsrs	r1, r1, #1
 80003a0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003a4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003a8:	f104 0401 	add.w	r4, r4, #1
 80003ac:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003b0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003b4:	f080 809a 	bcs.w	80004ec <__adddf3+0x240>
 80003b8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003bc:	bf08      	it	eq
 80003be:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003c2:	f150 0000 	adcs.w	r0, r0, #0
 80003c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ca:	ea41 0105 	orr.w	r1, r1, r5
 80003ce:	bd30      	pop	{r4, r5, pc}
 80003d0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003d4:	4140      	adcs	r0, r0
 80003d6:	eb41 0101 	adc.w	r1, r1, r1
 80003da:	3c01      	subs	r4, #1
 80003dc:	bf28      	it	cs
 80003de:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003e2:	d2e9      	bcs.n	80003b8 <__adddf3+0x10c>
 80003e4:	f091 0f00 	teq	r1, #0
 80003e8:	bf04      	itt	eq
 80003ea:	4601      	moveq	r1, r0
 80003ec:	2000      	moveq	r0, #0
 80003ee:	fab1 f381 	clz	r3, r1
 80003f2:	bf08      	it	eq
 80003f4:	3320      	addeq	r3, #32
 80003f6:	f1a3 030b 	sub.w	r3, r3, #11
 80003fa:	f1b3 0220 	subs.w	r2, r3, #32
 80003fe:	da0c      	bge.n	800041a <__adddf3+0x16e>
 8000400:	320c      	adds	r2, #12
 8000402:	dd08      	ble.n	8000416 <__adddf3+0x16a>
 8000404:	f102 0c14 	add.w	ip, r2, #20
 8000408:	f1c2 020c 	rsb	r2, r2, #12
 800040c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000410:	fa21 f102 	lsr.w	r1, r1, r2
 8000414:	e00c      	b.n	8000430 <__adddf3+0x184>
 8000416:	f102 0214 	add.w	r2, r2, #20
 800041a:	bfd8      	it	le
 800041c:	f1c2 0c20 	rsble	ip, r2, #32
 8000420:	fa01 f102 	lsl.w	r1, r1, r2
 8000424:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000428:	bfdc      	itt	le
 800042a:	ea41 010c 	orrle.w	r1, r1, ip
 800042e:	4090      	lslle	r0, r2
 8000430:	1ae4      	subs	r4, r4, r3
 8000432:	bfa2      	ittt	ge
 8000434:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000438:	4329      	orrge	r1, r5
 800043a:	bd30      	popge	{r4, r5, pc}
 800043c:	ea6f 0404 	mvn.w	r4, r4
 8000440:	3c1f      	subs	r4, #31
 8000442:	da1c      	bge.n	800047e <__adddf3+0x1d2>
 8000444:	340c      	adds	r4, #12
 8000446:	dc0e      	bgt.n	8000466 <__adddf3+0x1ba>
 8000448:	f104 0414 	add.w	r4, r4, #20
 800044c:	f1c4 0220 	rsb	r2, r4, #32
 8000450:	fa20 f004 	lsr.w	r0, r0, r4
 8000454:	fa01 f302 	lsl.w	r3, r1, r2
 8000458:	ea40 0003 	orr.w	r0, r0, r3
 800045c:	fa21 f304 	lsr.w	r3, r1, r4
 8000460:	ea45 0103 	orr.w	r1, r5, r3
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f1c4 040c 	rsb	r4, r4, #12
 800046a:	f1c4 0220 	rsb	r2, r4, #32
 800046e:	fa20 f002 	lsr.w	r0, r0, r2
 8000472:	fa01 f304 	lsl.w	r3, r1, r4
 8000476:	ea40 0003 	orr.w	r0, r0, r3
 800047a:	4629      	mov	r1, r5
 800047c:	bd30      	pop	{r4, r5, pc}
 800047e:	fa21 f004 	lsr.w	r0, r1, r4
 8000482:	4629      	mov	r1, r5
 8000484:	bd30      	pop	{r4, r5, pc}
 8000486:	f094 0f00 	teq	r4, #0
 800048a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800048e:	bf06      	itte	eq
 8000490:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000494:	3401      	addeq	r4, #1
 8000496:	3d01      	subne	r5, #1
 8000498:	e74e      	b.n	8000338 <__adddf3+0x8c>
 800049a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800049e:	bf18      	it	ne
 80004a0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004a4:	d029      	beq.n	80004fa <__adddf3+0x24e>
 80004a6:	ea94 0f05 	teq	r4, r5
 80004aa:	bf08      	it	eq
 80004ac:	ea90 0f02 	teqeq	r0, r2
 80004b0:	d005      	beq.n	80004be <__adddf3+0x212>
 80004b2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004b6:	bf04      	itt	eq
 80004b8:	4619      	moveq	r1, r3
 80004ba:	4610      	moveq	r0, r2
 80004bc:	bd30      	pop	{r4, r5, pc}
 80004be:	ea91 0f03 	teq	r1, r3
 80004c2:	bf1e      	ittt	ne
 80004c4:	2100      	movne	r1, #0
 80004c6:	2000      	movne	r0, #0
 80004c8:	bd30      	popne	{r4, r5, pc}
 80004ca:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ce:	d105      	bne.n	80004dc <__adddf3+0x230>
 80004d0:	0040      	lsls	r0, r0, #1
 80004d2:	4149      	adcs	r1, r1
 80004d4:	bf28      	it	cs
 80004d6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004da:	bd30      	pop	{r4, r5, pc}
 80004dc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004e0:	bf3c      	itt	cc
 80004e2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004e6:	bd30      	popcc	{r4, r5, pc}
 80004e8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004ec:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004f0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004f4:	f04f 0000 	mov.w	r0, #0
 80004f8:	bd30      	pop	{r4, r5, pc}
 80004fa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004fe:	bf1a      	itte	ne
 8000500:	4619      	movne	r1, r3
 8000502:	4610      	movne	r0, r2
 8000504:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000508:	bf1c      	itt	ne
 800050a:	460b      	movne	r3, r1
 800050c:	4602      	movne	r2, r0
 800050e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000512:	bf06      	itte	eq
 8000514:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000518:	ea91 0f03 	teqeq	r1, r3
 800051c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	bf00      	nop

08000524 <__aeabi_ui2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000538:	f04f 0500 	mov.w	r5, #0
 800053c:	f04f 0100 	mov.w	r1, #0
 8000540:	e750      	b.n	80003e4 <__adddf3+0x138>
 8000542:	bf00      	nop

08000544 <__aeabi_i2d>:
 8000544:	f090 0f00 	teq	r0, #0
 8000548:	bf04      	itt	eq
 800054a:	2100      	moveq	r1, #0
 800054c:	4770      	bxeq	lr
 800054e:	b530      	push	{r4, r5, lr}
 8000550:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000554:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000558:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800055c:	bf48      	it	mi
 800055e:	4240      	negmi	r0, r0
 8000560:	f04f 0100 	mov.w	r1, #0
 8000564:	e73e      	b.n	80003e4 <__adddf3+0x138>
 8000566:	bf00      	nop

08000568 <__aeabi_f2d>:
 8000568:	0042      	lsls	r2, r0, #1
 800056a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800056e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000572:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000576:	bf1f      	itttt	ne
 8000578:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800057c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000580:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000584:	4770      	bxne	lr
 8000586:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800058a:	bf08      	it	eq
 800058c:	4770      	bxeq	lr
 800058e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000592:	bf04      	itt	eq
 8000594:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000598:	4770      	bxeq	lr
 800059a:	b530      	push	{r4, r5, lr}
 800059c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005a8:	e71c      	b.n	80003e4 <__adddf3+0x138>
 80005aa:	bf00      	nop

080005ac <__aeabi_ul2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f04f 0500 	mov.w	r5, #0
 80005ba:	e00a      	b.n	80005d2 <__aeabi_l2d+0x16>

080005bc <__aeabi_l2d>:
 80005bc:	ea50 0201 	orrs.w	r2, r0, r1
 80005c0:	bf08      	it	eq
 80005c2:	4770      	bxeq	lr
 80005c4:	b530      	push	{r4, r5, lr}
 80005c6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ca:	d502      	bpl.n	80005d2 <__aeabi_l2d+0x16>
 80005cc:	4240      	negs	r0, r0
 80005ce:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005d2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005d6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005da:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005de:	f43f aed8 	beq.w	8000392 <__adddf3+0xe6>
 80005e2:	f04f 0203 	mov.w	r2, #3
 80005e6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ea:	bf18      	it	ne
 80005ec:	3203      	addne	r2, #3
 80005ee:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005f2:	bf18      	it	ne
 80005f4:	3203      	addne	r2, #3
 80005f6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005fa:	f1c2 0320 	rsb	r3, r2, #32
 80005fe:	fa00 fc03 	lsl.w	ip, r0, r3
 8000602:	fa20 f002 	lsr.w	r0, r0, r2
 8000606:	fa01 fe03 	lsl.w	lr, r1, r3
 800060a:	ea40 000e 	orr.w	r0, r0, lr
 800060e:	fa21 f102 	lsr.w	r1, r1, r2
 8000612:	4414      	add	r4, r2
 8000614:	e6bd      	b.n	8000392 <__adddf3+0xe6>
 8000616:	bf00      	nop

08000618 <__aeabi_dmul>:
 8000618:	b570      	push	{r4, r5, r6, lr}
 800061a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800061e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000622:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000626:	bf1d      	ittte	ne
 8000628:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800062c:	ea94 0f0c 	teqne	r4, ip
 8000630:	ea95 0f0c 	teqne	r5, ip
 8000634:	f000 f8de 	bleq	80007f4 <__aeabi_dmul+0x1dc>
 8000638:	442c      	add	r4, r5
 800063a:	ea81 0603 	eor.w	r6, r1, r3
 800063e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000642:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000646:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800064a:	bf18      	it	ne
 800064c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000650:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000654:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000658:	d038      	beq.n	80006cc <__aeabi_dmul+0xb4>
 800065a:	fba0 ce02 	umull	ip, lr, r0, r2
 800065e:	f04f 0500 	mov.w	r5, #0
 8000662:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000666:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800066a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800066e:	f04f 0600 	mov.w	r6, #0
 8000672:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000676:	f09c 0f00 	teq	ip, #0
 800067a:	bf18      	it	ne
 800067c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000680:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000684:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000688:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800068c:	d204      	bcs.n	8000698 <__aeabi_dmul+0x80>
 800068e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000692:	416d      	adcs	r5, r5
 8000694:	eb46 0606 	adc.w	r6, r6, r6
 8000698:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800069c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006a0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006a4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006a8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006ac:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006b0:	bf88      	it	hi
 80006b2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006b6:	d81e      	bhi.n	80006f6 <__aeabi_dmul+0xde>
 80006b8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006bc:	bf08      	it	eq
 80006be:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006c2:	f150 0000 	adcs.w	r0, r0, #0
 80006c6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006d0:	ea46 0101 	orr.w	r1, r6, r1
 80006d4:	ea40 0002 	orr.w	r0, r0, r2
 80006d8:	ea81 0103 	eor.w	r1, r1, r3
 80006dc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006e0:	bfc2      	ittt	gt
 80006e2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006e6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ea:	bd70      	popgt	{r4, r5, r6, pc}
 80006ec:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006f0:	f04f 0e00 	mov.w	lr, #0
 80006f4:	3c01      	subs	r4, #1
 80006f6:	f300 80ab 	bgt.w	8000850 <__aeabi_dmul+0x238>
 80006fa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006fe:	bfde      	ittt	le
 8000700:	2000      	movle	r0, #0
 8000702:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 8000706:	bd70      	pople	{r4, r5, r6, pc}
 8000708:	f1c4 0400 	rsb	r4, r4, #0
 800070c:	3c20      	subs	r4, #32
 800070e:	da35      	bge.n	800077c <__aeabi_dmul+0x164>
 8000710:	340c      	adds	r4, #12
 8000712:	dc1b      	bgt.n	800074c <__aeabi_dmul+0x134>
 8000714:	f104 0414 	add.w	r4, r4, #20
 8000718:	f1c4 0520 	rsb	r5, r4, #32
 800071c:	fa00 f305 	lsl.w	r3, r0, r5
 8000720:	fa20 f004 	lsr.w	r0, r0, r4
 8000724:	fa01 f205 	lsl.w	r2, r1, r5
 8000728:	ea40 0002 	orr.w	r0, r0, r2
 800072c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000730:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000734:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000738:	fa21 f604 	lsr.w	r6, r1, r4
 800073c:	eb42 0106 	adc.w	r1, r2, r6
 8000740:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000744:	bf08      	it	eq
 8000746:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800074a:	bd70      	pop	{r4, r5, r6, pc}
 800074c:	f1c4 040c 	rsb	r4, r4, #12
 8000750:	f1c4 0520 	rsb	r5, r4, #32
 8000754:	fa00 f304 	lsl.w	r3, r0, r4
 8000758:	fa20 f005 	lsr.w	r0, r0, r5
 800075c:	fa01 f204 	lsl.w	r2, r1, r4
 8000760:	ea40 0002 	orr.w	r0, r0, r2
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000768:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800076c:	f141 0100 	adc.w	r1, r1, #0
 8000770:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000774:	bf08      	it	eq
 8000776:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800077a:	bd70      	pop	{r4, r5, r6, pc}
 800077c:	f1c4 0520 	rsb	r5, r4, #32
 8000780:	fa00 f205 	lsl.w	r2, r0, r5
 8000784:	ea4e 0e02 	orr.w	lr, lr, r2
 8000788:	fa20 f304 	lsr.w	r3, r0, r4
 800078c:	fa01 f205 	lsl.w	r2, r1, r5
 8000790:	ea43 0302 	orr.w	r3, r3, r2
 8000794:	fa21 f004 	lsr.w	r0, r1, r4
 8000798:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800079c:	fa21 f204 	lsr.w	r2, r1, r4
 80007a0:	ea20 0002 	bic.w	r0, r0, r2
 80007a4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007ac:	bf08      	it	eq
 80007ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007b2:	bd70      	pop	{r4, r5, r6, pc}
 80007b4:	f094 0f00 	teq	r4, #0
 80007b8:	d10f      	bne.n	80007da <__aeabi_dmul+0x1c2>
 80007ba:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007be:	0040      	lsls	r0, r0, #1
 80007c0:	eb41 0101 	adc.w	r1, r1, r1
 80007c4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3c01      	subeq	r4, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1a6>
 80007ce:	ea41 0106 	orr.w	r1, r1, r6
 80007d2:	f095 0f00 	teq	r5, #0
 80007d6:	bf18      	it	ne
 80007d8:	4770      	bxne	lr
 80007da:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007de:	0052      	lsls	r2, r2, #1
 80007e0:	eb43 0303 	adc.w	r3, r3, r3
 80007e4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007e8:	bf08      	it	eq
 80007ea:	3d01      	subeq	r5, #1
 80007ec:	d0f7      	beq.n	80007de <__aeabi_dmul+0x1c6>
 80007ee:	ea43 0306 	orr.w	r3, r3, r6
 80007f2:	4770      	bx	lr
 80007f4:	ea94 0f0c 	teq	r4, ip
 80007f8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007fc:	bf18      	it	ne
 80007fe:	ea95 0f0c 	teqne	r5, ip
 8000802:	d00c      	beq.n	800081e <__aeabi_dmul+0x206>
 8000804:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000808:	bf18      	it	ne
 800080a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080e:	d1d1      	bne.n	80007b4 <__aeabi_dmul+0x19c>
 8000810:	ea81 0103 	eor.w	r1, r1, r3
 8000814:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000818:	f04f 0000 	mov.w	r0, #0
 800081c:	bd70      	pop	{r4, r5, r6, pc}
 800081e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000822:	bf06      	itte	eq
 8000824:	4610      	moveq	r0, r2
 8000826:	4619      	moveq	r1, r3
 8000828:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800082c:	d019      	beq.n	8000862 <__aeabi_dmul+0x24a>
 800082e:	ea94 0f0c 	teq	r4, ip
 8000832:	d102      	bne.n	800083a <__aeabi_dmul+0x222>
 8000834:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000838:	d113      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800083a:	ea95 0f0c 	teq	r5, ip
 800083e:	d105      	bne.n	800084c <__aeabi_dmul+0x234>
 8000840:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000844:	bf1c      	itt	ne
 8000846:	4610      	movne	r0, r2
 8000848:	4619      	movne	r1, r3
 800084a:	d10a      	bne.n	8000862 <__aeabi_dmul+0x24a>
 800084c:	ea81 0103 	eor.w	r1, r1, r3
 8000850:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000854:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000858:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800085c:	f04f 0000 	mov.w	r0, #0
 8000860:	bd70      	pop	{r4, r5, r6, pc}
 8000862:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000866:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800086a:	bd70      	pop	{r4, r5, r6, pc}

0800086c <__aeabi_ddiv>:
 800086c:	b570      	push	{r4, r5, r6, lr}
 800086e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000872:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000876:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800087a:	bf1d      	ittte	ne
 800087c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000880:	ea94 0f0c 	teqne	r4, ip
 8000884:	ea95 0f0c 	teqne	r5, ip
 8000888:	f000 f8a7 	bleq	80009da <__aeabi_ddiv+0x16e>
 800088c:	eba4 0405 	sub.w	r4, r4, r5
 8000890:	ea81 0e03 	eor.w	lr, r1, r3
 8000894:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000898:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800089c:	f000 8088 	beq.w	80009b0 <__aeabi_ddiv+0x144>
 80008a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008a4:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 80008a8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008ac:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008b0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008b4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008b8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008bc:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008c0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008c4:	429d      	cmp	r5, r3
 80008c6:	bf08      	it	eq
 80008c8:	4296      	cmpeq	r6, r2
 80008ca:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008ce:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008d2:	d202      	bcs.n	80008da <__aeabi_ddiv+0x6e>
 80008d4:	085b      	lsrs	r3, r3, #1
 80008d6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008da:	1ab6      	subs	r6, r6, r2
 80008dc:	eb65 0503 	sbc.w	r5, r5, r3
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008ea:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008ee:	ebb6 0e02 	subs.w	lr, r6, r2
 80008f2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008f6:	bf22      	ittt	cs
 80008f8:	1ab6      	subcs	r6, r6, r2
 80008fa:	4675      	movcs	r5, lr
 80008fc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000900:	085b      	lsrs	r3, r3, #1
 8000902:	ea4f 0232 	mov.w	r2, r2, rrx
 8000906:	ebb6 0e02 	subs.w	lr, r6, r2
 800090a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800090e:	bf22      	ittt	cs
 8000910:	1ab6      	subcs	r6, r6, r2
 8000912:	4675      	movcs	r5, lr
 8000914:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000918:	085b      	lsrs	r3, r3, #1
 800091a:	ea4f 0232 	mov.w	r2, r2, rrx
 800091e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000922:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000926:	bf22      	ittt	cs
 8000928:	1ab6      	subcs	r6, r6, r2
 800092a:	4675      	movcs	r5, lr
 800092c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	ebb6 0e02 	subs.w	lr, r6, r2
 800093a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800093e:	bf22      	ittt	cs
 8000940:	1ab6      	subcs	r6, r6, r2
 8000942:	4675      	movcs	r5, lr
 8000944:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000948:	ea55 0e06 	orrs.w	lr, r5, r6
 800094c:	d018      	beq.n	8000980 <__aeabi_ddiv+0x114>
 800094e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000952:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000956:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800095a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800095e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000962:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000966:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800096a:	d1c0      	bne.n	80008ee <__aeabi_ddiv+0x82>
 800096c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000970:	d10b      	bne.n	800098a <__aeabi_ddiv+0x11e>
 8000972:	ea41 0100 	orr.w	r1, r1, r0
 8000976:	f04f 0000 	mov.w	r0, #0
 800097a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800097e:	e7b6      	b.n	80008ee <__aeabi_ddiv+0x82>
 8000980:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000984:	bf04      	itt	eq
 8000986:	4301      	orreq	r1, r0
 8000988:	2000      	moveq	r0, #0
 800098a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800098e:	bf88      	it	hi
 8000990:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000994:	f63f aeaf 	bhi.w	80006f6 <__aeabi_dmul+0xde>
 8000998:	ebb5 0c03 	subs.w	ip, r5, r3
 800099c:	bf04      	itt	eq
 800099e:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009a2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009a6:	f150 0000 	adcs.w	r0, r0, #0
 80009aa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009ae:	bd70      	pop	{r4, r5, r6, pc}
 80009b0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009b4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009b8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009bc:	bfc2      	ittt	gt
 80009be:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009c2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009c6:	bd70      	popgt	{r4, r5, r6, pc}
 80009c8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009cc:	f04f 0e00 	mov.w	lr, #0
 80009d0:	3c01      	subs	r4, #1
 80009d2:	e690      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009d4:	ea45 0e06 	orr.w	lr, r5, r6
 80009d8:	e68d      	b.n	80006f6 <__aeabi_dmul+0xde>
 80009da:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009de:	ea94 0f0c 	teq	r4, ip
 80009e2:	bf08      	it	eq
 80009e4:	ea95 0f0c 	teqeq	r5, ip
 80009e8:	f43f af3b 	beq.w	8000862 <__aeabi_dmul+0x24a>
 80009ec:	ea94 0f0c 	teq	r4, ip
 80009f0:	d10a      	bne.n	8000a08 <__aeabi_ddiv+0x19c>
 80009f2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009f6:	f47f af34 	bne.w	8000862 <__aeabi_dmul+0x24a>
 80009fa:	ea95 0f0c 	teq	r5, ip
 80009fe:	f47f af25 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a02:	4610      	mov	r0, r2
 8000a04:	4619      	mov	r1, r3
 8000a06:	e72c      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a08:	ea95 0f0c 	teq	r5, ip
 8000a0c:	d106      	bne.n	8000a1c <__aeabi_ddiv+0x1b0>
 8000a0e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a12:	f43f aefd 	beq.w	8000810 <__aeabi_dmul+0x1f8>
 8000a16:	4610      	mov	r0, r2
 8000a18:	4619      	mov	r1, r3
 8000a1a:	e722      	b.n	8000862 <__aeabi_dmul+0x24a>
 8000a1c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a20:	bf18      	it	ne
 8000a22:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a26:	f47f aec5 	bne.w	80007b4 <__aeabi_dmul+0x19c>
 8000a2a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a2e:	f47f af0d 	bne.w	800084c <__aeabi_dmul+0x234>
 8000a32:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a36:	f47f aeeb 	bne.w	8000810 <__aeabi_dmul+0x1f8>
 8000a3a:	e712      	b.n	8000862 <__aeabi_dmul+0x24a>

08000a3c <__gedf2>:
 8000a3c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a40:	e006      	b.n	8000a50 <__cmpdf2+0x4>
 8000a42:	bf00      	nop

08000a44 <__ledf2>:
 8000a44:	f04f 0c01 	mov.w	ip, #1
 8000a48:	e002      	b.n	8000a50 <__cmpdf2+0x4>
 8000a4a:	bf00      	nop

08000a4c <__cmpdf2>:
 8000a4c:	f04f 0c01 	mov.w	ip, #1
 8000a50:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a54:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a58:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a60:	bf18      	it	ne
 8000a62:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a66:	d01b      	beq.n	8000aa0 <__cmpdf2+0x54>
 8000a68:	b001      	add	sp, #4
 8000a6a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a6e:	bf0c      	ite	eq
 8000a70:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a74:	ea91 0f03 	teqne	r1, r3
 8000a78:	bf02      	ittt	eq
 8000a7a:	ea90 0f02 	teqeq	r0, r2
 8000a7e:	2000      	moveq	r0, #0
 8000a80:	4770      	bxeq	lr
 8000a82:	f110 0f00 	cmn.w	r0, #0
 8000a86:	ea91 0f03 	teq	r1, r3
 8000a8a:	bf58      	it	pl
 8000a8c:	4299      	cmppl	r1, r3
 8000a8e:	bf08      	it	eq
 8000a90:	4290      	cmpeq	r0, r2
 8000a92:	bf2c      	ite	cs
 8000a94:	17d8      	asrcs	r0, r3, #31
 8000a96:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a9a:	f040 0001 	orr.w	r0, r0, #1
 8000a9e:	4770      	bx	lr
 8000aa0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d102      	bne.n	8000ab0 <__cmpdf2+0x64>
 8000aaa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000aae:	d107      	bne.n	8000ac0 <__cmpdf2+0x74>
 8000ab0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ab8:	d1d6      	bne.n	8000a68 <__cmpdf2+0x1c>
 8000aba:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000abe:	d0d3      	beq.n	8000a68 <__cmpdf2+0x1c>
 8000ac0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ac4:	4770      	bx	lr
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdrcmple>:
 8000ac8:	4684      	mov	ip, r0
 8000aca:	4610      	mov	r0, r2
 8000acc:	4662      	mov	r2, ip
 8000ace:	468c      	mov	ip, r1
 8000ad0:	4619      	mov	r1, r3
 8000ad2:	4663      	mov	r3, ip
 8000ad4:	e000      	b.n	8000ad8 <__aeabi_cdcmpeq>
 8000ad6:	bf00      	nop

08000ad8 <__aeabi_cdcmpeq>:
 8000ad8:	b501      	push	{r0, lr}
 8000ada:	f7ff ffb7 	bl	8000a4c <__cmpdf2>
 8000ade:	2800      	cmp	r0, #0
 8000ae0:	bf48      	it	mi
 8000ae2:	f110 0f00 	cmnmi.w	r0, #0
 8000ae6:	bd01      	pop	{r0, pc}

08000ae8 <__aeabi_dcmpeq>:
 8000ae8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aec:	f7ff fff4 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000af0:	bf0c      	ite	eq
 8000af2:	2001      	moveq	r0, #1
 8000af4:	2000      	movne	r0, #0
 8000af6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afa:	bf00      	nop

08000afc <__aeabi_dcmplt>:
 8000afc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b00:	f7ff ffea 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b04:	bf34      	ite	cc
 8000b06:	2001      	movcc	r0, #1
 8000b08:	2000      	movcs	r0, #0
 8000b0a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b0e:	bf00      	nop

08000b10 <__aeabi_dcmple>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff ffe0 	bl	8000ad8 <__aeabi_cdcmpeq>
 8000b18:	bf94      	ite	ls
 8000b1a:	2001      	movls	r0, #1
 8000b1c:	2000      	movhi	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmpge>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffce 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b2c:	bf94      	ite	ls
 8000b2e:	2001      	movls	r0, #1
 8000b30:	2000      	movhi	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmpgt>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffc4 	bl	8000ac8 <__aeabi_cdrcmple>
 8000b40:	bf34      	ite	cc
 8000b42:	2001      	movcc	r0, #1
 8000b44:	2000      	movcs	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpun>:
 8000b4c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x10>
 8000b56:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b5a:	d10a      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b5c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b60:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b64:	d102      	bne.n	8000b6c <__aeabi_dcmpun+0x20>
 8000b66:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b6a:	d102      	bne.n	8000b72 <__aeabi_dcmpun+0x26>
 8000b6c:	f04f 0000 	mov.w	r0, #0
 8000b70:	4770      	bx	lr
 8000b72:	f04f 0001 	mov.w	r0, #1
 8000b76:	4770      	bx	lr

08000b78 <__aeabi_d2iz>:
 8000b78:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b7c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b80:	d215      	bcs.n	8000bae <__aeabi_d2iz+0x36>
 8000b82:	d511      	bpl.n	8000ba8 <__aeabi_d2iz+0x30>
 8000b84:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b88:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b8c:	d912      	bls.n	8000bb4 <__aeabi_d2iz+0x3c>
 8000b8e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b92:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b96:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b9a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b9e:	fa23 f002 	lsr.w	r0, r3, r2
 8000ba2:	bf18      	it	ne
 8000ba4:	4240      	negne	r0, r0
 8000ba6:	4770      	bx	lr
 8000ba8:	f04f 0000 	mov.w	r0, #0
 8000bac:	4770      	bx	lr
 8000bae:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bb2:	d105      	bne.n	8000bc0 <__aeabi_d2iz+0x48>
 8000bb4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000bb8:	bf08      	it	eq
 8000bba:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bbe:	4770      	bx	lr
 8000bc0:	f04f 0000 	mov.w	r0, #0
 8000bc4:	4770      	bx	lr
 8000bc6:	bf00      	nop

08000bc8 <__aeabi_uldivmod>:
 8000bc8:	b953      	cbnz	r3, 8000be0 <__aeabi_uldivmod+0x18>
 8000bca:	b94a      	cbnz	r2, 8000be0 <__aeabi_uldivmod+0x18>
 8000bcc:	2900      	cmp	r1, #0
 8000bce:	bf08      	it	eq
 8000bd0:	2800      	cmpeq	r0, #0
 8000bd2:	bf1c      	itt	ne
 8000bd4:	f04f 31ff 	movne.w	r1, #4294967295
 8000bd8:	f04f 30ff 	movne.w	r0, #4294967295
 8000bdc:	f000 b988 	b.w	8000ef0 <__aeabi_idiv0>
 8000be0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000be8:	f000 f806 	bl	8000bf8 <__udivmoddi4>
 8000bec:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf4:	b004      	add	sp, #16
 8000bf6:	4770      	bx	lr

08000bf8 <__udivmoddi4>:
 8000bf8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000bfc:	9d08      	ldr	r5, [sp, #32]
 8000bfe:	468e      	mov	lr, r1
 8000c00:	4604      	mov	r4, r0
 8000c02:	4688      	mov	r8, r1
 8000c04:	2b00      	cmp	r3, #0
 8000c06:	d14a      	bne.n	8000c9e <__udivmoddi4+0xa6>
 8000c08:	428a      	cmp	r2, r1
 8000c0a:	4617      	mov	r7, r2
 8000c0c:	d962      	bls.n	8000cd4 <__udivmoddi4+0xdc>
 8000c0e:	fab2 f682 	clz	r6, r2
 8000c12:	b14e      	cbz	r6, 8000c28 <__udivmoddi4+0x30>
 8000c14:	f1c6 0320 	rsb	r3, r6, #32
 8000c18:	fa01 f806 	lsl.w	r8, r1, r6
 8000c1c:	fa20 f303 	lsr.w	r3, r0, r3
 8000c20:	40b7      	lsls	r7, r6
 8000c22:	ea43 0808 	orr.w	r8, r3, r8
 8000c26:	40b4      	lsls	r4, r6
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f fc87 	uxth.w	ip, r7
 8000c30:	fbb8 f1fe 	udiv	r1, r8, lr
 8000c34:	0c23      	lsrs	r3, r4, #16
 8000c36:	fb0e 8811 	mls	r8, lr, r1, r8
 8000c3a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c3e:	fb01 f20c 	mul.w	r2, r1, ip
 8000c42:	429a      	cmp	r2, r3
 8000c44:	d909      	bls.n	8000c5a <__udivmoddi4+0x62>
 8000c46:	18fb      	adds	r3, r7, r3
 8000c48:	f101 30ff 	add.w	r0, r1, #4294967295
 8000c4c:	f080 80ea 	bcs.w	8000e24 <__udivmoddi4+0x22c>
 8000c50:	429a      	cmp	r2, r3
 8000c52:	f240 80e7 	bls.w	8000e24 <__udivmoddi4+0x22c>
 8000c56:	3902      	subs	r1, #2
 8000c58:	443b      	add	r3, r7
 8000c5a:	1a9a      	subs	r2, r3, r2
 8000c5c:	b2a3      	uxth	r3, r4
 8000c5e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000c62:	fb0e 2210 	mls	r2, lr, r0, r2
 8000c66:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000c6a:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c6e:	459c      	cmp	ip, r3
 8000c70:	d909      	bls.n	8000c86 <__udivmoddi4+0x8e>
 8000c72:	18fb      	adds	r3, r7, r3
 8000c74:	f100 32ff 	add.w	r2, r0, #4294967295
 8000c78:	f080 80d6 	bcs.w	8000e28 <__udivmoddi4+0x230>
 8000c7c:	459c      	cmp	ip, r3
 8000c7e:	f240 80d3 	bls.w	8000e28 <__udivmoddi4+0x230>
 8000c82:	443b      	add	r3, r7
 8000c84:	3802      	subs	r0, #2
 8000c86:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000c8a:	eba3 030c 	sub.w	r3, r3, ip
 8000c8e:	2100      	movs	r1, #0
 8000c90:	b11d      	cbz	r5, 8000c9a <__udivmoddi4+0xa2>
 8000c92:	40f3      	lsrs	r3, r6
 8000c94:	2200      	movs	r2, #0
 8000c96:	e9c5 3200 	strd	r3, r2, [r5]
 8000c9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c9e:	428b      	cmp	r3, r1
 8000ca0:	d905      	bls.n	8000cae <__udivmoddi4+0xb6>
 8000ca2:	b10d      	cbz	r5, 8000ca8 <__udivmoddi4+0xb0>
 8000ca4:	e9c5 0100 	strd	r0, r1, [r5]
 8000ca8:	2100      	movs	r1, #0
 8000caa:	4608      	mov	r0, r1
 8000cac:	e7f5      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cae:	fab3 f183 	clz	r1, r3
 8000cb2:	2900      	cmp	r1, #0
 8000cb4:	d146      	bne.n	8000d44 <__udivmoddi4+0x14c>
 8000cb6:	4573      	cmp	r3, lr
 8000cb8:	d302      	bcc.n	8000cc0 <__udivmoddi4+0xc8>
 8000cba:	4282      	cmp	r2, r0
 8000cbc:	f200 8105 	bhi.w	8000eca <__udivmoddi4+0x2d2>
 8000cc0:	1a84      	subs	r4, r0, r2
 8000cc2:	eb6e 0203 	sbc.w	r2, lr, r3
 8000cc6:	2001      	movs	r0, #1
 8000cc8:	4690      	mov	r8, r2
 8000cca:	2d00      	cmp	r5, #0
 8000ccc:	d0e5      	beq.n	8000c9a <__udivmoddi4+0xa2>
 8000cce:	e9c5 4800 	strd	r4, r8, [r5]
 8000cd2:	e7e2      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000cd4:	2a00      	cmp	r2, #0
 8000cd6:	f000 8090 	beq.w	8000dfa <__udivmoddi4+0x202>
 8000cda:	fab2 f682 	clz	r6, r2
 8000cde:	2e00      	cmp	r6, #0
 8000ce0:	f040 80a4 	bne.w	8000e2c <__udivmoddi4+0x234>
 8000ce4:	1a8a      	subs	r2, r1, r2
 8000ce6:	0c03      	lsrs	r3, r0, #16
 8000ce8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cec:	b280      	uxth	r0, r0
 8000cee:	b2bc      	uxth	r4, r7
 8000cf0:	2101      	movs	r1, #1
 8000cf2:	fbb2 fcfe 	udiv	ip, r2, lr
 8000cf6:	fb0e 221c 	mls	r2, lr, ip, r2
 8000cfa:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfe:	fb04 f20c 	mul.w	r2, r4, ip
 8000d02:	429a      	cmp	r2, r3
 8000d04:	d907      	bls.n	8000d16 <__udivmoddi4+0x11e>
 8000d06:	18fb      	adds	r3, r7, r3
 8000d08:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d0c:	d202      	bcs.n	8000d14 <__udivmoddi4+0x11c>
 8000d0e:	429a      	cmp	r2, r3
 8000d10:	f200 80e0 	bhi.w	8000ed4 <__udivmoddi4+0x2dc>
 8000d14:	46c4      	mov	ip, r8
 8000d16:	1a9b      	subs	r3, r3, r2
 8000d18:	fbb3 f2fe 	udiv	r2, r3, lr
 8000d1c:	fb0e 3312 	mls	r3, lr, r2, r3
 8000d20:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000d24:	fb02 f404 	mul.w	r4, r2, r4
 8000d28:	429c      	cmp	r4, r3
 8000d2a:	d907      	bls.n	8000d3c <__udivmoddi4+0x144>
 8000d2c:	18fb      	adds	r3, r7, r3
 8000d2e:	f102 30ff 	add.w	r0, r2, #4294967295
 8000d32:	d202      	bcs.n	8000d3a <__udivmoddi4+0x142>
 8000d34:	429c      	cmp	r4, r3
 8000d36:	f200 80ca 	bhi.w	8000ece <__udivmoddi4+0x2d6>
 8000d3a:	4602      	mov	r2, r0
 8000d3c:	1b1b      	subs	r3, r3, r4
 8000d3e:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000d42:	e7a5      	b.n	8000c90 <__udivmoddi4+0x98>
 8000d44:	f1c1 0620 	rsb	r6, r1, #32
 8000d48:	408b      	lsls	r3, r1
 8000d4a:	fa22 f706 	lsr.w	r7, r2, r6
 8000d4e:	431f      	orrs	r7, r3
 8000d50:	fa0e f401 	lsl.w	r4, lr, r1
 8000d54:	fa20 f306 	lsr.w	r3, r0, r6
 8000d58:	fa2e fe06 	lsr.w	lr, lr, r6
 8000d5c:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000d60:	4323      	orrs	r3, r4
 8000d62:	fa00 f801 	lsl.w	r8, r0, r1
 8000d66:	fa1f fc87 	uxth.w	ip, r7
 8000d6a:	fbbe f0f9 	udiv	r0, lr, r9
 8000d6e:	0c1c      	lsrs	r4, r3, #16
 8000d70:	fb09 ee10 	mls	lr, r9, r0, lr
 8000d74:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000d78:	fb00 fe0c 	mul.w	lr, r0, ip
 8000d7c:	45a6      	cmp	lr, r4
 8000d7e:	fa02 f201 	lsl.w	r2, r2, r1
 8000d82:	d909      	bls.n	8000d98 <__udivmoddi4+0x1a0>
 8000d84:	193c      	adds	r4, r7, r4
 8000d86:	f100 3aff 	add.w	sl, r0, #4294967295
 8000d8a:	f080 809c 	bcs.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f240 8099 	bls.w	8000ec6 <__udivmoddi4+0x2ce>
 8000d94:	3802      	subs	r0, #2
 8000d96:	443c      	add	r4, r7
 8000d98:	eba4 040e 	sub.w	r4, r4, lr
 8000d9c:	fa1f fe83 	uxth.w	lr, r3
 8000da0:	fbb4 f3f9 	udiv	r3, r4, r9
 8000da4:	fb09 4413 	mls	r4, r9, r3, r4
 8000da8:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000dac:	fb03 fc0c 	mul.w	ip, r3, ip
 8000db0:	45a4      	cmp	ip, r4
 8000db2:	d908      	bls.n	8000dc6 <__udivmoddi4+0x1ce>
 8000db4:	193c      	adds	r4, r7, r4
 8000db6:	f103 3eff 	add.w	lr, r3, #4294967295
 8000dba:	f080 8082 	bcs.w	8000ec2 <__udivmoddi4+0x2ca>
 8000dbe:	45a4      	cmp	ip, r4
 8000dc0:	d97f      	bls.n	8000ec2 <__udivmoddi4+0x2ca>
 8000dc2:	3b02      	subs	r3, #2
 8000dc4:	443c      	add	r4, r7
 8000dc6:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000dca:	eba4 040c 	sub.w	r4, r4, ip
 8000dce:	fba0 ec02 	umull	lr, ip, r0, r2
 8000dd2:	4564      	cmp	r4, ip
 8000dd4:	4673      	mov	r3, lr
 8000dd6:	46e1      	mov	r9, ip
 8000dd8:	d362      	bcc.n	8000ea0 <__udivmoddi4+0x2a8>
 8000dda:	d05f      	beq.n	8000e9c <__udivmoddi4+0x2a4>
 8000ddc:	b15d      	cbz	r5, 8000df6 <__udivmoddi4+0x1fe>
 8000dde:	ebb8 0203 	subs.w	r2, r8, r3
 8000de2:	eb64 0409 	sbc.w	r4, r4, r9
 8000de6:	fa04 f606 	lsl.w	r6, r4, r6
 8000dea:	fa22 f301 	lsr.w	r3, r2, r1
 8000dee:	431e      	orrs	r6, r3
 8000df0:	40cc      	lsrs	r4, r1
 8000df2:	e9c5 6400 	strd	r6, r4, [r5]
 8000df6:	2100      	movs	r1, #0
 8000df8:	e74f      	b.n	8000c9a <__udivmoddi4+0xa2>
 8000dfa:	fbb1 fcf2 	udiv	ip, r1, r2
 8000dfe:	0c01      	lsrs	r1, r0, #16
 8000e00:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e04:	b280      	uxth	r0, r0
 8000e06:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e0a:	463b      	mov	r3, r7
 8000e0c:	4638      	mov	r0, r7
 8000e0e:	463c      	mov	r4, r7
 8000e10:	46b8      	mov	r8, r7
 8000e12:	46be      	mov	lr, r7
 8000e14:	2620      	movs	r6, #32
 8000e16:	fbb1 f1f7 	udiv	r1, r1, r7
 8000e1a:	eba2 0208 	sub.w	r2, r2, r8
 8000e1e:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000e22:	e766      	b.n	8000cf2 <__udivmoddi4+0xfa>
 8000e24:	4601      	mov	r1, r0
 8000e26:	e718      	b.n	8000c5a <__udivmoddi4+0x62>
 8000e28:	4610      	mov	r0, r2
 8000e2a:	e72c      	b.n	8000c86 <__udivmoddi4+0x8e>
 8000e2c:	f1c6 0220 	rsb	r2, r6, #32
 8000e30:	fa2e f302 	lsr.w	r3, lr, r2
 8000e34:	40b7      	lsls	r7, r6
 8000e36:	40b1      	lsls	r1, r6
 8000e38:	fa20 f202 	lsr.w	r2, r0, r2
 8000e3c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e40:	430a      	orrs	r2, r1
 8000e42:	fbb3 f8fe 	udiv	r8, r3, lr
 8000e46:	b2bc      	uxth	r4, r7
 8000e48:	fb0e 3318 	mls	r3, lr, r8, r3
 8000e4c:	0c11      	lsrs	r1, r2, #16
 8000e4e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e52:	fb08 f904 	mul.w	r9, r8, r4
 8000e56:	40b0      	lsls	r0, r6
 8000e58:	4589      	cmp	r9, r1
 8000e5a:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000e5e:	b280      	uxth	r0, r0
 8000e60:	d93e      	bls.n	8000ee0 <__udivmoddi4+0x2e8>
 8000e62:	1879      	adds	r1, r7, r1
 8000e64:	f108 3cff 	add.w	ip, r8, #4294967295
 8000e68:	d201      	bcs.n	8000e6e <__udivmoddi4+0x276>
 8000e6a:	4589      	cmp	r9, r1
 8000e6c:	d81f      	bhi.n	8000eae <__udivmoddi4+0x2b6>
 8000e6e:	eba1 0109 	sub.w	r1, r1, r9
 8000e72:	fbb1 f9fe 	udiv	r9, r1, lr
 8000e76:	fb09 f804 	mul.w	r8, r9, r4
 8000e7a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000e7e:	b292      	uxth	r2, r2
 8000e80:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000e84:	4542      	cmp	r2, r8
 8000e86:	d229      	bcs.n	8000edc <__udivmoddi4+0x2e4>
 8000e88:	18ba      	adds	r2, r7, r2
 8000e8a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000e8e:	d2c4      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e90:	4542      	cmp	r2, r8
 8000e92:	d2c2      	bcs.n	8000e1a <__udivmoddi4+0x222>
 8000e94:	f1a9 0102 	sub.w	r1, r9, #2
 8000e98:	443a      	add	r2, r7
 8000e9a:	e7be      	b.n	8000e1a <__udivmoddi4+0x222>
 8000e9c:	45f0      	cmp	r8, lr
 8000e9e:	d29d      	bcs.n	8000ddc <__udivmoddi4+0x1e4>
 8000ea0:	ebbe 0302 	subs.w	r3, lr, r2
 8000ea4:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000ea8:	3801      	subs	r0, #1
 8000eaa:	46e1      	mov	r9, ip
 8000eac:	e796      	b.n	8000ddc <__udivmoddi4+0x1e4>
 8000eae:	eba7 0909 	sub.w	r9, r7, r9
 8000eb2:	4449      	add	r1, r9
 8000eb4:	f1a8 0c02 	sub.w	ip, r8, #2
 8000eb8:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ebc:	fb09 f804 	mul.w	r8, r9, r4
 8000ec0:	e7db      	b.n	8000e7a <__udivmoddi4+0x282>
 8000ec2:	4673      	mov	r3, lr
 8000ec4:	e77f      	b.n	8000dc6 <__udivmoddi4+0x1ce>
 8000ec6:	4650      	mov	r0, sl
 8000ec8:	e766      	b.n	8000d98 <__udivmoddi4+0x1a0>
 8000eca:	4608      	mov	r0, r1
 8000ecc:	e6fd      	b.n	8000cca <__udivmoddi4+0xd2>
 8000ece:	443b      	add	r3, r7
 8000ed0:	3a02      	subs	r2, #2
 8000ed2:	e733      	b.n	8000d3c <__udivmoddi4+0x144>
 8000ed4:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ed8:	443b      	add	r3, r7
 8000eda:	e71c      	b.n	8000d16 <__udivmoddi4+0x11e>
 8000edc:	4649      	mov	r1, r9
 8000ede:	e79c      	b.n	8000e1a <__udivmoddi4+0x222>
 8000ee0:	eba1 0109 	sub.w	r1, r1, r9
 8000ee4:	46c4      	mov	ip, r8
 8000ee6:	fbb1 f9fe 	udiv	r9, r1, lr
 8000eea:	fb09 f804 	mul.w	r8, r9, r4
 8000eee:	e7c4      	b.n	8000e7a <__udivmoddi4+0x282>

08000ef0 <__aeabi_idiv0>:
 8000ef0:	4770      	bx	lr
 8000ef2:	bf00      	nop

08000ef4 <I3G4250D_Init>:
static SPI_HandleTypeDef *I3G4250D_hspi = NULL;
static GPIO_TypeDef *I3G4250D_CS_Port = NULL;
static uint16_t I3G4250D_CS_Pin = 0;

uint8_t I3G4250D_Init(SPI_HandleTypeDef *hspi, GPIO_TypeDef *CS_GPIO_Port, uint16_t CS_Pin)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b086      	sub	sp, #24
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	60f8      	str	r0, [r7, #12]
 8000efc:	60b9      	str	r1, [r7, #8]
 8000efe:	4613      	mov	r3, r2
 8000f00:	80fb      	strh	r3, [r7, #6]
    I3G4250D_hspi = hspi;
 8000f02:	4a0b      	ldr	r2, [pc, #44]	@ (8000f30 <I3G4250D_Init+0x3c>)
 8000f04:	68fb      	ldr	r3, [r7, #12]
 8000f06:	6013      	str	r3, [r2, #0]
    I3G4250D_CS_Port = CS_GPIO_Port;
 8000f08:	4a0a      	ldr	r2, [pc, #40]	@ (8000f34 <I3G4250D_Init+0x40>)
 8000f0a:	68bb      	ldr	r3, [r7, #8]
 8000f0c:	6013      	str	r3, [r2, #0]
    I3G4250D_CS_Pin = CS_Pin;
 8000f0e:	4a0a      	ldr	r2, [pc, #40]	@ (8000f38 <I3G4250D_Init+0x44>)
 8000f10:	88fb      	ldrh	r3, [r7, #6]
 8000f12:	8013      	strh	r3, [r2, #0]
    uint8_t whoami = I3G4250D_ReadWhoAmI();
 8000f14:	f000 f888 	bl	8001028 <I3G4250D_ReadWhoAmI>
 8000f18:	4603      	mov	r3, r0
 8000f1a:	75fb      	strb	r3, [r7, #23]
    return (whoami == I3G4250D_WHO_AM_I_EXPECTED);
 8000f1c:	7dfb      	ldrb	r3, [r7, #23]
 8000f1e:	2bd3      	cmp	r3, #211	@ 0xd3
 8000f20:	bf0c      	ite	eq
 8000f22:	2301      	moveq	r3, #1
 8000f24:	2300      	movne	r3, #0
 8000f26:	b2db      	uxtb	r3, r3
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	3718      	adds	r7, #24
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	200001f0 	.word	0x200001f0
 8000f34:	200001f4 	.word	0x200001f4
 8000f38:	200001f8 	.word	0x200001f8

08000f3c <I3G4250D_Configure>:

void I3G4250D_Configure(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
    I3G4250D_WriteRegister(I3G4250D_CTRL_REG1_ADDR, I3G4250D_CTRL_REG1_CFG);
 8000f40:	210f      	movs	r1, #15
 8000f42:	2020      	movs	r0, #32
 8000f44:	f000 f840 	bl	8000fc8 <I3G4250D_WriteRegister>
    I3G4250D_WriteRegister(I3G4250D_CTRL_REG4_ADDR, I3G4250D_FS_245DPS);
 8000f48:	2100      	movs	r1, #0
 8000f4a:	2023      	movs	r0, #35	@ 0x23
 8000f4c:	f000 f83c 	bl	8000fc8 <I3G4250D_WriteRegister>
}
 8000f50:	bf00      	nop
 8000f52:	bd80      	pop	{r7, pc}

08000f54 <I3G4250D_ReadRegister>:

uint8_t I3G4250D_ReadRegister(uint8_t regAddr)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	71fb      	strb	r3, [r7, #7]
    uint8_t tx = I3G4250D_READ_CMD | regAddr;
 8000f5e:	79fb      	ldrb	r3, [r7, #7]
 8000f60:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	73fb      	strb	r3, [r7, #15]
    uint8_t rx = 0;
 8000f68:	2300      	movs	r3, #0
 8000f6a:	73bb      	strb	r3, [r7, #14]
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_RESET);
 8000f6c:	4b13      	ldr	r3, [pc, #76]	@ (8000fbc <I3G4250D_ReadRegister+0x68>)
 8000f6e:	681b      	ldr	r3, [r3, #0]
 8000f70:	4a13      	ldr	r2, [pc, #76]	@ (8000fc0 <I3G4250D_ReadRegister+0x6c>)
 8000f72:	8811      	ldrh	r1, [r2, #0]
 8000f74:	2200      	movs	r2, #0
 8000f76:	4618      	mov	r0, r3
 8000f78:	f001 f9a2 	bl	80022c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(I3G4250D_hspi, &tx, 1, HAL_MAX_DELAY);
 8000f7c:	4b11      	ldr	r3, [pc, #68]	@ (8000fc4 <I3G4250D_ReadRegister+0x70>)
 8000f7e:	6818      	ldr	r0, [r3, #0]
 8000f80:	f107 010f 	add.w	r1, r7, #15
 8000f84:	f04f 33ff 	mov.w	r3, #4294967295
 8000f88:	2201      	movs	r2, #1
 8000f8a:	f001 ff22 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(I3G4250D_hspi, &rx, 1, HAL_MAX_DELAY);
 8000f8e:	4b0d      	ldr	r3, [pc, #52]	@ (8000fc4 <I3G4250D_ReadRegister+0x70>)
 8000f90:	6818      	ldr	r0, [r3, #0]
 8000f92:	f107 010e 	add.w	r1, r7, #14
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	2201      	movs	r2, #1
 8000f9c:	f002 f85d 	bl	800305a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_SET);
 8000fa0:	4b06      	ldr	r3, [pc, #24]	@ (8000fbc <I3G4250D_ReadRegister+0x68>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	4a06      	ldr	r2, [pc, #24]	@ (8000fc0 <I3G4250D_ReadRegister+0x6c>)
 8000fa6:	8811      	ldrh	r1, [r2, #0]
 8000fa8:	2201      	movs	r2, #1
 8000faa:	4618      	mov	r0, r3
 8000fac:	f001 f988 	bl	80022c0 <HAL_GPIO_WritePin>
    return rx;
 8000fb0:	7bbb      	ldrb	r3, [r7, #14]
}
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	3710      	adds	r7, #16
 8000fb6:	46bd      	mov	sp, r7
 8000fb8:	bd80      	pop	{r7, pc}
 8000fba:	bf00      	nop
 8000fbc:	200001f4 	.word	0x200001f4
 8000fc0:	200001f8 	.word	0x200001f8
 8000fc4:	200001f0 	.word	0x200001f0

08000fc8 <I3G4250D_WriteRegister>:

void I3G4250D_WriteRegister(uint8_t regAddr, uint8_t value)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b084      	sub	sp, #16
 8000fcc:	af00      	add	r7, sp, #0
 8000fce:	4603      	mov	r3, r0
 8000fd0:	460a      	mov	r2, r1
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	4613      	mov	r3, r2
 8000fd6:	71bb      	strb	r3, [r7, #6]
    uint8_t tx[2] = { I3G4250D_WRITE_CMD | regAddr, value };
 8000fd8:	79fb      	ldrb	r3, [r7, #7]
 8000fda:	733b      	strb	r3, [r7, #12]
 8000fdc:	79bb      	ldrb	r3, [r7, #6]
 8000fde:	737b      	strb	r3, [r7, #13]
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_RESET);
 8000fe0:	4b0e      	ldr	r3, [pc, #56]	@ (800101c <I3G4250D_WriteRegister+0x54>)
 8000fe2:	681b      	ldr	r3, [r3, #0]
 8000fe4:	4a0e      	ldr	r2, [pc, #56]	@ (8001020 <I3G4250D_WriteRegister+0x58>)
 8000fe6:	8811      	ldrh	r1, [r2, #0]
 8000fe8:	2200      	movs	r2, #0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 f968 	bl	80022c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(I3G4250D_hspi, tx, 2, HAL_MAX_DELAY);
 8000ff0:	4b0c      	ldr	r3, [pc, #48]	@ (8001024 <I3G4250D_WriteRegister+0x5c>)
 8000ff2:	6818      	ldr	r0, [r3, #0]
 8000ff4:	f107 010c 	add.w	r1, r7, #12
 8000ff8:	f04f 33ff 	mov.w	r3, #4294967295
 8000ffc:	2202      	movs	r2, #2
 8000ffe:	f001 fee8 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_SET);
 8001002:	4b06      	ldr	r3, [pc, #24]	@ (800101c <I3G4250D_WriteRegister+0x54>)
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a06      	ldr	r2, [pc, #24]	@ (8001020 <I3G4250D_WriteRegister+0x58>)
 8001008:	8811      	ldrh	r1, [r2, #0]
 800100a:	2201      	movs	r2, #1
 800100c:	4618      	mov	r0, r3
 800100e:	f001 f957 	bl	80022c0 <HAL_GPIO_WritePin>
}
 8001012:	bf00      	nop
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200001f4 	.word	0x200001f4
 8001020:	200001f8 	.word	0x200001f8
 8001024:	200001f0 	.word	0x200001f0

08001028 <I3G4250D_ReadWhoAmI>:

uint8_t I3G4250D_ReadWhoAmI(void)
{
 8001028:	b580      	push	{r7, lr}
 800102a:	af00      	add	r7, sp, #0
    return I3G4250D_ReadRegister(I3G4250D_WHO_AM_I_ADDR);
 800102c:	200f      	movs	r0, #15
 800102e:	f7ff ff91 	bl	8000f54 <I3G4250D_ReadRegister>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}

08001038 <I3G4250D_ReadXYZ>:

void I3G4250D_ReadXYZ(int16_t *x, int16_t *y, int16_t *z)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	60f8      	str	r0, [r7, #12]
 8001040:	60b9      	str	r1, [r7, #8]
 8001042:	607a      	str	r2, [r7, #4]
    uint8_t tx = I3G4250D_READ_CMD | I3G4250D_MULTI_BYTE | I3G4250D_OUT_X_L;
 8001044:	23e8      	movs	r3, #232	@ 0xe8
 8001046:	75fb      	strb	r3, [r7, #23]
    uint8_t rx[6];
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_RESET);
 8001048:	4b21      	ldr	r3, [pc, #132]	@ (80010d0 <I3G4250D_ReadXYZ+0x98>)
 800104a:	681b      	ldr	r3, [r3, #0]
 800104c:	4a21      	ldr	r2, [pc, #132]	@ (80010d4 <I3G4250D_ReadXYZ+0x9c>)
 800104e:	8811      	ldrh	r1, [r2, #0]
 8001050:	2200      	movs	r2, #0
 8001052:	4618      	mov	r0, r3
 8001054:	f001 f934 	bl	80022c0 <HAL_GPIO_WritePin>
    HAL_SPI_Transmit(I3G4250D_hspi, &tx, 1, HAL_MAX_DELAY);
 8001058:	4b1f      	ldr	r3, [pc, #124]	@ (80010d8 <I3G4250D_ReadXYZ+0xa0>)
 800105a:	6818      	ldr	r0, [r3, #0]
 800105c:	f107 0117 	add.w	r1, r7, #23
 8001060:	f04f 33ff 	mov.w	r3, #4294967295
 8001064:	2201      	movs	r2, #1
 8001066:	f001 feb4 	bl	8002dd2 <HAL_SPI_Transmit>
    HAL_SPI_Receive(I3G4250D_hspi, rx, 6, HAL_MAX_DELAY);
 800106a:	4b1b      	ldr	r3, [pc, #108]	@ (80010d8 <I3G4250D_ReadXYZ+0xa0>)
 800106c:	6818      	ldr	r0, [r3, #0]
 800106e:	f107 0110 	add.w	r1, r7, #16
 8001072:	f04f 33ff 	mov.w	r3, #4294967295
 8001076:	2206      	movs	r2, #6
 8001078:	f001 ffef 	bl	800305a <HAL_SPI_Receive>
    HAL_GPIO_WritePin(I3G4250D_CS_Port, I3G4250D_CS_Pin, GPIO_PIN_SET);
 800107c:	4b14      	ldr	r3, [pc, #80]	@ (80010d0 <I3G4250D_ReadXYZ+0x98>)
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	4a14      	ldr	r2, [pc, #80]	@ (80010d4 <I3G4250D_ReadXYZ+0x9c>)
 8001082:	8811      	ldrh	r1, [r2, #0]
 8001084:	2201      	movs	r2, #1
 8001086:	4618      	mov	r0, r3
 8001088:	f001 f91a 	bl	80022c0 <HAL_GPIO_WritePin>
    *x = (int16_t)(rx[1] << 8 | rx[0]);
 800108c:	7c7b      	ldrb	r3, [r7, #17]
 800108e:	b21b      	sxth	r3, r3
 8001090:	021b      	lsls	r3, r3, #8
 8001092:	b21a      	sxth	r2, r3
 8001094:	7c3b      	ldrb	r3, [r7, #16]
 8001096:	b21b      	sxth	r3, r3
 8001098:	4313      	orrs	r3, r2
 800109a:	b21a      	sxth	r2, r3
 800109c:	68fb      	ldr	r3, [r7, #12]
 800109e:	801a      	strh	r2, [r3, #0]
    *y = (int16_t)(rx[3] << 8 | rx[2]);
 80010a0:	7cfb      	ldrb	r3, [r7, #19]
 80010a2:	b21b      	sxth	r3, r3
 80010a4:	021b      	lsls	r3, r3, #8
 80010a6:	b21a      	sxth	r2, r3
 80010a8:	7cbb      	ldrb	r3, [r7, #18]
 80010aa:	b21b      	sxth	r3, r3
 80010ac:	4313      	orrs	r3, r2
 80010ae:	b21a      	sxth	r2, r3
 80010b0:	68bb      	ldr	r3, [r7, #8]
 80010b2:	801a      	strh	r2, [r3, #0]
    *z = (int16_t)(rx[5] << 8 | rx[4]);
 80010b4:	7d7b      	ldrb	r3, [r7, #21]
 80010b6:	b21b      	sxth	r3, r3
 80010b8:	021b      	lsls	r3, r3, #8
 80010ba:	b21a      	sxth	r2, r3
 80010bc:	7d3b      	ldrb	r3, [r7, #20]
 80010be:	b21b      	sxth	r3, r3
 80010c0:	4313      	orrs	r3, r2
 80010c2:	b21a      	sxth	r2, r3
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	801a      	strh	r2, [r3, #0]
}
 80010c8:	bf00      	nop
 80010ca:	3718      	adds	r7, #24
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	200001f4 	.word	0x200001f4
 80010d4:	200001f8 	.word	0x200001f8
 80010d8:	200001f0 	.word	0x200001f0

080010dc <I3G4250D_ReadXYZ_dps>:

void I3G4250D_ReadXYZ_dps(float *x, float *y, float *z)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	b088      	sub	sp, #32
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	60f8      	str	r0, [r7, #12]
 80010e4:	60b9      	str	r1, [r7, #8]
 80010e6:	607a      	str	r2, [r7, #4]
    int16_t rawX, rawY, rawZ;
    I3G4250D_ReadXYZ(&rawX, &rawY, &rawZ);
 80010e8:	f107 0216 	add.w	r2, r7, #22
 80010ec:	f107 0118 	add.w	r1, r7, #24
 80010f0:	f107 031a 	add.w	r3, r7, #26
 80010f4:	4618      	mov	r0, r3
 80010f6:	f7ff ff9f 	bl	8001038 <I3G4250D_ReadXYZ>
    float sensitivity = I3G4250D_SENSITIVITY_245DPS;
 80010fa:	4b1c      	ldr	r3, [pc, #112]	@ (800116c <I3G4250D_ReadXYZ_dps+0x90>)
 80010fc:	61fb      	str	r3, [r7, #28]
    *x = rawX * sensitivity / 1000.0f;
 80010fe:	f9b7 301a 	ldrsh.w	r3, [r7, #26]
 8001102:	ee07 3a90 	vmov	s15, r3
 8001106:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800110a:	edd7 7a07 	vldr	s15, [r7, #28]
 800110e:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001112:	eddf 6a17 	vldr	s13, [pc, #92]	@ 8001170 <I3G4250D_ReadXYZ_dps+0x94>
 8001116:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800111a:	68fb      	ldr	r3, [r7, #12]
 800111c:	edc3 7a00 	vstr	s15, [r3]
    *y = rawY * sensitivity / 1000.0f;
 8001120:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001124:	ee07 3a90 	vmov	s15, r3
 8001128:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800112c:	edd7 7a07 	vldr	s15, [r7, #28]
 8001130:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001134:	eddf 6a0e 	vldr	s13, [pc, #56]	@ 8001170 <I3G4250D_ReadXYZ_dps+0x94>
 8001138:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800113c:	68bb      	ldr	r3, [r7, #8]
 800113e:	edc3 7a00 	vstr	s15, [r3]
    *z = rawZ * sensitivity / 1000.0f;
 8001142:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001146:	ee07 3a90 	vmov	s15, r3
 800114a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800114e:	edd7 7a07 	vldr	s15, [r7, #28]
 8001152:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001156:	eddf 6a06 	vldr	s13, [pc, #24]	@ 8001170 <I3G4250D_ReadXYZ_dps+0x94>
 800115a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	edc3 7a00 	vstr	s15, [r3]
}
 8001164:	bf00      	nop
 8001166:	3720      	adds	r7, #32
 8001168:	46bd      	mov	sp, r7
 800116a:	bd80      	pop	{r7, pc}
 800116c:	410c0000 	.word	0x410c0000
 8001170:	447a0000 	.word	0x447a0000

08001174 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001174:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001178:	b08a      	sub	sp, #40	@ 0x28
 800117a:	af04      	add	r7, sp, #16
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800117c:	f000 fd70 	bl	8001c60 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001180:	f000 f86a 	bl	8001258 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001184:	f000 f90e 	bl	80013a4 <MX_GPIO_Init>
  MX_SPI5_Init();
 8001188:	f000 f8d6 	bl	8001338 <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  if (!I3G4250D_Init(&hspi5, GPIOC, GPIO_PIN_1)) {
 800118c:	2202      	movs	r2, #2
 800118e:	492a      	ldr	r1, [pc, #168]	@ (8001238 <main+0xc4>)
 8001190:	482a      	ldr	r0, [pc, #168]	@ (800123c <main+0xc8>)
 8001192:	f7ff feaf 	bl	8000ef4 <I3G4250D_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d104      	bne.n	80011a6 <main+0x32>
    printf("Erreur : I3G4250D non détecté !\n");
 800119c:	4828      	ldr	r0, [pc, #160]	@ (8001240 <main+0xcc>)
 800119e:	f003 f8e1 	bl	8004364 <puts>
    Error_Handler();
 80011a2:	f000 fb87 	bl	80018b4 <Error_Handler>
  }

  printf("I3G4250D détecté. Configuration en cours...\n");
 80011a6:	4827      	ldr	r0, [pc, #156]	@ (8001244 <main+0xd0>)
 80011a8:	f003 f8dc 	bl	8004364 <puts>
  I3G4250D_Configure();
 80011ac:	f7ff fec6 	bl	8000f3c <I3G4250D_Configure>

  printf("Hello depuis STM32 via ITM/SWO !\n");
 80011b0:	4825      	ldr	r0, [pc, #148]	@ (8001248 <main+0xd4>)
 80011b2:	f003 f8d7 	bl	8004364 <puts>

  // Vérification WHO_AM_I
  uint8_t whoami = I3G4250D_ReadWhoAmI();
 80011b6:	f7ff ff37 	bl	8001028 <I3G4250D_ReadWhoAmI>
 80011ba:	4603      	mov	r3, r0
 80011bc:	74fb      	strb	r3, [r7, #19]
  printf("WHO_AM_I = 0x%02X (attendu 0xD3)\n", whoami);
 80011be:	7cfb      	ldrb	r3, [r7, #19]
 80011c0:	4619      	mov	r1, r3
 80011c2:	4822      	ldr	r0, [pc, #136]	@ (800124c <main+0xd8>)
 80011c4:	f003 f866 	bl	8004294 <iprintf>

  // Pour le clignotement LED + lecture gyro
  uint32_t now = 0, last = 0;
 80011c8:	2300      	movs	r3, #0
 80011ca:	60fb      	str	r3, [r7, #12]
 80011cc:	2300      	movs	r3, #0
 80011ce:	617b      	str	r3, [r7, #20]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    now = HAL_GetTick();
 80011d0:	f000 fdac 	bl	8001d2c <HAL_GetTick>
 80011d4:	60f8      	str	r0, [r7, #12]
    if (now - last >= 1000) // Toggle every second
 80011d6:	68fa      	ldr	r2, [r7, #12]
 80011d8:	697b      	ldr	r3, [r7, #20]
 80011da:	1ad3      	subs	r3, r2, r3
 80011dc:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80011e0:	d3f6      	bcc.n	80011d0 <main+0x5c>
    {
      last = now;
 80011e2:	68fb      	ldr	r3, [r7, #12]
 80011e4:	617b      	str	r3, [r7, #20]
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 80011e6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011ea:	4819      	ldr	r0, [pc, #100]	@ (8001250 <main+0xdc>)
 80011ec:	f001 f881 	bl	80022f2 <HAL_GPIO_TogglePin>

      I3G4250D_ReadXYZ_dps(&gx, &gy, &gz);
 80011f0:	463a      	mov	r2, r7
 80011f2:	1d39      	adds	r1, r7, #4
 80011f4:	f107 0308 	add.w	r3, r7, #8
 80011f8:	4618      	mov	r0, r3
 80011fa:	f7ff ff6f 	bl	80010dc <I3G4250D_ReadXYZ_dps>
      printf("Gyro [dps] => X: %.2f | Y: %.2f | Z: %.2f\n", gx, gy, gz);
 80011fe:	68bb      	ldr	r3, [r7, #8]
 8001200:	4618      	mov	r0, r3
 8001202:	f7ff f9b1 	bl	8000568 <__aeabi_f2d>
 8001206:	4680      	mov	r8, r0
 8001208:	4689      	mov	r9, r1
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4618      	mov	r0, r3
 800120e:	f7ff f9ab 	bl	8000568 <__aeabi_f2d>
 8001212:	4604      	mov	r4, r0
 8001214:	460d      	mov	r5, r1
 8001216:	683b      	ldr	r3, [r7, #0]
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff f9a5 	bl	8000568 <__aeabi_f2d>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001226:	e9cd 4500 	strd	r4, r5, [sp]
 800122a:	4642      	mov	r2, r8
 800122c:	464b      	mov	r3, r9
 800122e:	4809      	ldr	r0, [pc, #36]	@ (8001254 <main+0xe0>)
 8001230:	f003 f830 	bl	8004294 <iprintf>
    now = HAL_GetTick();
 8001234:	e7cc      	b.n	80011d0 <main+0x5c>
 8001236:	bf00      	nop
 8001238:	40020800 	.word	0x40020800
 800123c:	200001fc 	.word	0x200001fc
 8001240:	08006268 	.word	0x08006268
 8001244:	0800628c 	.word	0x0800628c
 8001248:	080062bc 	.word	0x080062bc
 800124c:	080062e0 	.word	0x080062e0
 8001250:	40021800 	.word	0x40021800
 8001254:	08006304 	.word	0x08006304

08001258 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b094      	sub	sp, #80	@ 0x50
 800125c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800125e:	f107 0320 	add.w	r3, r7, #32
 8001262:	2230      	movs	r2, #48	@ 0x30
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 f95c 	bl	8004524 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800126c:	f107 030c 	add.w	r3, r7, #12
 8001270:	2200      	movs	r2, #0
 8001272:	601a      	str	r2, [r3, #0]
 8001274:	605a      	str	r2, [r3, #4]
 8001276:	609a      	str	r2, [r3, #8]
 8001278:	60da      	str	r2, [r3, #12]
 800127a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800127c:	2300      	movs	r3, #0
 800127e:	60bb      	str	r3, [r7, #8]
 8001280:	4b2b      	ldr	r3, [pc, #172]	@ (8001330 <SystemClock_Config+0xd8>)
 8001282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001284:	4a2a      	ldr	r2, [pc, #168]	@ (8001330 <SystemClock_Config+0xd8>)
 8001286:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800128a:	6413      	str	r3, [r2, #64]	@ 0x40
 800128c:	4b28      	ldr	r3, [pc, #160]	@ (8001330 <SystemClock_Config+0xd8>)
 800128e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001290:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001294:	60bb      	str	r3, [r7, #8]
 8001296:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001298:	2300      	movs	r3, #0
 800129a:	607b      	str	r3, [r7, #4]
 800129c:	4b25      	ldr	r3, [pc, #148]	@ (8001334 <SystemClock_Config+0xdc>)
 800129e:	681b      	ldr	r3, [r3, #0]
 80012a0:	4a24      	ldr	r2, [pc, #144]	@ (8001334 <SystemClock_Config+0xdc>)
 80012a2:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80012a6:	6013      	str	r3, [r2, #0]
 80012a8:	4b22      	ldr	r3, [pc, #136]	@ (8001334 <SystemClock_Config+0xdc>)
 80012aa:	681b      	ldr	r3, [r3, #0]
 80012ac:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80012b0:	607b      	str	r3, [r7, #4]
 80012b2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012b4:	2302      	movs	r3, #2
 80012b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012b8:	2301      	movs	r3, #1
 80012ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012bc:	2310      	movs	r3, #16
 80012be:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012c0:	2302      	movs	r3, #2
 80012c2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80012c4:	2300      	movs	r3, #0
 80012c6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012c8:	2308      	movs	r3, #8
 80012ca:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80012cc:	23b4      	movs	r3, #180	@ 0xb4
 80012ce:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012d0:	2302      	movs	r3, #2
 80012d2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80012d4:	2307      	movs	r3, #7
 80012d6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012d8:	f107 0320 	add.w	r3, r7, #32
 80012dc:	4618      	mov	r0, r3
 80012de:	f001 f88b 	bl	80023f8 <HAL_RCC_OscConfig>
 80012e2:	4603      	mov	r3, r0
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d001      	beq.n	80012ec <SystemClock_Config+0x94>
  {
    Error_Handler();
 80012e8:	f000 fae4 	bl	80018b4 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80012ec:	f001 f834 	bl	8002358 <HAL_PWREx_EnableOverDrive>
 80012f0:	4603      	mov	r3, r0
 80012f2:	2b00      	cmp	r3, #0
 80012f4:	d001      	beq.n	80012fa <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80012f6:	f000 fadd 	bl	80018b4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012fa:	230f      	movs	r3, #15
 80012fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012fe:	2302      	movs	r3, #2
 8001300:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001302:	2300      	movs	r3, #0
 8001304:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001306:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800130a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800130c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001310:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001312:	f107 030c 	add.w	r3, r7, #12
 8001316:	2105      	movs	r1, #5
 8001318:	4618      	mov	r0, r3
 800131a:	f001 fae5 	bl	80028e8 <HAL_RCC_ClockConfig>
 800131e:	4603      	mov	r3, r0
 8001320:	2b00      	cmp	r3, #0
 8001322:	d001      	beq.n	8001328 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8001324:	f000 fac6 	bl	80018b4 <Error_Handler>
  }
}
 8001328:	bf00      	nop
 800132a:	3750      	adds	r7, #80	@ 0x50
 800132c:	46bd      	mov	sp, r7
 800132e:	bd80      	pop	{r7, pc}
 8001330:	40023800 	.word	0x40023800
 8001334:	40007000 	.word	0x40007000

08001338 <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 8001338:	b580      	push	{r7, lr}
 800133a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 800133c:	4b17      	ldr	r3, [pc, #92]	@ (800139c <MX_SPI5_Init+0x64>)
 800133e:	4a18      	ldr	r2, [pc, #96]	@ (80013a0 <MX_SPI5_Init+0x68>)
 8001340:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001342:	4b16      	ldr	r3, [pc, #88]	@ (800139c <MX_SPI5_Init+0x64>)
 8001344:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001348:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800134a:	4b14      	ldr	r3, [pc, #80]	@ (800139c <MX_SPI5_Init+0x64>)
 800134c:	2200      	movs	r2, #0
 800134e:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8001350:	4b12      	ldr	r3, [pc, #72]	@ (800139c <MX_SPI5_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001356:	4b11      	ldr	r3, [pc, #68]	@ (800139c <MX_SPI5_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 800135c:	4b0f      	ldr	r3, [pc, #60]	@ (800139c <MX_SPI5_Init+0x64>)
 800135e:	2201      	movs	r2, #1
 8001360:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001362:	4b0e      	ldr	r3, [pc, #56]	@ (800139c <MX_SPI5_Init+0x64>)
 8001364:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001368:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800136a:	4b0c      	ldr	r3, [pc, #48]	@ (800139c <MX_SPI5_Init+0x64>)
 800136c:	2218      	movs	r2, #24
 800136e:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001370:	4b0a      	ldr	r3, [pc, #40]	@ (800139c <MX_SPI5_Init+0x64>)
 8001372:	2200      	movs	r2, #0
 8001374:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 8001376:	4b09      	ldr	r3, [pc, #36]	@ (800139c <MX_SPI5_Init+0x64>)
 8001378:	2200      	movs	r2, #0
 800137a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800137c:	4b07      	ldr	r3, [pc, #28]	@ (800139c <MX_SPI5_Init+0x64>)
 800137e:	2200      	movs	r2, #0
 8001380:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 8001382:	4b06      	ldr	r3, [pc, #24]	@ (800139c <MX_SPI5_Init+0x64>)
 8001384:	220a      	movs	r2, #10
 8001386:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 8001388:	4804      	ldr	r0, [pc, #16]	@ (800139c <MX_SPI5_Init+0x64>)
 800138a:	f001 fc99 	bl	8002cc0 <HAL_SPI_Init>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d001      	beq.n	8001398 <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 8001394:	f000 fa8e 	bl	80018b4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 8001398:	bf00      	nop
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001fc 	.word	0x200001fc
 80013a0:	40015000 	.word	0x40015000

080013a4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08e      	sub	sp, #56	@ 0x38
 80013a8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013aa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80013ae:	2200      	movs	r2, #0
 80013b0:	601a      	str	r2, [r3, #0]
 80013b2:	605a      	str	r2, [r3, #4]
 80013b4:	609a      	str	r2, [r3, #8]
 80013b6:	60da      	str	r2, [r3, #12]
 80013b8:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ba:	2300      	movs	r3, #0
 80013bc:	623b      	str	r3, [r7, #32]
 80013be:	4bb2      	ldr	r3, [pc, #712]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013c2:	4ab1      	ldr	r2, [pc, #708]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013c4:	f043 0304 	orr.w	r3, r3, #4
 80013c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80013ca:	4baf      	ldr	r3, [pc, #700]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ce:	f003 0304 	and.w	r3, r3, #4
 80013d2:	623b      	str	r3, [r7, #32]
 80013d4:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80013d6:	2300      	movs	r3, #0
 80013d8:	61fb      	str	r3, [r7, #28]
 80013da:	4bab      	ldr	r3, [pc, #684]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013de:	4aaa      	ldr	r2, [pc, #680]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013e0:	f043 0320 	orr.w	r3, r3, #32
 80013e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013e6:	4ba8      	ldr	r3, [pc, #672]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ea:	f003 0320 	and.w	r3, r3, #32
 80013ee:	61fb      	str	r3, [r7, #28]
 80013f0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
 80013f6:	4ba4      	ldr	r3, [pc, #656]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013fa:	4aa3      	ldr	r2, [pc, #652]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 80013fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001400:	6313      	str	r3, [r2, #48]	@ 0x30
 8001402:	4ba1      	ldr	r3, [pc, #644]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001406:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800140a:	61bb      	str	r3, [r7, #24]
 800140c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800140e:	2300      	movs	r3, #0
 8001410:	617b      	str	r3, [r7, #20]
 8001412:	4b9d      	ldr	r3, [pc, #628]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001414:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001416:	4a9c      	ldr	r2, [pc, #624]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001418:	f043 0301 	orr.w	r3, r3, #1
 800141c:	6313      	str	r3, [r2, #48]	@ 0x30
 800141e:	4b9a      	ldr	r3, [pc, #616]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	617b      	str	r3, [r7, #20]
 8001428:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800142a:	2300      	movs	r3, #0
 800142c:	613b      	str	r3, [r7, #16]
 800142e:	4b96      	ldr	r3, [pc, #600]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	4a95      	ldr	r2, [pc, #596]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001434:	f043 0302 	orr.w	r3, r3, #2
 8001438:	6313      	str	r3, [r2, #48]	@ 0x30
 800143a:	4b93      	ldr	r3, [pc, #588]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 800143c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800143e:	f003 0302 	and.w	r3, r3, #2
 8001442:	613b      	str	r3, [r7, #16]
 8001444:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8001446:	2300      	movs	r3, #0
 8001448:	60fb      	str	r3, [r7, #12]
 800144a:	4b8f      	ldr	r3, [pc, #572]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	4a8e      	ldr	r2, [pc, #568]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001450:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001454:	6313      	str	r3, [r2, #48]	@ 0x30
 8001456:	4b8c      	ldr	r3, [pc, #560]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800145e:	60fb      	str	r3, [r7, #12]
 8001460:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001462:	2300      	movs	r3, #0
 8001464:	60bb      	str	r3, [r7, #8]
 8001466:	4b88      	ldr	r3, [pc, #544]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	4a87      	ldr	r2, [pc, #540]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 800146c:	f043 0310 	orr.w	r3, r3, #16
 8001470:	6313      	str	r3, [r2, #48]	@ 0x30
 8001472:	4b85      	ldr	r3, [pc, #532]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001476:	f003 0310 	and.w	r3, r3, #16
 800147a:	60bb      	str	r3, [r7, #8]
 800147c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800147e:	2300      	movs	r3, #0
 8001480:	607b      	str	r3, [r7, #4]
 8001482:	4b81      	ldr	r3, [pc, #516]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	4a80      	ldr	r2, [pc, #512]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001488:	f043 0308 	orr.w	r3, r3, #8
 800148c:	6313      	str	r3, [r2, #48]	@ 0x30
 800148e:	4b7e      	ldr	r3, [pc, #504]	@ (8001688 <MX_GPIO_Init+0x2e4>)
 8001490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001492:	f003 0308 	and.w	r3, r3, #8
 8001496:	607b      	str	r3, [r7, #4]
 8001498:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 800149a:	2200      	movs	r2, #0
 800149c:	2116      	movs	r1, #22
 800149e:	487b      	ldr	r0, [pc, #492]	@ (800168c <MX_GPIO_Init+0x2e8>)
 80014a0:	f000 ff0e 	bl	80022c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80014a4:	2200      	movs	r2, #0
 80014a6:	2180      	movs	r1, #128	@ 0x80
 80014a8:	4879      	ldr	r0, [pc, #484]	@ (8001690 <MX_GPIO_Init+0x2ec>)
 80014aa:	f000 ff09 	bl	80022c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80014ae:	2200      	movs	r2, #0
 80014b0:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80014b4:	4877      	ldr	r0, [pc, #476]	@ (8001694 <MX_GPIO_Init+0x2f0>)
 80014b6:	f000 ff03 	bl	80022c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80014ba:	2200      	movs	r2, #0
 80014bc:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80014c0:	4875      	ldr	r0, [pc, #468]	@ (8001698 <MX_GPIO_Init+0x2f4>)
 80014c2:	f000 fefd 	bl	80022c0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80014c6:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80014ca:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014cc:	2302      	movs	r3, #2
 80014ce:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d0:	2300      	movs	r3, #0
 80014d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80014d4:	2303      	movs	r3, #3
 80014d6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80014d8:	230c      	movs	r3, #12
 80014da:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80014dc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80014e0:	4619      	mov	r1, r3
 80014e2:	486e      	ldr	r0, [pc, #440]	@ (800169c <MX_GPIO_Init+0x2f8>)
 80014e4:	f000 fd40 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80014e8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80014ec:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ee:	2302      	movs	r3, #2
 80014f0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f2:	2300      	movs	r3, #0
 80014f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014f6:	2300      	movs	r3, #0
 80014f8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80014fa:	230e      	movs	r3, #14
 80014fc:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80014fe:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001502:	4619      	mov	r1, r3
 8001504:	4865      	ldr	r0, [pc, #404]	@ (800169c <MX_GPIO_Init+0x2f8>)
 8001506:	f000 fd2f 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800150a:	2301      	movs	r3, #1
 800150c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800150e:	2302      	movs	r3, #2
 8001510:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001512:	2300      	movs	r3, #0
 8001514:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001516:	2303      	movs	r3, #3
 8001518:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800151a:	230c      	movs	r3, #12
 800151c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 800151e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001522:	4619      	mov	r1, r3
 8001524:	4859      	ldr	r0, [pc, #356]	@ (800168c <MX_GPIO_Init+0x2e8>)
 8001526:	f000 fd1f 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800152a:	2316      	movs	r3, #22
 800152c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800152e:	2301      	movs	r3, #1
 8001530:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001532:	2300      	movs	r3, #0
 8001534:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001536:	2300      	movs	r3, #0
 8001538:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800153a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800153e:	4619      	mov	r1, r3
 8001540:	4852      	ldr	r0, [pc, #328]	@ (800168c <MX_GPIO_Init+0x2e8>)
 8001542:	f000 fd11 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001546:	2301      	movs	r3, #1
 8001548:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800154a:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 800154e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8001550:	2302      	movs	r3, #2
 8001552:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001554:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001558:	4619      	mov	r1, r3
 800155a:	484d      	ldr	r0, [pc, #308]	@ (8001690 <MX_GPIO_Init+0x2ec>)
 800155c:	f000 fd04 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8001560:	f248 0306 	movw	r3, #32774	@ 0x8006
 8001564:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8001566:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800156a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800156c:	2300      	movs	r3, #0
 800156e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001570:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001574:	4619      	mov	r1, r3
 8001576:	4846      	ldr	r0, [pc, #280]	@ (8001690 <MX_GPIO_Init+0x2ec>)
 8001578:	f000 fcf6 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 800157c:	f641 0358 	movw	r3, #6232	@ 0x1858
 8001580:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001582:	2302      	movs	r3, #2
 8001584:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800158a:	2300      	movs	r3, #0
 800158c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800158e:	230e      	movs	r3, #14
 8001590:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001592:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001596:	4619      	mov	r1, r3
 8001598:	483d      	ldr	r0, [pc, #244]	@ (8001690 <MX_GPIO_Init+0x2ec>)
 800159a:	f000 fce5 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 800159e:	2380      	movs	r3, #128	@ 0x80
 80015a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a2:	2301      	movs	r3, #1
 80015a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015a6:	2300      	movs	r3, #0
 80015a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015aa:	2300      	movs	r3, #0
 80015ac:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80015ae:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015b2:	4619      	mov	r1, r3
 80015b4:	4836      	ldr	r0, [pc, #216]	@ (8001690 <MX_GPIO_Init+0x2ec>)
 80015b6:	f000 fcd7 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80015ba:	2320      	movs	r3, #32
 80015bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80015be:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80015c2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80015c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015cc:	4619      	mov	r1, r3
 80015ce:	482f      	ldr	r0, [pc, #188]	@ (800168c <MX_GPIO_Init+0x2e8>)
 80015d0:	f000 fcca 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80015d4:	2303      	movs	r3, #3
 80015d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d8:	2302      	movs	r3, #2
 80015da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015dc:	2300      	movs	r3, #0
 80015de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015e0:	2300      	movs	r3, #0
 80015e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80015e4:	2309      	movs	r3, #9
 80015e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80015ec:	4619      	mov	r1, r3
 80015ee:	482c      	ldr	r0, [pc, #176]	@ (80016a0 <MX_GPIO_Init+0x2fc>)
 80015f0:	f000 fcba 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80015f4:	2304      	movs	r3, #4
 80015f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015f8:	2300      	movs	r3, #0
 80015fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8001600:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001604:	4619      	mov	r1, r3
 8001606:	4826      	ldr	r0, [pc, #152]	@ (80016a0 <MX_GPIO_Init+0x2fc>)
 8001608:	f000 fcae 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 800160c:	f248 1333 	movw	r3, #33075	@ 0x8133
 8001610:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001612:	2302      	movs	r3, #2
 8001614:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001616:	2300      	movs	r3, #0
 8001618:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800161a:	2303      	movs	r3, #3
 800161c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800161e:	230c      	movs	r3, #12
 8001620:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001622:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001626:	4619      	mov	r1, r3
 8001628:	481b      	ldr	r0, [pc, #108]	@ (8001698 <MX_GPIO_Init+0x2f4>)
 800162a:	f000 fc9d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 800162e:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8001632:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001634:	2302      	movs	r3, #2
 8001636:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001638:	2300      	movs	r3, #0
 800163a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800163c:	2303      	movs	r3, #3
 800163e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001640:	230c      	movs	r3, #12
 8001642:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001644:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001648:	4619      	mov	r1, r3
 800164a:	4816      	ldr	r0, [pc, #88]	@ (80016a4 <MX_GPIO_Init+0x300>)
 800164c:	f000 fc8c 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8001650:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8001654:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001656:	2302      	movs	r3, #2
 8001658:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001662:	230e      	movs	r3, #14
 8001664:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001666:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800166a:	4619      	mov	r1, r3
 800166c:	480c      	ldr	r0, [pc, #48]	@ (80016a0 <MX_GPIO_Init+0x2fc>)
 800166e:	f000 fc7b 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8001672:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8001676:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001678:	2302      	movs	r3, #2
 800167a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800167c:	2300      	movs	r3, #0
 800167e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001680:	2300      	movs	r3, #0
 8001682:	633b      	str	r3, [r7, #48]	@ 0x30
 8001684:	e010      	b.n	80016a8 <MX_GPIO_Init+0x304>
 8001686:	bf00      	nop
 8001688:	40023800 	.word	0x40023800
 800168c:	40020800 	.word	0x40020800
 8001690:	40020000 	.word	0x40020000
 8001694:	40020c00 	.word	0x40020c00
 8001698:	40021800 	.word	0x40021800
 800169c:	40021400 	.word	0x40021400
 80016a0:	40020400 	.word	0x40020400
 80016a4:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 80016a8:	230c      	movs	r3, #12
 80016aa:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016ac:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016b0:	4619      	mov	r1, r3
 80016b2:	486f      	ldr	r0, [pc, #444]	@ (8001870 <MX_GPIO_Init+0x4cc>)
 80016b4:	f000 fc58 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 80016b8:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80016bc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016be:	2300      	movs	r3, #0
 80016c0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016c2:	2300      	movs	r3, #0
 80016c4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 80016c6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ca:	4619      	mov	r1, r3
 80016cc:	4868      	ldr	r0, [pc, #416]	@ (8001870 <MX_GPIO_Init+0x4cc>)
 80016ce:	f000 fc4b 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 80016d2:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80016d6:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016d8:	2302      	movs	r3, #2
 80016da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016dc:	2300      	movs	r3, #0
 80016de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80016e0:	2303      	movs	r3, #3
 80016e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80016e4:	230c      	movs	r3, #12
 80016e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80016e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80016ec:	4619      	mov	r1, r3
 80016ee:	4861      	ldr	r0, [pc, #388]	@ (8001874 <MX_GPIO_Init+0x4d0>)
 80016f0:	f000 fc3a 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80016f4:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80016f8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80016fa:	2300      	movs	r3, #0
 80016fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016fe:	2300      	movs	r3, #0
 8001700:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8001702:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001706:	4619      	mov	r1, r3
 8001708:	485a      	ldr	r0, [pc, #360]	@ (8001874 <MX_GPIO_Init+0x4d0>)
 800170a:	f000 fc2d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 800170e:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8001712:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001714:	2301      	movs	r3, #1
 8001716:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001718:	2300      	movs	r3, #0
 800171a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800171c:	2300      	movs	r3, #0
 800171e:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001720:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001724:	4619      	mov	r1, r3
 8001726:	4853      	ldr	r0, [pc, #332]	@ (8001874 <MX_GPIO_Init+0x4d0>)
 8001728:	f000 fc1e 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 800172c:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8001730:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001732:	2302      	movs	r3, #2
 8001734:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001736:	2300      	movs	r3, #0
 8001738:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800173a:	2300      	movs	r3, #0
 800173c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800173e:	230e      	movs	r3, #14
 8001740:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8001742:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001746:	4619      	mov	r1, r3
 8001748:	484b      	ldr	r0, [pc, #300]	@ (8001878 <MX_GPIO_Init+0x4d4>)
 800174a:	f000 fc0d 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 800174e:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8001752:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001754:	2302      	movs	r3, #2
 8001756:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001758:	2300      	movs	r3, #0
 800175a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800175c:	2300      	movs	r3, #0
 800175e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8001760:	230e      	movs	r3, #14
 8001762:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001764:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001768:	4619      	mov	r1, r3
 800176a:	4844      	ldr	r0, [pc, #272]	@ (800187c <MX_GPIO_Init+0x4d8>)
 800176c:	f000 fbfc 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8001770:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001776:	2312      	movs	r3, #18
 8001778:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800177a:	2300      	movs	r3, #0
 800177c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177e:	2300      	movs	r3, #0
 8001780:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001782:	2304      	movs	r3, #4
 8001784:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8001786:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800178a:	4619      	mov	r1, r3
 800178c:	483b      	ldr	r0, [pc, #236]	@ (800187c <MX_GPIO_Init+0x4d8>)
 800178e:	f000 fbeb 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8001792:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001796:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001798:	2312      	movs	r3, #18
 800179a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800179c:	2300      	movs	r3, #0
 800179e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017a0:	2300      	movs	r3, #0
 80017a2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80017a4:	2304      	movs	r3, #4
 80017a6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 80017a8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ac:	4619      	mov	r1, r3
 80017ae:	4834      	ldr	r0, [pc, #208]	@ (8001880 <MX_GPIO_Init+0x4dc>)
 80017b0:	f000 fbda 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 80017b4:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 80017b8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017ba:	2302      	movs	r3, #2
 80017bc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017be:	2300      	movs	r3, #0
 80017c0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017c2:	2303      	movs	r3, #3
 80017c4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80017c6:	2307      	movs	r3, #7
 80017c8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ce:	4619      	mov	r1, r3
 80017d0:	482b      	ldr	r0, [pc, #172]	@ (8001880 <MX_GPIO_Init+0x4dc>)
 80017d2:	f000 fbc9 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 80017d6:	2348      	movs	r3, #72	@ 0x48
 80017d8:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e2:	2300      	movs	r3, #0
 80017e4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80017e6:	230e      	movs	r3, #14
 80017e8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80017ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80017ee:	4619      	mov	r1, r3
 80017f0:	4820      	ldr	r0, [pc, #128]	@ (8001874 <MX_GPIO_Init+0x4d0>)
 80017f2:	f000 fbb9 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 80017f6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017fc:	2302      	movs	r3, #2
 80017fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001800:	2300      	movs	r3, #0
 8001802:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001804:	2300      	movs	r3, #0
 8001806:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8001808:	2309      	movs	r3, #9
 800180a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800180c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001810:	4619      	mov	r1, r3
 8001812:	4819      	ldr	r0, [pc, #100]	@ (8001878 <MX_GPIO_Init+0x4d4>)
 8001814:	f000 fba8 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8001818:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 800181c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800181e:	2301      	movs	r3, #1
 8001820:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001822:	2300      	movs	r3, #0
 8001824:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001826:	2300      	movs	r3, #0
 8001828:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800182a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800182e:	4619      	mov	r1, r3
 8001830:	4811      	ldr	r0, [pc, #68]	@ (8001878 <MX_GPIO_Init+0x4d4>)
 8001832:	f000 fb99 	bl	8001f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8001836:	2360      	movs	r3, #96	@ 0x60
 8001838:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183a:	2302      	movs	r3, #2
 800183c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800183e:	2300      	movs	r3, #0
 8001840:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001842:	2303      	movs	r3, #3
 8001844:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8001846:	230c      	movs	r3, #12
 8001848:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800184e:	4619      	mov	r1, r3
 8001850:	4807      	ldr	r0, [pc, #28]	@ (8001870 <MX_GPIO_Init+0x4cc>)
 8001852:	f000 fb89 	bl	8001f68 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8001856:	2200      	movs	r2, #0
 8001858:	2100      	movs	r1, #0
 800185a:	2006      	movs	r0, #6
 800185c:	f000 fb4d 	bl	8001efa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8001860:	2006      	movs	r0, #6
 8001862:	f000 fb66 	bl	8001f32 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001866:	bf00      	nop
 8001868:	3738      	adds	r7, #56	@ 0x38
 800186a:	46bd      	mov	sp, r7
 800186c:	bd80      	pop	{r7, pc}
 800186e:	bf00      	nop
 8001870:	40020400 	.word	0x40020400
 8001874:	40020c00 	.word	0x40020c00
 8001878:	40021800 	.word	0x40021800
 800187c:	40020800 	.word	0x40020800
 8001880:	40020000 	.word	0x40020000

08001884 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	b082      	sub	sp, #8
 8001888:	af00      	add	r7, sp, #0
 800188a:	4603      	mov	r3, r0
 800188c:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 800188e:	88fb      	ldrh	r3, [r7, #6]
 8001890:	2b01      	cmp	r3, #1
 8001892:	d107      	bne.n	80018a4 <HAL_GPIO_EXTI_Callback+0x20>
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8001894:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001898:	4804      	ldr	r0, [pc, #16]	@ (80018ac <HAL_GPIO_EXTI_Callback+0x28>)
 800189a:	f000 fd2a 	bl	80022f2 <HAL_GPIO_TogglePin>
    printf("Button pressed, toggling LD3!\n");
 800189e:	4804      	ldr	r0, [pc, #16]	@ (80018b0 <HAL_GPIO_EXTI_Callback+0x2c>)
 80018a0:	f002 fd60 	bl	8004364 <puts>
  }
}
 80018a4:	bf00      	nop
 80018a6:	3708      	adds	r7, #8
 80018a8:	46bd      	mov	sp, r7
 80018aa:	bd80      	pop	{r7, pc}
 80018ac:	40021800 	.word	0x40021800
 80018b0:	08006330 	.word	0x08006330

080018b4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80018b4:	b480      	push	{r7}
 80018b6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80018b8:	b672      	cpsid	i
}
 80018ba:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80018bc:	bf00      	nop
 80018be:	e7fd      	b.n	80018bc <Error_Handler+0x8>

080018c0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018c6:	2300      	movs	r3, #0
 80018c8:	607b      	str	r3, [r7, #4]
 80018ca:	4b10      	ldr	r3, [pc, #64]	@ (800190c <HAL_MspInit+0x4c>)
 80018cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018ce:	4a0f      	ldr	r2, [pc, #60]	@ (800190c <HAL_MspInit+0x4c>)
 80018d0:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80018d4:	6453      	str	r3, [r2, #68]	@ 0x44
 80018d6:	4b0d      	ldr	r3, [pc, #52]	@ (800190c <HAL_MspInit+0x4c>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80018da:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80018de:	607b      	str	r3, [r7, #4]
 80018e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80018e2:	2300      	movs	r3, #0
 80018e4:	603b      	str	r3, [r7, #0]
 80018e6:	4b09      	ldr	r3, [pc, #36]	@ (800190c <HAL_MspInit+0x4c>)
 80018e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018ea:	4a08      	ldr	r2, [pc, #32]	@ (800190c <HAL_MspInit+0x4c>)
 80018ec:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80018f2:	4b06      	ldr	r3, [pc, #24]	@ (800190c <HAL_MspInit+0x4c>)
 80018f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018f6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018fa:	603b      	str	r3, [r7, #0]
 80018fc:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80018fe:	2007      	movs	r0, #7
 8001900:	f000 faf0 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001904:	bf00      	nop
 8001906:	3708      	adds	r7, #8
 8001908:	46bd      	mov	sp, r7
 800190a:	bd80      	pop	{r7, pc}
 800190c:	40023800 	.word	0x40023800

08001910 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b08a      	sub	sp, #40	@ 0x28
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001918:	f107 0314 	add.w	r3, r7, #20
 800191c:	2200      	movs	r2, #0
 800191e:	601a      	str	r2, [r3, #0]
 8001920:	605a      	str	r2, [r3, #4]
 8001922:	609a      	str	r2, [r3, #8]
 8001924:	60da      	str	r2, [r3, #12]
 8001926:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4a19      	ldr	r2, [pc, #100]	@ (8001994 <HAL_SPI_MspInit+0x84>)
 800192e:	4293      	cmp	r3, r2
 8001930:	d12c      	bne.n	800198c <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001932:	2300      	movs	r3, #0
 8001934:	613b      	str	r3, [r7, #16]
 8001936:	4b18      	ldr	r3, [pc, #96]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001938:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800193a:	4a17      	ldr	r2, [pc, #92]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 800193c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8001940:	6453      	str	r3, [r2, #68]	@ 0x44
 8001942:	4b15      	ldr	r3, [pc, #84]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001944:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001946:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800194a:	613b      	str	r3, [r7, #16]
 800194c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 800194e:	2300      	movs	r3, #0
 8001950:	60fb      	str	r3, [r7, #12]
 8001952:	4b11      	ldr	r3, [pc, #68]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001956:	4a10      	ldr	r2, [pc, #64]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001958:	f043 0320 	orr.w	r3, r3, #32
 800195c:	6313      	str	r3, [r2, #48]	@ 0x30
 800195e:	4b0e      	ldr	r3, [pc, #56]	@ (8001998 <HAL_SPI_MspInit+0x88>)
 8001960:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001962:	f003 0320 	and.w	r3, r3, #32
 8001966:	60fb      	str	r3, [r7, #12]
 8001968:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 800196a:	f44f 7360 	mov.w	r3, #896	@ 0x380
 800196e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001970:	2302      	movs	r3, #2
 8001972:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001974:	2300      	movs	r3, #0
 8001976:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001978:	2300      	movs	r3, #0
 800197a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 800197c:	2305      	movs	r3, #5
 800197e:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001980:	f107 0314 	add.w	r3, r7, #20
 8001984:	4619      	mov	r1, r3
 8001986:	4805      	ldr	r0, [pc, #20]	@ (800199c <HAL_SPI_MspInit+0x8c>)
 8001988:	f000 faee 	bl	8001f68 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 800198c:	bf00      	nop
 800198e:	3728      	adds	r7, #40	@ 0x28
 8001990:	46bd      	mov	sp, r7
 8001992:	bd80      	pop	{r7, pc}
 8001994:	40015000 	.word	0x40015000
 8001998:	40023800 	.word	0x40023800
 800199c:	40021400 	.word	0x40021400

080019a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80019a0:	b480      	push	{r7}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80019a4:	bf00      	nop
 80019a6:	e7fd      	b.n	80019a4 <NMI_Handler+0x4>

080019a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80019a8:	b480      	push	{r7}
 80019aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80019ac:	bf00      	nop
 80019ae:	e7fd      	b.n	80019ac <HardFault_Handler+0x4>

080019b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80019b0:	b480      	push	{r7}
 80019b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80019b4:	bf00      	nop
 80019b6:	e7fd      	b.n	80019b4 <MemManage_Handler+0x4>

080019b8 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80019bc:	bf00      	nop
 80019be:	e7fd      	b.n	80019bc <BusFault_Handler+0x4>

080019c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80019c0:	b480      	push	{r7}
 80019c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80019c4:	bf00      	nop
 80019c6:	e7fd      	b.n	80019c4 <UsageFault_Handler+0x4>

080019c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80019c8:	b480      	push	{r7}
 80019ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80019cc:	bf00      	nop
 80019ce:	46bd      	mov	sp, r7
 80019d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d4:	4770      	bx	lr

080019d6 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80019d6:	b480      	push	{r7}
 80019d8:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019da:	bf00      	nop
 80019dc:	46bd      	mov	sp, r7
 80019de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019e2:	4770      	bx	lr

080019e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019e4:	b480      	push	{r7}
 80019e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019e8:	bf00      	nop
 80019ea:	46bd      	mov	sp, r7
 80019ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f0:	4770      	bx	lr

080019f2 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019f2:	b580      	push	{r7, lr}
 80019f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80019f6:	f000 f985 	bl	8001d04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}

080019fe <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 80019fe:	b580      	push	{r7, lr}
 8001a00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8001a02:	2001      	movs	r0, #1
 8001a04:	f000 fc90 	bl	8002328 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8001a08:	bf00      	nop
 8001a0a:	bd80      	pop	{r7, pc}

08001a0c <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8001a0c:	b480      	push	{r7}
 8001a0e:	b083      	sub	sp, #12
 8001a10:	af00      	add	r7, sp, #0
 8001a12:	4603      	mov	r3, r0
 8001a14:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8001a16:	4b0f      	ldr	r3, [pc, #60]	@ (8001a54 <ITM_SendChar+0x48>)
 8001a18:	681b      	ldr	r3, [r3, #0]
 8001a1a:	4a0e      	ldr	r2, [pc, #56]	@ (8001a54 <ITM_SendChar+0x48>)
 8001a1c:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8001a20:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8001a22:	4b0d      	ldr	r3, [pc, #52]	@ (8001a58 <ITM_SendChar+0x4c>)
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	4a0c      	ldr	r2, [pc, #48]	@ (8001a58 <ITM_SendChar+0x4c>)
 8001a28:	f043 0301 	orr.w	r3, r3, #1
 8001a2c:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8001a2e:	bf00      	nop
 8001a30:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	f003 0301 	and.w	r3, r3, #1
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d0f8      	beq.n	8001a30 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8001a3e:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8001a42:	79fb      	ldrb	r3, [r7, #7]
 8001a44:	6013      	str	r3, [r2, #0]
}
 8001a46:	bf00      	nop
 8001a48:	370c      	adds	r7, #12
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000edfc 	.word	0xe000edfc
 8001a58:	e0000e00 	.word	0xe0000e00

08001a5c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a5c:	b480      	push	{r7}
 8001a5e:	af00      	add	r7, sp, #0
  return 1;
 8001a60:	2301      	movs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	46bd      	mov	sp, r7
 8001a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6a:	4770      	bx	lr

08001a6c <_kill>:

int _kill(int pid, int sig)
{
 8001a6c:	b580      	push	{r7, lr}
 8001a6e:	b082      	sub	sp, #8
 8001a70:	af00      	add	r7, sp, #0
 8001a72:	6078      	str	r0, [r7, #4]
 8001a74:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a76:	f002 fda7 	bl	80045c8 <__errno>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	2216      	movs	r2, #22
 8001a7e:	601a      	str	r2, [r3, #0]
  return -1;
 8001a80:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a84:	4618      	mov	r0, r3
 8001a86:	3708      	adds	r7, #8
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	bd80      	pop	{r7, pc}

08001a8c <_exit>:

void _exit (int status)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	b082      	sub	sp, #8
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a94:	f04f 31ff 	mov.w	r1, #4294967295
 8001a98:	6878      	ldr	r0, [r7, #4]
 8001a9a:	f7ff ffe7 	bl	8001a6c <_kill>
  while (1) {}    /* Make sure we hang here */
 8001a9e:	bf00      	nop
 8001aa0:	e7fd      	b.n	8001a9e <_exit+0x12>

08001aa2 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa2:	b580      	push	{r7, lr}
 8001aa4:	b086      	sub	sp, #24
 8001aa6:	af00      	add	r7, sp, #0
 8001aa8:	60f8      	str	r0, [r7, #12]
 8001aaa:	60b9      	str	r1, [r7, #8]
 8001aac:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aae:	2300      	movs	r3, #0
 8001ab0:	617b      	str	r3, [r7, #20]
 8001ab2:	e00a      	b.n	8001aca <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ab4:	f3af 8000 	nop.w
 8001ab8:	4601      	mov	r1, r0
 8001aba:	68bb      	ldr	r3, [r7, #8]
 8001abc:	1c5a      	adds	r2, r3, #1
 8001abe:	60ba      	str	r2, [r7, #8]
 8001ac0:	b2ca      	uxtb	r2, r1
 8001ac2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ac4:	697b      	ldr	r3, [r7, #20]
 8001ac6:	3301      	adds	r3, #1
 8001ac8:	617b      	str	r3, [r7, #20]
 8001aca:	697a      	ldr	r2, [r7, #20]
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	429a      	cmp	r2, r3
 8001ad0:	dbf0      	blt.n	8001ab4 <_read+0x12>
  }

  return len;
 8001ad2:	687b      	ldr	r3, [r7, #4]
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	3718      	adds	r7, #24
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	bd80      	pop	{r7, pc}

08001adc <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b086      	sub	sp, #24
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	60f8      	str	r0, [r7, #12]
 8001ae4:	60b9      	str	r1, [r7, #8]
 8001ae6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
 8001aec:	e009      	b.n	8001b02 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8001aee:	68bb      	ldr	r3, [r7, #8]
 8001af0:	1c5a      	adds	r2, r3, #1
 8001af2:	60ba      	str	r2, [r7, #8]
 8001af4:	781b      	ldrb	r3, [r3, #0]
 8001af6:	4618      	mov	r0, r3
 8001af8:	f7ff ff88 	bl	8001a0c <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001afc:	697b      	ldr	r3, [r7, #20]
 8001afe:	3301      	adds	r3, #1
 8001b00:	617b      	str	r3, [r7, #20]
 8001b02:	697a      	ldr	r2, [r7, #20]
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	429a      	cmp	r2, r3
 8001b08:	dbf1      	blt.n	8001aee <_write+0x12>
  }
  return len;
 8001b0a:	687b      	ldr	r3, [r7, #4]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	3718      	adds	r7, #24
 8001b10:	46bd      	mov	sp, r7
 8001b12:	bd80      	pop	{r7, pc}

08001b14 <_close>:

int _close(int file)
{
 8001b14:	b480      	push	{r7}
 8001b16:	b083      	sub	sp, #12
 8001b18:	af00      	add	r7, sp, #0
 8001b1a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b1c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b20:	4618      	mov	r0, r3
 8001b22:	370c      	adds	r7, #12
 8001b24:	46bd      	mov	sp, r7
 8001b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b2a:	4770      	bx	lr

08001b2c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b2c:	b480      	push	{r7}
 8001b2e:	b083      	sub	sp, #12
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	6078      	str	r0, [r7, #4]
 8001b34:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001b3c:	605a      	str	r2, [r3, #4]
  return 0;
 8001b3e:	2300      	movs	r3, #0
}
 8001b40:	4618      	mov	r0, r3
 8001b42:	370c      	adds	r7, #12
 8001b44:	46bd      	mov	sp, r7
 8001b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4a:	4770      	bx	lr

08001b4c <_isatty>:

int _isatty(int file)
{
 8001b4c:	b480      	push	{r7}
 8001b4e:	b083      	sub	sp, #12
 8001b50:	af00      	add	r7, sp, #0
 8001b52:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b54:	2301      	movs	r3, #1
}
 8001b56:	4618      	mov	r0, r3
 8001b58:	370c      	adds	r7, #12
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b60:	4770      	bx	lr

08001b62 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b62:	b480      	push	{r7}
 8001b64:	b085      	sub	sp, #20
 8001b66:	af00      	add	r7, sp, #0
 8001b68:	60f8      	str	r0, [r7, #12]
 8001b6a:	60b9      	str	r1, [r7, #8]
 8001b6c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b6e:	2300      	movs	r3, #0
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	3714      	adds	r7, #20
 8001b74:	46bd      	mov	sp, r7
 8001b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7a:	4770      	bx	lr

08001b7c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b086      	sub	sp, #24
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b84:	4a14      	ldr	r2, [pc, #80]	@ (8001bd8 <_sbrk+0x5c>)
 8001b86:	4b15      	ldr	r3, [pc, #84]	@ (8001bdc <_sbrk+0x60>)
 8001b88:	1ad3      	subs	r3, r2, r3
 8001b8a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b8c:	697b      	ldr	r3, [r7, #20]
 8001b8e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b90:	4b13      	ldr	r3, [pc, #76]	@ (8001be0 <_sbrk+0x64>)
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	d102      	bne.n	8001b9e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001b98:	4b11      	ldr	r3, [pc, #68]	@ (8001be0 <_sbrk+0x64>)
 8001b9a:	4a12      	ldr	r2, [pc, #72]	@ (8001be4 <_sbrk+0x68>)
 8001b9c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001b9e:	4b10      	ldr	r3, [pc, #64]	@ (8001be0 <_sbrk+0x64>)
 8001ba0:	681a      	ldr	r2, [r3, #0]
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	4413      	add	r3, r2
 8001ba6:	693a      	ldr	r2, [r7, #16]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d207      	bcs.n	8001bbc <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bac:	f002 fd0c 	bl	80045c8 <__errno>
 8001bb0:	4603      	mov	r3, r0
 8001bb2:	220c      	movs	r2, #12
 8001bb4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bb6:	f04f 33ff 	mov.w	r3, #4294967295
 8001bba:	e009      	b.n	8001bd0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bbc:	4b08      	ldr	r3, [pc, #32]	@ (8001be0 <_sbrk+0x64>)
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bc2:	4b07      	ldr	r3, [pc, #28]	@ (8001be0 <_sbrk+0x64>)
 8001bc4:	681a      	ldr	r2, [r3, #0]
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	4413      	add	r3, r2
 8001bca:	4a05      	ldr	r2, [pc, #20]	@ (8001be0 <_sbrk+0x64>)
 8001bcc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bce:	68fb      	ldr	r3, [r7, #12]
}
 8001bd0:	4618      	mov	r0, r3
 8001bd2:	3718      	adds	r7, #24
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20030000 	.word	0x20030000
 8001bdc:	00000400 	.word	0x00000400
 8001be0:	20000254 	.word	0x20000254
 8001be4:	200003a8 	.word	0x200003a8

08001be8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001be8:	b480      	push	{r7}
 8001bea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001bec:	4b06      	ldr	r3, [pc, #24]	@ (8001c08 <SystemInit+0x20>)
 8001bee:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001bf2:	4a05      	ldr	r2, [pc, #20]	@ (8001c08 <SystemInit+0x20>)
 8001bf4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001bf8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001bfc:	bf00      	nop
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c04:	4770      	bx	lr
 8001c06:	bf00      	nop
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001c0c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001c44 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001c10:	f7ff ffea 	bl	8001be8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001c14:	480c      	ldr	r0, [pc, #48]	@ (8001c48 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001c16:	490d      	ldr	r1, [pc, #52]	@ (8001c4c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001c18:	4a0d      	ldr	r2, [pc, #52]	@ (8001c50 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001c1a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001c1c:	e002      	b.n	8001c24 <LoopCopyDataInit>

08001c1e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001c1e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001c20:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001c22:	3304      	adds	r3, #4

08001c24 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001c24:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001c26:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001c28:	d3f9      	bcc.n	8001c1e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001c2a:	4a0a      	ldr	r2, [pc, #40]	@ (8001c54 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001c2c:	4c0a      	ldr	r4, [pc, #40]	@ (8001c58 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001c2e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001c30:	e001      	b.n	8001c36 <LoopFillZerobss>

08001c32 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001c32:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001c34:	3204      	adds	r2, #4

08001c36 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001c36:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001c38:	d3fb      	bcc.n	8001c32 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8001c3a:	f002 fccb 	bl	80045d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001c3e:	f7ff fa99 	bl	8001174 <main>
  bx  lr    
 8001c42:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001c44:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001c48:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001c4c:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 8001c50:	080066e4 	.word	0x080066e4
  ldr r2, =_sbss
 8001c54:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 8001c58:	200003a8 	.word	0x200003a8

08001c5c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c5c:	e7fe      	b.n	8001c5c <ADC_IRQHandler>
	...

08001c60 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c64:	4b0e      	ldr	r3, [pc, #56]	@ (8001ca0 <HAL_Init+0x40>)
 8001c66:	681b      	ldr	r3, [r3, #0]
 8001c68:	4a0d      	ldr	r2, [pc, #52]	@ (8001ca0 <HAL_Init+0x40>)
 8001c6a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c6e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c70:	4b0b      	ldr	r3, [pc, #44]	@ (8001ca0 <HAL_Init+0x40>)
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	4a0a      	ldr	r2, [pc, #40]	@ (8001ca0 <HAL_Init+0x40>)
 8001c76:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c7a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c7c:	4b08      	ldr	r3, [pc, #32]	@ (8001ca0 <HAL_Init+0x40>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	4a07      	ldr	r2, [pc, #28]	@ (8001ca0 <HAL_Init+0x40>)
 8001c82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c86:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c88:	2003      	movs	r0, #3
 8001c8a:	f000 f92b 	bl	8001ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c8e:	2000      	movs	r0, #0
 8001c90:	f000 f808 	bl	8001ca4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c94:	f7ff fe14 	bl	80018c0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c98:	2300      	movs	r3, #0
}
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	40023c00 	.word	0x40023c00

08001ca4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001cac:	4b12      	ldr	r3, [pc, #72]	@ (8001cf8 <HAL_InitTick+0x54>)
 8001cae:	681a      	ldr	r2, [r3, #0]
 8001cb0:	4b12      	ldr	r3, [pc, #72]	@ (8001cfc <HAL_InitTick+0x58>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	4619      	mov	r1, r3
 8001cb6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001cba:	fbb3 f3f1 	udiv	r3, r3, r1
 8001cbe:	fbb2 f3f3 	udiv	r3, r2, r3
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f000 f943 	bl	8001f4e <HAL_SYSTICK_Config>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001cce:	2301      	movs	r3, #1
 8001cd0:	e00e      	b.n	8001cf0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b0f      	cmp	r3, #15
 8001cd6:	d80a      	bhi.n	8001cee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001cd8:	2200      	movs	r2, #0
 8001cda:	6879      	ldr	r1, [r7, #4]
 8001cdc:	f04f 30ff 	mov.w	r0, #4294967295
 8001ce0:	f000 f90b 	bl	8001efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ce4:	4a06      	ldr	r2, [pc, #24]	@ (8001d00 <HAL_InitTick+0x5c>)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001cea:	2300      	movs	r3, #0
 8001cec:	e000      	b.n	8001cf0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001cee:	2301      	movs	r3, #1
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3708      	adds	r7, #8
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	bd80      	pop	{r7, pc}
 8001cf8:	20000000 	.word	0x20000000
 8001cfc:	20000008 	.word	0x20000008
 8001d00:	20000004 	.word	0x20000004

08001d04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001d04:	b480      	push	{r7}
 8001d06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <HAL_IncTick+0x20>)
 8001d0a:	781b      	ldrb	r3, [r3, #0]
 8001d0c:	461a      	mov	r2, r3
 8001d0e:	4b06      	ldr	r3, [pc, #24]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	4413      	add	r3, r2
 8001d14:	4a04      	ldr	r2, [pc, #16]	@ (8001d28 <HAL_IncTick+0x24>)
 8001d16:	6013      	str	r3, [r2, #0]
}
 8001d18:	bf00      	nop
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d20:	4770      	bx	lr
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008
 8001d28:	20000258 	.word	0x20000258

08001d2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001d2c:	b480      	push	{r7}
 8001d2e:	af00      	add	r7, sp, #0
  return uwTick;
 8001d30:	4b03      	ldr	r3, [pc, #12]	@ (8001d40 <HAL_GetTick+0x14>)
 8001d32:	681b      	ldr	r3, [r3, #0]
}
 8001d34:	4618      	mov	r0, r3
 8001d36:	46bd      	mov	sp, r7
 8001d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d3c:	4770      	bx	lr
 8001d3e:	bf00      	nop
 8001d40:	20000258 	.word	0x20000258

08001d44 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	f003 0307 	and.w	r3, r3, #7
 8001d52:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d54:	4b0c      	ldr	r3, [pc, #48]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d56:	68db      	ldr	r3, [r3, #12]
 8001d58:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d5a:	68ba      	ldr	r2, [r7, #8]
 8001d5c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d60:	4013      	ands	r3, r2
 8001d62:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d68:	68bb      	ldr	r3, [r7, #8]
 8001d6a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d6c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d74:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d76:	4a04      	ldr	r2, [pc, #16]	@ (8001d88 <__NVIC_SetPriorityGrouping+0x44>)
 8001d78:	68bb      	ldr	r3, [r7, #8]
 8001d7a:	60d3      	str	r3, [r2, #12]
}
 8001d7c:	bf00      	nop
 8001d7e:	3714      	adds	r7, #20
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d90:	4b04      	ldr	r3, [pc, #16]	@ (8001da4 <__NVIC_GetPriorityGrouping+0x18>)
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	0a1b      	lsrs	r3, r3, #8
 8001d96:	f003 0307 	and.w	r3, r3, #7
}
 8001d9a:	4618      	mov	r0, r3
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001da2:	4770      	bx	lr
 8001da4:	e000ed00 	.word	0xe000ed00

08001da8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001da8:	b480      	push	{r7}
 8001daa:	b083      	sub	sp, #12
 8001dac:	af00      	add	r7, sp, #0
 8001dae:	4603      	mov	r3, r0
 8001db0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	db0b      	blt.n	8001dd2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001dba:	79fb      	ldrb	r3, [r7, #7]
 8001dbc:	f003 021f 	and.w	r2, r3, #31
 8001dc0:	4907      	ldr	r1, [pc, #28]	@ (8001de0 <__NVIC_EnableIRQ+0x38>)
 8001dc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dc6:	095b      	lsrs	r3, r3, #5
 8001dc8:	2001      	movs	r0, #1
 8001dca:	fa00 f202 	lsl.w	r2, r0, r2
 8001dce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001dd2:	bf00      	nop
 8001dd4:	370c      	adds	r7, #12
 8001dd6:	46bd      	mov	sp, r7
 8001dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ddc:	4770      	bx	lr
 8001dde:	bf00      	nop
 8001de0:	e000e100 	.word	0xe000e100

08001de4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001de4:	b480      	push	{r7}
 8001de6:	b083      	sub	sp, #12
 8001de8:	af00      	add	r7, sp, #0
 8001dea:	4603      	mov	r3, r0
 8001dec:	6039      	str	r1, [r7, #0]
 8001dee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001df0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	db0a      	blt.n	8001e0e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df8:	683b      	ldr	r3, [r7, #0]
 8001dfa:	b2da      	uxtb	r2, r3
 8001dfc:	490c      	ldr	r1, [pc, #48]	@ (8001e30 <__NVIC_SetPriority+0x4c>)
 8001dfe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001e02:	0112      	lsls	r2, r2, #4
 8001e04:	b2d2      	uxtb	r2, r2
 8001e06:	440b      	add	r3, r1
 8001e08:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001e0c:	e00a      	b.n	8001e24 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001e0e:	683b      	ldr	r3, [r7, #0]
 8001e10:	b2da      	uxtb	r2, r3
 8001e12:	4908      	ldr	r1, [pc, #32]	@ (8001e34 <__NVIC_SetPriority+0x50>)
 8001e14:	79fb      	ldrb	r3, [r7, #7]
 8001e16:	f003 030f 	and.w	r3, r3, #15
 8001e1a:	3b04      	subs	r3, #4
 8001e1c:	0112      	lsls	r2, r2, #4
 8001e1e:	b2d2      	uxtb	r2, r2
 8001e20:	440b      	add	r3, r1
 8001e22:	761a      	strb	r2, [r3, #24]
}
 8001e24:	bf00      	nop
 8001e26:	370c      	adds	r7, #12
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e2e:	4770      	bx	lr
 8001e30:	e000e100 	.word	0xe000e100
 8001e34:	e000ed00 	.word	0xe000ed00

08001e38 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e38:	b480      	push	{r7}
 8001e3a:	b089      	sub	sp, #36	@ 0x24
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	60f8      	str	r0, [r7, #12]
 8001e40:	60b9      	str	r1, [r7, #8]
 8001e42:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	f003 0307 	and.w	r3, r3, #7
 8001e4a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e4c:	69fb      	ldr	r3, [r7, #28]
 8001e4e:	f1c3 0307 	rsb	r3, r3, #7
 8001e52:	2b04      	cmp	r3, #4
 8001e54:	bf28      	it	cs
 8001e56:	2304      	movcs	r3, #4
 8001e58:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e5a:	69fb      	ldr	r3, [r7, #28]
 8001e5c:	3304      	adds	r3, #4
 8001e5e:	2b06      	cmp	r3, #6
 8001e60:	d902      	bls.n	8001e68 <NVIC_EncodePriority+0x30>
 8001e62:	69fb      	ldr	r3, [r7, #28]
 8001e64:	3b03      	subs	r3, #3
 8001e66:	e000      	b.n	8001e6a <NVIC_EncodePriority+0x32>
 8001e68:	2300      	movs	r3, #0
 8001e6a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e6c:	f04f 32ff 	mov.w	r2, #4294967295
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	fa02 f303 	lsl.w	r3, r2, r3
 8001e76:	43da      	mvns	r2, r3
 8001e78:	68bb      	ldr	r3, [r7, #8]
 8001e7a:	401a      	ands	r2, r3
 8001e7c:	697b      	ldr	r3, [r7, #20]
 8001e7e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e80:	f04f 31ff 	mov.w	r1, #4294967295
 8001e84:	697b      	ldr	r3, [r7, #20]
 8001e86:	fa01 f303 	lsl.w	r3, r1, r3
 8001e8a:	43d9      	mvns	r1, r3
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e90:	4313      	orrs	r3, r2
         );
}
 8001e92:	4618      	mov	r0, r3
 8001e94:	3724      	adds	r7, #36	@ 0x24
 8001e96:	46bd      	mov	sp, r7
 8001e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e9c:	4770      	bx	lr
	...

08001ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	b082      	sub	sp, #8
 8001ea4:	af00      	add	r7, sp, #0
 8001ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	3b01      	subs	r3, #1
 8001eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001eb0:	d301      	bcc.n	8001eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001eb2:	2301      	movs	r3, #1
 8001eb4:	e00f      	b.n	8001ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8001ee0 <SysTick_Config+0x40>)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	3b01      	subs	r3, #1
 8001ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ebe:	210f      	movs	r1, #15
 8001ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8001ec4:	f7ff ff8e 	bl	8001de4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001ec8:	4b05      	ldr	r3, [pc, #20]	@ (8001ee0 <SysTick_Config+0x40>)
 8001eca:	2200      	movs	r2, #0
 8001ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001ece:	4b04      	ldr	r3, [pc, #16]	@ (8001ee0 <SysTick_Config+0x40>)
 8001ed0:	2207      	movs	r2, #7
 8001ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ed4:	2300      	movs	r3, #0
}
 8001ed6:	4618      	mov	r0, r3
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}
 8001ede:	bf00      	nop
 8001ee0:	e000e010 	.word	0xe000e010

08001ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b082      	sub	sp, #8
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001eec:	6878      	ldr	r0, [r7, #4]
 8001eee:	f7ff ff29 	bl	8001d44 <__NVIC_SetPriorityGrouping>
}
 8001ef2:	bf00      	nop
 8001ef4:	3708      	adds	r7, #8
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}

08001efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001efa:	b580      	push	{r7, lr}
 8001efc:	b086      	sub	sp, #24
 8001efe:	af00      	add	r7, sp, #0
 8001f00:	4603      	mov	r3, r0
 8001f02:	60b9      	str	r1, [r7, #8]
 8001f04:	607a      	str	r2, [r7, #4]
 8001f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001f08:	2300      	movs	r3, #0
 8001f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001f0c:	f7ff ff3e 	bl	8001d8c <__NVIC_GetPriorityGrouping>
 8001f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	68b9      	ldr	r1, [r7, #8]
 8001f16:	6978      	ldr	r0, [r7, #20]
 8001f18:	f7ff ff8e 	bl	8001e38 <NVIC_EncodePriority>
 8001f1c:	4602      	mov	r2, r0
 8001f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f22:	4611      	mov	r1, r2
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff5d 	bl	8001de4 <__NVIC_SetPriority>
}
 8001f2a:	bf00      	nop
 8001f2c:	3718      	adds	r7, #24
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	4603      	mov	r3, r0
 8001f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f40:	4618      	mov	r0, r3
 8001f42:	f7ff ff31 	bl	8001da8 <__NVIC_EnableIRQ>
}
 8001f46:	bf00      	nop
 8001f48:	3708      	adds	r7, #8
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}

08001f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f4e:	b580      	push	{r7, lr}
 8001f50:	b082      	sub	sp, #8
 8001f52:	af00      	add	r7, sp, #0
 8001f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f56:	6878      	ldr	r0, [r7, #4]
 8001f58:	f7ff ffa2 	bl	8001ea0 <SysTick_Config>
 8001f5c:	4603      	mov	r3, r0
}
 8001f5e:	4618      	mov	r0, r3
 8001f60:	3708      	adds	r7, #8
 8001f62:	46bd      	mov	sp, r7
 8001f64:	bd80      	pop	{r7, pc}
	...

08001f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b089      	sub	sp, #36	@ 0x24
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
 8001f70:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f72:	2300      	movs	r3, #0
 8001f74:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f76:	2300      	movs	r3, #0
 8001f78:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f7e:	2300      	movs	r3, #0
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	e177      	b.n	8002274 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f84:	2201      	movs	r2, #1
 8001f86:	69fb      	ldr	r3, [r7, #28]
 8001f88:	fa02 f303 	lsl.w	r3, r2, r3
 8001f8c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f8e:	683b      	ldr	r3, [r7, #0]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	697a      	ldr	r2, [r7, #20]
 8001f94:	4013      	ands	r3, r2
 8001f96:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f98:	693a      	ldr	r2, [r7, #16]
 8001f9a:	697b      	ldr	r3, [r7, #20]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	f040 8166 	bne.w	800226e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fa2:	683b      	ldr	r3, [r7, #0]
 8001fa4:	685b      	ldr	r3, [r3, #4]
 8001fa6:	f003 0303 	and.w	r3, r3, #3
 8001faa:	2b01      	cmp	r3, #1
 8001fac:	d005      	beq.n	8001fba <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	685b      	ldr	r3, [r3, #4]
 8001fb2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d130      	bne.n	800201c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	689b      	ldr	r3, [r3, #8]
 8001fbe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	005b      	lsls	r3, r3, #1
 8001fc4:	2203      	movs	r2, #3
 8001fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fca:	43db      	mvns	r3, r3
 8001fcc:	69ba      	ldr	r2, [r7, #24]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fd2:	683b      	ldr	r3, [r7, #0]
 8001fd4:	68da      	ldr	r2, [r3, #12]
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	005b      	lsls	r3, r3, #1
 8001fda:	fa02 f303 	lsl.w	r3, r2, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4313      	orrs	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	69ba      	ldr	r2, [r7, #24]
 8001fe8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001ff0:	2201      	movs	r2, #1
 8001ff2:	69fb      	ldr	r3, [r7, #28]
 8001ff4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff8:	43db      	mvns	r3, r3
 8001ffa:	69ba      	ldr	r2, [r7, #24]
 8001ffc:	4013      	ands	r3, r2
 8001ffe:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	091b      	lsrs	r3, r3, #4
 8002006:	f003 0201 	and.w	r2, r3, #1
 800200a:	69fb      	ldr	r3, [r7, #28]
 800200c:	fa02 f303 	lsl.w	r3, r2, r3
 8002010:	69ba      	ldr	r2, [r7, #24]
 8002012:	4313      	orrs	r3, r2
 8002014:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	69ba      	ldr	r2, [r7, #24]
 800201a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	685b      	ldr	r3, [r3, #4]
 8002020:	f003 0303 	and.w	r3, r3, #3
 8002024:	2b03      	cmp	r3, #3
 8002026:	d017      	beq.n	8002058 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	68db      	ldr	r3, [r3, #12]
 800202c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800202e:	69fb      	ldr	r3, [r7, #28]
 8002030:	005b      	lsls	r3, r3, #1
 8002032:	2203      	movs	r2, #3
 8002034:	fa02 f303 	lsl.w	r3, r2, r3
 8002038:	43db      	mvns	r3, r3
 800203a:	69ba      	ldr	r2, [r7, #24]
 800203c:	4013      	ands	r3, r2
 800203e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002040:	683b      	ldr	r3, [r7, #0]
 8002042:	689a      	ldr	r2, [r3, #8]
 8002044:	69fb      	ldr	r3, [r7, #28]
 8002046:	005b      	lsls	r3, r3, #1
 8002048:	fa02 f303 	lsl.w	r3, r2, r3
 800204c:	69ba      	ldr	r2, [r7, #24]
 800204e:	4313      	orrs	r3, r2
 8002050:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	69ba      	ldr	r2, [r7, #24]
 8002056:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002058:	683b      	ldr	r3, [r7, #0]
 800205a:	685b      	ldr	r3, [r3, #4]
 800205c:	f003 0303 	and.w	r3, r3, #3
 8002060:	2b02      	cmp	r3, #2
 8002062:	d123      	bne.n	80020ac <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002064:	69fb      	ldr	r3, [r7, #28]
 8002066:	08da      	lsrs	r2, r3, #3
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	3208      	adds	r2, #8
 800206c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002070:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002072:	69fb      	ldr	r3, [r7, #28]
 8002074:	f003 0307 	and.w	r3, r3, #7
 8002078:	009b      	lsls	r3, r3, #2
 800207a:	220f      	movs	r2, #15
 800207c:	fa02 f303 	lsl.w	r3, r2, r3
 8002080:	43db      	mvns	r3, r3
 8002082:	69ba      	ldr	r2, [r7, #24]
 8002084:	4013      	ands	r3, r2
 8002086:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	691a      	ldr	r2, [r3, #16]
 800208c:	69fb      	ldr	r3, [r7, #28]
 800208e:	f003 0307 	and.w	r3, r3, #7
 8002092:	009b      	lsls	r3, r3, #2
 8002094:	fa02 f303 	lsl.w	r3, r2, r3
 8002098:	69ba      	ldr	r2, [r7, #24]
 800209a:	4313      	orrs	r3, r2
 800209c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800209e:	69fb      	ldr	r3, [r7, #28]
 80020a0:	08da      	lsrs	r2, r3, #3
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	3208      	adds	r2, #8
 80020a6:	69b9      	ldr	r1, [r7, #24]
 80020a8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80020b2:	69fb      	ldr	r3, [r7, #28]
 80020b4:	005b      	lsls	r3, r3, #1
 80020b6:	2203      	movs	r2, #3
 80020b8:	fa02 f303 	lsl.w	r3, r2, r3
 80020bc:	43db      	mvns	r3, r3
 80020be:	69ba      	ldr	r2, [r7, #24]
 80020c0:	4013      	ands	r3, r2
 80020c2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f003 0203 	and.w	r2, r3, #3
 80020cc:	69fb      	ldr	r3, [r7, #28]
 80020ce:	005b      	lsls	r3, r3, #1
 80020d0:	fa02 f303 	lsl.w	r3, r2, r3
 80020d4:	69ba      	ldr	r2, [r7, #24]
 80020d6:	4313      	orrs	r3, r2
 80020d8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020e0:	683b      	ldr	r3, [r7, #0]
 80020e2:	685b      	ldr	r3, [r3, #4]
 80020e4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020e8:	2b00      	cmp	r3, #0
 80020ea:	f000 80c0 	beq.w	800226e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	60fb      	str	r3, [r7, #12]
 80020f2:	4b66      	ldr	r3, [pc, #408]	@ (800228c <HAL_GPIO_Init+0x324>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020f6:	4a65      	ldr	r2, [pc, #404]	@ (800228c <HAL_GPIO_Init+0x324>)
 80020f8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80020fe:	4b63      	ldr	r3, [pc, #396]	@ (800228c <HAL_GPIO_Init+0x324>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002102:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800210a:	4a61      	ldr	r2, [pc, #388]	@ (8002290 <HAL_GPIO_Init+0x328>)
 800210c:	69fb      	ldr	r3, [r7, #28]
 800210e:	089b      	lsrs	r3, r3, #2
 8002110:	3302      	adds	r3, #2
 8002112:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002116:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002118:	69fb      	ldr	r3, [r7, #28]
 800211a:	f003 0303 	and.w	r3, r3, #3
 800211e:	009b      	lsls	r3, r3, #2
 8002120:	220f      	movs	r2, #15
 8002122:	fa02 f303 	lsl.w	r3, r2, r3
 8002126:	43db      	mvns	r3, r3
 8002128:	69ba      	ldr	r2, [r7, #24]
 800212a:	4013      	ands	r3, r2
 800212c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	4a58      	ldr	r2, [pc, #352]	@ (8002294 <HAL_GPIO_Init+0x32c>)
 8002132:	4293      	cmp	r3, r2
 8002134:	d037      	beq.n	80021a6 <HAL_GPIO_Init+0x23e>
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	4a57      	ldr	r2, [pc, #348]	@ (8002298 <HAL_GPIO_Init+0x330>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d031      	beq.n	80021a2 <HAL_GPIO_Init+0x23a>
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	4a56      	ldr	r2, [pc, #344]	@ (800229c <HAL_GPIO_Init+0x334>)
 8002142:	4293      	cmp	r3, r2
 8002144:	d02b      	beq.n	800219e <HAL_GPIO_Init+0x236>
 8002146:	687b      	ldr	r3, [r7, #4]
 8002148:	4a55      	ldr	r2, [pc, #340]	@ (80022a0 <HAL_GPIO_Init+0x338>)
 800214a:	4293      	cmp	r3, r2
 800214c:	d025      	beq.n	800219a <HAL_GPIO_Init+0x232>
 800214e:	687b      	ldr	r3, [r7, #4]
 8002150:	4a54      	ldr	r2, [pc, #336]	@ (80022a4 <HAL_GPIO_Init+0x33c>)
 8002152:	4293      	cmp	r3, r2
 8002154:	d01f      	beq.n	8002196 <HAL_GPIO_Init+0x22e>
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	4a53      	ldr	r2, [pc, #332]	@ (80022a8 <HAL_GPIO_Init+0x340>)
 800215a:	4293      	cmp	r3, r2
 800215c:	d019      	beq.n	8002192 <HAL_GPIO_Init+0x22a>
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	4a52      	ldr	r2, [pc, #328]	@ (80022ac <HAL_GPIO_Init+0x344>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d013      	beq.n	800218e <HAL_GPIO_Init+0x226>
 8002166:	687b      	ldr	r3, [r7, #4]
 8002168:	4a51      	ldr	r2, [pc, #324]	@ (80022b0 <HAL_GPIO_Init+0x348>)
 800216a:	4293      	cmp	r3, r2
 800216c:	d00d      	beq.n	800218a <HAL_GPIO_Init+0x222>
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	4a50      	ldr	r2, [pc, #320]	@ (80022b4 <HAL_GPIO_Init+0x34c>)
 8002172:	4293      	cmp	r3, r2
 8002174:	d007      	beq.n	8002186 <HAL_GPIO_Init+0x21e>
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	4a4f      	ldr	r2, [pc, #316]	@ (80022b8 <HAL_GPIO_Init+0x350>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d101      	bne.n	8002182 <HAL_GPIO_Init+0x21a>
 800217e:	2309      	movs	r3, #9
 8002180:	e012      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002182:	230a      	movs	r3, #10
 8002184:	e010      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002186:	2308      	movs	r3, #8
 8002188:	e00e      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800218a:	2307      	movs	r3, #7
 800218c:	e00c      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800218e:	2306      	movs	r3, #6
 8002190:	e00a      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002192:	2305      	movs	r3, #5
 8002194:	e008      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 8002196:	2304      	movs	r3, #4
 8002198:	e006      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800219a:	2303      	movs	r3, #3
 800219c:	e004      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 800219e:	2302      	movs	r3, #2
 80021a0:	e002      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 80021a2:	2301      	movs	r3, #1
 80021a4:	e000      	b.n	80021a8 <HAL_GPIO_Init+0x240>
 80021a6:	2300      	movs	r3, #0
 80021a8:	69fa      	ldr	r2, [r7, #28]
 80021aa:	f002 0203 	and.w	r2, r2, #3
 80021ae:	0092      	lsls	r2, r2, #2
 80021b0:	4093      	lsls	r3, r2
 80021b2:	69ba      	ldr	r2, [r7, #24]
 80021b4:	4313      	orrs	r3, r2
 80021b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80021b8:	4935      	ldr	r1, [pc, #212]	@ (8002290 <HAL_GPIO_Init+0x328>)
 80021ba:	69fb      	ldr	r3, [r7, #28]
 80021bc:	089b      	lsrs	r3, r3, #2
 80021be:	3302      	adds	r3, #2
 80021c0:	69ba      	ldr	r2, [r7, #24]
 80021c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80021c6:	4b3d      	ldr	r3, [pc, #244]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021c8:	689b      	ldr	r3, [r3, #8]
 80021ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	43db      	mvns	r3, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4013      	ands	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021d6:	683b      	ldr	r3, [r7, #0]
 80021d8:	685b      	ldr	r3, [r3, #4]
 80021da:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d003      	beq.n	80021ea <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80021e2:	69ba      	ldr	r2, [r7, #24]
 80021e4:	693b      	ldr	r3, [r7, #16]
 80021e6:	4313      	orrs	r3, r2
 80021e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021ea:	4a34      	ldr	r2, [pc, #208]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021ec:	69bb      	ldr	r3, [r7, #24]
 80021ee:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021f0:	4b32      	ldr	r3, [pc, #200]	@ (80022bc <HAL_GPIO_Init+0x354>)
 80021f2:	68db      	ldr	r3, [r3, #12]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021f6:	693b      	ldr	r3, [r7, #16]
 80021f8:	43db      	mvns	r3, r3
 80021fa:	69ba      	ldr	r2, [r7, #24]
 80021fc:	4013      	ands	r3, r2
 80021fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002200:	683b      	ldr	r3, [r7, #0]
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002208:	2b00      	cmp	r3, #0
 800220a:	d003      	beq.n	8002214 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800220c:	69ba      	ldr	r2, [r7, #24]
 800220e:	693b      	ldr	r3, [r7, #16]
 8002210:	4313      	orrs	r3, r2
 8002212:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002214:	4a29      	ldr	r2, [pc, #164]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002216:	69bb      	ldr	r3, [r7, #24]
 8002218:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800221a:	4b28      	ldr	r3, [pc, #160]	@ (80022bc <HAL_GPIO_Init+0x354>)
 800221c:	685b      	ldr	r3, [r3, #4]
 800221e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002220:	693b      	ldr	r3, [r7, #16]
 8002222:	43db      	mvns	r3, r3
 8002224:	69ba      	ldr	r2, [r7, #24]
 8002226:	4013      	ands	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800222a:	683b      	ldr	r3, [r7, #0]
 800222c:	685b      	ldr	r3, [r3, #4]
 800222e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002232:	2b00      	cmp	r3, #0
 8002234:	d003      	beq.n	800223e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8002236:	69ba      	ldr	r2, [r7, #24]
 8002238:	693b      	ldr	r3, [r7, #16]
 800223a:	4313      	orrs	r3, r2
 800223c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800223e:	4a1f      	ldr	r2, [pc, #124]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002240:	69bb      	ldr	r3, [r7, #24]
 8002242:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002244:	4b1d      	ldr	r3, [pc, #116]	@ (80022bc <HAL_GPIO_Init+0x354>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800224a:	693b      	ldr	r3, [r7, #16]
 800224c:	43db      	mvns	r3, r3
 800224e:	69ba      	ldr	r2, [r7, #24]
 8002250:	4013      	ands	r3, r2
 8002252:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002254:	683b      	ldr	r3, [r7, #0]
 8002256:	685b      	ldr	r3, [r3, #4]
 8002258:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800225c:	2b00      	cmp	r3, #0
 800225e:	d003      	beq.n	8002268 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	693b      	ldr	r3, [r7, #16]
 8002264:	4313      	orrs	r3, r2
 8002266:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002268:	4a14      	ldr	r2, [pc, #80]	@ (80022bc <HAL_GPIO_Init+0x354>)
 800226a:	69bb      	ldr	r3, [r7, #24]
 800226c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800226e:	69fb      	ldr	r3, [r7, #28]
 8002270:	3301      	adds	r3, #1
 8002272:	61fb      	str	r3, [r7, #28]
 8002274:	69fb      	ldr	r3, [r7, #28]
 8002276:	2b0f      	cmp	r3, #15
 8002278:	f67f ae84 	bls.w	8001f84 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800227c:	bf00      	nop
 800227e:	bf00      	nop
 8002280:	3724      	adds	r7, #36	@ 0x24
 8002282:	46bd      	mov	sp, r7
 8002284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002288:	4770      	bx	lr
 800228a:	bf00      	nop
 800228c:	40023800 	.word	0x40023800
 8002290:	40013800 	.word	0x40013800
 8002294:	40020000 	.word	0x40020000
 8002298:	40020400 	.word	0x40020400
 800229c:	40020800 	.word	0x40020800
 80022a0:	40020c00 	.word	0x40020c00
 80022a4:	40021000 	.word	0x40021000
 80022a8:	40021400 	.word	0x40021400
 80022ac:	40021800 	.word	0x40021800
 80022b0:	40021c00 	.word	0x40021c00
 80022b4:	40022000 	.word	0x40022000
 80022b8:	40022400 	.word	0x40022400
 80022bc:	40013c00 	.word	0x40013c00

080022c0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80022c0:	b480      	push	{r7}
 80022c2:	b083      	sub	sp, #12
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	460b      	mov	r3, r1
 80022ca:	807b      	strh	r3, [r7, #2]
 80022cc:	4613      	mov	r3, r2
 80022ce:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80022d0:	787b      	ldrb	r3, [r7, #1]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d003      	beq.n	80022de <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80022d6:	887a      	ldrh	r2, [r7, #2]
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022dc:	e003      	b.n	80022e6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022de:	887b      	ldrh	r3, [r7, #2]
 80022e0:	041a      	lsls	r2, r3, #16
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	619a      	str	r2, [r3, #24]
}
 80022e6:	bf00      	nop
 80022e8:	370c      	adds	r7, #12
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr

080022f2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022f2:	b480      	push	{r7}
 80022f4:	b085      	sub	sp, #20
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
 80022fa:	460b      	mov	r3, r1
 80022fc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	695b      	ldr	r3, [r3, #20]
 8002302:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8002304:	887a      	ldrh	r2, [r7, #2]
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	4013      	ands	r3, r2
 800230a:	041a      	lsls	r2, r3, #16
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	43d9      	mvns	r1, r3
 8002310:	887b      	ldrh	r3, [r7, #2]
 8002312:	400b      	ands	r3, r1
 8002314:	431a      	orrs	r2, r3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	619a      	str	r2, [r3, #24]
}
 800231a:	bf00      	nop
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002324:	4770      	bx	lr
	...

08002328 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002328:	b580      	push	{r7, lr}
 800232a:	b082      	sub	sp, #8
 800232c:	af00      	add	r7, sp, #0
 800232e:	4603      	mov	r3, r0
 8002330:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002332:	4b08      	ldr	r3, [pc, #32]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002334:	695a      	ldr	r2, [r3, #20]
 8002336:	88fb      	ldrh	r3, [r7, #6]
 8002338:	4013      	ands	r3, r2
 800233a:	2b00      	cmp	r3, #0
 800233c:	d006      	beq.n	800234c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800233e:	4a05      	ldr	r2, [pc, #20]	@ (8002354 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002340:	88fb      	ldrh	r3, [r7, #6]
 8002342:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002344:	88fb      	ldrh	r3, [r7, #6]
 8002346:	4618      	mov	r0, r3
 8002348:	f7ff fa9c 	bl	8001884 <HAL_GPIO_EXTI_Callback>
  }
}
 800234c:	bf00      	nop
 800234e:	3708      	adds	r7, #8
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40013c00 	.word	0x40013c00

08002358 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800235e:	2300      	movs	r3, #0
 8002360:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	603b      	str	r3, [r7, #0]
 8002366:	4b20      	ldr	r3, [pc, #128]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002368:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800236a:	4a1f      	ldr	r2, [pc, #124]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 800236c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002370:	6413      	str	r3, [r2, #64]	@ 0x40
 8002372:	4b1d      	ldr	r3, [pc, #116]	@ (80023e8 <HAL_PWREx_EnableOverDrive+0x90>)
 8002374:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002376:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800237a:	603b      	str	r3, [r7, #0]
 800237c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800237e:	4b1b      	ldr	r3, [pc, #108]	@ (80023ec <HAL_PWREx_EnableOverDrive+0x94>)
 8002380:	2201      	movs	r2, #1
 8002382:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002384:	f7ff fcd2 	bl	8001d2c <HAL_GetTick>
 8002388:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800238a:	e009      	b.n	80023a0 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800238c:	f7ff fcce 	bl	8001d2c <HAL_GetTick>
 8002390:	4602      	mov	r2, r0
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	1ad3      	subs	r3, r2, r3
 8002396:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800239a:	d901      	bls.n	80023a0 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800239c:	2303      	movs	r3, #3
 800239e:	e01f      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80023a0:	4b13      	ldr	r3, [pc, #76]	@ (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80023a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80023ac:	d1ee      	bne.n	800238c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80023ae:	4b11      	ldr	r3, [pc, #68]	@ (80023f4 <HAL_PWREx_EnableOverDrive+0x9c>)
 80023b0:	2201      	movs	r2, #1
 80023b2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80023b4:	f7ff fcba 	bl	8001d2c <HAL_GetTick>
 80023b8:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023ba:	e009      	b.n	80023d0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80023bc:	f7ff fcb6 	bl	8001d2c <HAL_GetTick>
 80023c0:	4602      	mov	r2, r0
 80023c2:	687b      	ldr	r3, [r7, #4]
 80023c4:	1ad3      	subs	r3, r2, r3
 80023c6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80023ca:	d901      	bls.n	80023d0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80023cc:	2303      	movs	r3, #3
 80023ce:	e007      	b.n	80023e0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80023d0:	4b07      	ldr	r3, [pc, #28]	@ (80023f0 <HAL_PWREx_EnableOverDrive+0x98>)
 80023d2:	685b      	ldr	r3, [r3, #4]
 80023d4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023d8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80023dc:	d1ee      	bne.n	80023bc <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80023de:	2300      	movs	r3, #0
}
 80023e0:	4618      	mov	r0, r3
 80023e2:	3708      	adds	r7, #8
 80023e4:	46bd      	mov	sp, r7
 80023e6:	bd80      	pop	{r7, pc}
 80023e8:	40023800 	.word	0x40023800
 80023ec:	420e0040 	.word	0x420e0040
 80023f0:	40007000 	.word	0x40007000
 80023f4:	420e0044 	.word	0x420e0044

080023f8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b086      	sub	sp, #24
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d101      	bne.n	800240a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002406:	2301      	movs	r3, #1
 8002408:	e267      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	f003 0301 	and.w	r3, r3, #1
 8002412:	2b00      	cmp	r3, #0
 8002414:	d075      	beq.n	8002502 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002416:	4b88      	ldr	r3, [pc, #544]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	f003 030c 	and.w	r3, r3, #12
 800241e:	2b04      	cmp	r3, #4
 8002420:	d00c      	beq.n	800243c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002422:	4b85      	ldr	r3, [pc, #532]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002424:	689b      	ldr	r3, [r3, #8]
 8002426:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800242a:	2b08      	cmp	r3, #8
 800242c:	d112      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800242e:	4b82      	ldr	r3, [pc, #520]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002436:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800243a:	d10b      	bne.n	8002454 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800243c:	4b7e      	ldr	r3, [pc, #504]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002444:	2b00      	cmp	r3, #0
 8002446:	d05b      	beq.n	8002500 <HAL_RCC_OscConfig+0x108>
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	685b      	ldr	r3, [r3, #4]
 800244c:	2b00      	cmp	r3, #0
 800244e:	d157      	bne.n	8002500 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002450:	2301      	movs	r3, #1
 8002452:	e242      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800245c:	d106      	bne.n	800246c <HAL_RCC_OscConfig+0x74>
 800245e:	4b76      	ldr	r3, [pc, #472]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4a75      	ldr	r2, [pc, #468]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002464:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002468:	6013      	str	r3, [r2, #0]
 800246a:	e01d      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002474:	d10c      	bne.n	8002490 <HAL_RCC_OscConfig+0x98>
 8002476:	4b70      	ldr	r3, [pc, #448]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	4a6f      	ldr	r2, [pc, #444]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800247c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002480:	6013      	str	r3, [r2, #0]
 8002482:	4b6d      	ldr	r3, [pc, #436]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	4a6c      	ldr	r2, [pc, #432]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002488:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800248c:	6013      	str	r3, [r2, #0]
 800248e:	e00b      	b.n	80024a8 <HAL_RCC_OscConfig+0xb0>
 8002490:	4b69      	ldr	r3, [pc, #420]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4a68      	ldr	r2, [pc, #416]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002496:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800249a:	6013      	str	r3, [r2, #0]
 800249c:	4b66      	ldr	r3, [pc, #408]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	4a65      	ldr	r2, [pc, #404]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024a2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024a6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	685b      	ldr	r3, [r3, #4]
 80024ac:	2b00      	cmp	r3, #0
 80024ae:	d013      	beq.n	80024d8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024b0:	f7ff fc3c 	bl	8001d2c <HAL_GetTick>
 80024b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024b6:	e008      	b.n	80024ca <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024b8:	f7ff fc38 	bl	8001d2c <HAL_GetTick>
 80024bc:	4602      	mov	r2, r0
 80024be:	693b      	ldr	r3, [r7, #16]
 80024c0:	1ad3      	subs	r3, r2, r3
 80024c2:	2b64      	cmp	r3, #100	@ 0x64
 80024c4:	d901      	bls.n	80024ca <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80024c6:	2303      	movs	r3, #3
 80024c8:	e207      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024ca:	4b5b      	ldr	r3, [pc, #364]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d0f0      	beq.n	80024b8 <HAL_RCC_OscConfig+0xc0>
 80024d6:	e014      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024d8:	f7ff fc28 	bl	8001d2c <HAL_GetTick>
 80024dc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024de:	e008      	b.n	80024f2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80024e0:	f7ff fc24 	bl	8001d2c <HAL_GetTick>
 80024e4:	4602      	mov	r2, r0
 80024e6:	693b      	ldr	r3, [r7, #16]
 80024e8:	1ad3      	subs	r3, r2, r3
 80024ea:	2b64      	cmp	r3, #100	@ 0x64
 80024ec:	d901      	bls.n	80024f2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80024ee:	2303      	movs	r3, #3
 80024f0:	e1f3      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80024f2:	4b51      	ldr	r3, [pc, #324]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024fa:	2b00      	cmp	r3, #0
 80024fc:	d1f0      	bne.n	80024e0 <HAL_RCC_OscConfig+0xe8>
 80024fe:	e000      	b.n	8002502 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002500:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f003 0302 	and.w	r3, r3, #2
 800250a:	2b00      	cmp	r3, #0
 800250c:	d063      	beq.n	80025d6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800250e:	4b4a      	ldr	r3, [pc, #296]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 030c 	and.w	r3, r3, #12
 8002516:	2b00      	cmp	r3, #0
 8002518:	d00b      	beq.n	8002532 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800251a:	4b47      	ldr	r3, [pc, #284]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800251c:	689b      	ldr	r3, [r3, #8]
 800251e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002522:	2b08      	cmp	r3, #8
 8002524:	d11c      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002526:	4b44      	ldr	r3, [pc, #272]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800252e:	2b00      	cmp	r3, #0
 8002530:	d116      	bne.n	8002560 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002532:	4b41      	ldr	r3, [pc, #260]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f003 0302 	and.w	r3, r3, #2
 800253a:	2b00      	cmp	r3, #0
 800253c:	d005      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	68db      	ldr	r3, [r3, #12]
 8002542:	2b01      	cmp	r3, #1
 8002544:	d001      	beq.n	800254a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002546:	2301      	movs	r3, #1
 8002548:	e1c7      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800254a:	4b3b      	ldr	r3, [pc, #236]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	691b      	ldr	r3, [r3, #16]
 8002556:	00db      	lsls	r3, r3, #3
 8002558:	4937      	ldr	r1, [pc, #220]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800255a:	4313      	orrs	r3, r2
 800255c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800255e:	e03a      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	68db      	ldr	r3, [r3, #12]
 8002564:	2b00      	cmp	r3, #0
 8002566:	d020      	beq.n	80025aa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002568:	4b34      	ldr	r3, [pc, #208]	@ (800263c <HAL_RCC_OscConfig+0x244>)
 800256a:	2201      	movs	r2, #1
 800256c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800256e:	f7ff fbdd 	bl	8001d2c <HAL_GetTick>
 8002572:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002574:	e008      	b.n	8002588 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002576:	f7ff fbd9 	bl	8001d2c <HAL_GetTick>
 800257a:	4602      	mov	r2, r0
 800257c:	693b      	ldr	r3, [r7, #16]
 800257e:	1ad3      	subs	r3, r2, r3
 8002580:	2b02      	cmp	r3, #2
 8002582:	d901      	bls.n	8002588 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002584:	2303      	movs	r3, #3
 8002586:	e1a8      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002588:	4b2b      	ldr	r3, [pc, #172]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0302 	and.w	r3, r3, #2
 8002590:	2b00      	cmp	r3, #0
 8002592:	d0f0      	beq.n	8002576 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002594:	4b28      	ldr	r3, [pc, #160]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	691b      	ldr	r3, [r3, #16]
 80025a0:	00db      	lsls	r3, r3, #3
 80025a2:	4925      	ldr	r1, [pc, #148]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e015      	b.n	80025d6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80025aa:	4b24      	ldr	r3, [pc, #144]	@ (800263c <HAL_RCC_OscConfig+0x244>)
 80025ac:	2200      	movs	r2, #0
 80025ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025b0:	f7ff fbbc 	bl	8001d2c <HAL_GetTick>
 80025b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025b6:	e008      	b.n	80025ca <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025b8:	f7ff fbb8 	bl	8001d2c <HAL_GetTick>
 80025bc:	4602      	mov	r2, r0
 80025be:	693b      	ldr	r3, [r7, #16]
 80025c0:	1ad3      	subs	r3, r2, r3
 80025c2:	2b02      	cmp	r3, #2
 80025c4:	d901      	bls.n	80025ca <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80025c6:	2303      	movs	r3, #3
 80025c8:	e187      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80025ca:	4b1b      	ldr	r3, [pc, #108]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	f003 0302 	and.w	r3, r3, #2
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d1f0      	bne.n	80025b8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	f003 0308 	and.w	r3, r3, #8
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d036      	beq.n	8002650 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	695b      	ldr	r3, [r3, #20]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d016      	beq.n	8002618 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80025ea:	4b15      	ldr	r3, [pc, #84]	@ (8002640 <HAL_RCC_OscConfig+0x248>)
 80025ec:	2201      	movs	r2, #1
 80025ee:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80025f0:	f7ff fb9c 	bl	8001d2c <HAL_GetTick>
 80025f4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80025f6:	e008      	b.n	800260a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80025f8:	f7ff fb98 	bl	8001d2c <HAL_GetTick>
 80025fc:	4602      	mov	r2, r0
 80025fe:	693b      	ldr	r3, [r7, #16]
 8002600:	1ad3      	subs	r3, r2, r3
 8002602:	2b02      	cmp	r3, #2
 8002604:	d901      	bls.n	800260a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002606:	2303      	movs	r3, #3
 8002608:	e167      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800260a:	4b0b      	ldr	r3, [pc, #44]	@ (8002638 <HAL_RCC_OscConfig+0x240>)
 800260c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800260e:	f003 0302 	and.w	r3, r3, #2
 8002612:	2b00      	cmp	r3, #0
 8002614:	d0f0      	beq.n	80025f8 <HAL_RCC_OscConfig+0x200>
 8002616:	e01b      	b.n	8002650 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002618:	4b09      	ldr	r3, [pc, #36]	@ (8002640 <HAL_RCC_OscConfig+0x248>)
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800261e:	f7ff fb85 	bl	8001d2c <HAL_GetTick>
 8002622:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002624:	e00e      	b.n	8002644 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002626:	f7ff fb81 	bl	8001d2c <HAL_GetTick>
 800262a:	4602      	mov	r2, r0
 800262c:	693b      	ldr	r3, [r7, #16]
 800262e:	1ad3      	subs	r3, r2, r3
 8002630:	2b02      	cmp	r3, #2
 8002632:	d907      	bls.n	8002644 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002634:	2303      	movs	r3, #3
 8002636:	e150      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002638:	40023800 	.word	0x40023800
 800263c:	42470000 	.word	0x42470000
 8002640:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002644:	4b88      	ldr	r3, [pc, #544]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002646:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002648:	f003 0302 	and.w	r3, r3, #2
 800264c:	2b00      	cmp	r3, #0
 800264e:	d1ea      	bne.n	8002626 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	f003 0304 	and.w	r3, r3, #4
 8002658:	2b00      	cmp	r3, #0
 800265a:	f000 8097 	beq.w	800278c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800265e:	2300      	movs	r3, #0
 8002660:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002662:	4b81      	ldr	r3, [pc, #516]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002664:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002666:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800266e:	2300      	movs	r3, #0
 8002670:	60bb      	str	r3, [r7, #8]
 8002672:	4b7d      	ldr	r3, [pc, #500]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002674:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002676:	4a7c      	ldr	r2, [pc, #496]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002678:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800267c:	6413      	str	r3, [r2, #64]	@ 0x40
 800267e:	4b7a      	ldr	r3, [pc, #488]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002682:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002686:	60bb      	str	r3, [r7, #8]
 8002688:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800268a:	2301      	movs	r3, #1
 800268c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800268e:	4b77      	ldr	r3, [pc, #476]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002696:	2b00      	cmp	r3, #0
 8002698:	d118      	bne.n	80026cc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800269a:	4b74      	ldr	r3, [pc, #464]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	4a73      	ldr	r2, [pc, #460]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 80026a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80026a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80026a6:	f7ff fb41 	bl	8001d2c <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026ac:	e008      	b.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80026ae:	f7ff fb3d 	bl	8001d2c <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	2b02      	cmp	r3, #2
 80026ba:	d901      	bls.n	80026c0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80026bc:	2303      	movs	r3, #3
 80026be:	e10c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026c0:	4b6a      	ldr	r3, [pc, #424]	@ (800286c <HAL_RCC_OscConfig+0x474>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d0f0      	beq.n	80026ae <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	689b      	ldr	r3, [r3, #8]
 80026d0:	2b01      	cmp	r3, #1
 80026d2:	d106      	bne.n	80026e2 <HAL_RCC_OscConfig+0x2ea>
 80026d4:	4b64      	ldr	r3, [pc, #400]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026d6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026d8:	4a63      	ldr	r2, [pc, #396]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026da:	f043 0301 	orr.w	r3, r3, #1
 80026de:	6713      	str	r3, [r2, #112]	@ 0x70
 80026e0:	e01c      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	689b      	ldr	r3, [r3, #8]
 80026e6:	2b05      	cmp	r3, #5
 80026e8:	d10c      	bne.n	8002704 <HAL_RCC_OscConfig+0x30c>
 80026ea:	4b5f      	ldr	r3, [pc, #380]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026ee:	4a5e      	ldr	r2, [pc, #376]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80026f6:	4b5c      	ldr	r3, [pc, #368]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026f8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80026fa:	4a5b      	ldr	r2, [pc, #364]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80026fc:	f043 0301 	orr.w	r3, r3, #1
 8002700:	6713      	str	r3, [r2, #112]	@ 0x70
 8002702:	e00b      	b.n	800271c <HAL_RCC_OscConfig+0x324>
 8002704:	4b58      	ldr	r3, [pc, #352]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002706:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002708:	4a57      	ldr	r2, [pc, #348]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 800270a:	f023 0301 	bic.w	r3, r3, #1
 800270e:	6713      	str	r3, [r2, #112]	@ 0x70
 8002710:	4b55      	ldr	r3, [pc, #340]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002712:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002714:	4a54      	ldr	r2, [pc, #336]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002716:	f023 0304 	bic.w	r3, r3, #4
 800271a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	689b      	ldr	r3, [r3, #8]
 8002720:	2b00      	cmp	r3, #0
 8002722:	d015      	beq.n	8002750 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002724:	f7ff fb02 	bl	8001d2c <HAL_GetTick>
 8002728:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800272a:	e00a      	b.n	8002742 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800272c:	f7ff fafe 	bl	8001d2c <HAL_GetTick>
 8002730:	4602      	mov	r2, r0
 8002732:	693b      	ldr	r3, [r7, #16]
 8002734:	1ad3      	subs	r3, r2, r3
 8002736:	f241 3288 	movw	r2, #5000	@ 0x1388
 800273a:	4293      	cmp	r3, r2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e0cb      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002742:	4b49      	ldr	r3, [pc, #292]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002744:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	2b00      	cmp	r3, #0
 800274c:	d0ee      	beq.n	800272c <HAL_RCC_OscConfig+0x334>
 800274e:	e014      	b.n	800277a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002750:	f7ff faec 	bl	8001d2c <HAL_GetTick>
 8002754:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002756:	e00a      	b.n	800276e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002758:	f7ff fae8 	bl	8001d2c <HAL_GetTick>
 800275c:	4602      	mov	r2, r0
 800275e:	693b      	ldr	r3, [r7, #16]
 8002760:	1ad3      	subs	r3, r2, r3
 8002762:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002766:	4293      	cmp	r3, r2
 8002768:	d901      	bls.n	800276e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800276a:	2303      	movs	r3, #3
 800276c:	e0b5      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800276e:	4b3e      	ldr	r3, [pc, #248]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002770:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002772:	f003 0302 	and.w	r3, r3, #2
 8002776:	2b00      	cmp	r3, #0
 8002778:	d1ee      	bne.n	8002758 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800277a:	7dfb      	ldrb	r3, [r7, #23]
 800277c:	2b01      	cmp	r3, #1
 800277e:	d105      	bne.n	800278c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002780:	4b39      	ldr	r3, [pc, #228]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002782:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002784:	4a38      	ldr	r2, [pc, #224]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002786:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800278a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	699b      	ldr	r3, [r3, #24]
 8002790:	2b00      	cmp	r3, #0
 8002792:	f000 80a1 	beq.w	80028d8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002796:	4b34      	ldr	r3, [pc, #208]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002798:	689b      	ldr	r3, [r3, #8]
 800279a:	f003 030c 	and.w	r3, r3, #12
 800279e:	2b08      	cmp	r3, #8
 80027a0:	d05c      	beq.n	800285c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	699b      	ldr	r3, [r3, #24]
 80027a6:	2b02      	cmp	r3, #2
 80027a8:	d141      	bne.n	800282e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80027aa:	4b31      	ldr	r3, [pc, #196]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 80027ac:	2200      	movs	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80027b0:	f7ff fabc 	bl	8001d2c <HAL_GetTick>
 80027b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027b6:	e008      	b.n	80027ca <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80027b8:	f7ff fab8 	bl	8001d2c <HAL_GetTick>
 80027bc:	4602      	mov	r2, r0
 80027be:	693b      	ldr	r3, [r7, #16]
 80027c0:	1ad3      	subs	r3, r2, r3
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d901      	bls.n	80027ca <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80027c6:	2303      	movs	r3, #3
 80027c8:	e087      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80027ca:	4b27      	ldr	r3, [pc, #156]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d1f0      	bne.n	80027b8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	69da      	ldr	r2, [r3, #28]
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6a1b      	ldr	r3, [r3, #32]
 80027de:	431a      	orrs	r2, r3
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027e4:	019b      	lsls	r3, r3, #6
 80027e6:	431a      	orrs	r2, r3
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ec:	085b      	lsrs	r3, r3, #1
 80027ee:	3b01      	subs	r3, #1
 80027f0:	041b      	lsls	r3, r3, #16
 80027f2:	431a      	orrs	r2, r3
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027f8:	061b      	lsls	r3, r3, #24
 80027fa:	491b      	ldr	r1, [pc, #108]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 80027fc:	4313      	orrs	r3, r2
 80027fe:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002800:	4b1b      	ldr	r3, [pc, #108]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 8002802:	2201      	movs	r2, #1
 8002804:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002806:	f7ff fa91 	bl	8001d2c <HAL_GetTick>
 800280a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800280c:	e008      	b.n	8002820 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800280e:	f7ff fa8d 	bl	8001d2c <HAL_GetTick>
 8002812:	4602      	mov	r2, r0
 8002814:	693b      	ldr	r3, [r7, #16]
 8002816:	1ad3      	subs	r3, r2, r3
 8002818:	2b02      	cmp	r3, #2
 800281a:	d901      	bls.n	8002820 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800281c:	2303      	movs	r3, #3
 800281e:	e05c      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002820:	4b11      	ldr	r3, [pc, #68]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002828:	2b00      	cmp	r3, #0
 800282a:	d0f0      	beq.n	800280e <HAL_RCC_OscConfig+0x416>
 800282c:	e054      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800282e:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <HAL_RCC_OscConfig+0x478>)
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002834:	f7ff fa7a 	bl	8001d2c <HAL_GetTick>
 8002838:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800283a:	e008      	b.n	800284e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800283c:	f7ff fa76 	bl	8001d2c <HAL_GetTick>
 8002840:	4602      	mov	r2, r0
 8002842:	693b      	ldr	r3, [r7, #16]
 8002844:	1ad3      	subs	r3, r2, r3
 8002846:	2b02      	cmp	r3, #2
 8002848:	d901      	bls.n	800284e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e045      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800284e:	4b06      	ldr	r3, [pc, #24]	@ (8002868 <HAL_RCC_OscConfig+0x470>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002856:	2b00      	cmp	r3, #0
 8002858:	d1f0      	bne.n	800283c <HAL_RCC_OscConfig+0x444>
 800285a:	e03d      	b.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	699b      	ldr	r3, [r3, #24]
 8002860:	2b01      	cmp	r3, #1
 8002862:	d107      	bne.n	8002874 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002864:	2301      	movs	r3, #1
 8002866:	e038      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
 8002868:	40023800 	.word	0x40023800
 800286c:	40007000 	.word	0x40007000
 8002870:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002874:	4b1b      	ldr	r3, [pc, #108]	@ (80028e4 <HAL_RCC_OscConfig+0x4ec>)
 8002876:	685b      	ldr	r3, [r3, #4]
 8002878:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	699b      	ldr	r3, [r3, #24]
 800287e:	2b01      	cmp	r3, #1
 8002880:	d028      	beq.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800288c:	429a      	cmp	r2, r3
 800288e:	d121      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002890:	68fb      	ldr	r3, [r7, #12]
 8002892:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800289a:	429a      	cmp	r2, r3
 800289c:	d11a      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80028a4:	4013      	ands	r3, r2
 80028a6:	687a      	ldr	r2, [r7, #4]
 80028a8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80028aa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80028ac:	4293      	cmp	r3, r2
 80028ae:	d111      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80028ba:	085b      	lsrs	r3, r3, #1
 80028bc:	3b01      	subs	r3, #1
 80028be:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80028c0:	429a      	cmp	r2, r3
 80028c2:	d107      	bne.n	80028d4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80028ce:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80028d0:	429a      	cmp	r2, r3
 80028d2:	d001      	beq.n	80028d8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80028d4:	2301      	movs	r3, #1
 80028d6:	e000      	b.n	80028da <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80028d8:	2300      	movs	r3, #0
}
 80028da:	4618      	mov	r0, r3
 80028dc:	3718      	adds	r7, #24
 80028de:	46bd      	mov	sp, r7
 80028e0:	bd80      	pop	{r7, pc}
 80028e2:	bf00      	nop
 80028e4:	40023800 	.word	0x40023800

080028e8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b084      	sub	sp, #16
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	6078      	str	r0, [r7, #4]
 80028f0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b00      	cmp	r3, #0
 80028f6:	d101      	bne.n	80028fc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80028f8:	2301      	movs	r3, #1
 80028fa:	e0cc      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80028fc:	4b68      	ldr	r3, [pc, #416]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 030f 	and.w	r3, r3, #15
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d90c      	bls.n	8002924 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b65      	ldr	r3, [pc, #404]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b63      	ldr	r3, [pc, #396]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 030f 	and.w	r3, r3, #15
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e0b8      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0302 	and.w	r3, r3, #2
 800292c:	2b00      	cmp	r3, #0
 800292e:	d020      	beq.n	8002972 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0304 	and.w	r3, r3, #4
 8002938:	2b00      	cmp	r3, #0
 800293a:	d005      	beq.n	8002948 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800293c:	4b59      	ldr	r3, [pc, #356]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	689b      	ldr	r3, [r3, #8]
 8002940:	4a58      	ldr	r2, [pc, #352]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002942:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8002946:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	f003 0308 	and.w	r3, r3, #8
 8002950:	2b00      	cmp	r3, #0
 8002952:	d005      	beq.n	8002960 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002954:	4b53      	ldr	r3, [pc, #332]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002956:	689b      	ldr	r3, [r3, #8]
 8002958:	4a52      	ldr	r2, [pc, #328]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800295a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800295e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002960:	4b50      	ldr	r3, [pc, #320]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002962:	689b      	ldr	r3, [r3, #8]
 8002964:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	494d      	ldr	r1, [pc, #308]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 800296e:	4313      	orrs	r3, r2
 8002970:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0301 	and.w	r3, r3, #1
 800297a:	2b00      	cmp	r3, #0
 800297c:	d044      	beq.n	8002a08 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	685b      	ldr	r3, [r3, #4]
 8002982:	2b01      	cmp	r3, #1
 8002984:	d107      	bne.n	8002996 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002986:	4b47      	ldr	r3, [pc, #284]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800298e:	2b00      	cmp	r3, #0
 8002990:	d119      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
 8002994:	e07f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	685b      	ldr	r3, [r3, #4]
 800299a:	2b02      	cmp	r3, #2
 800299c:	d003      	beq.n	80029a6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80029a2:	2b03      	cmp	r3, #3
 80029a4:	d107      	bne.n	80029b6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80029a6:	4b3f      	ldr	r3, [pc, #252]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80029ae:	2b00      	cmp	r3, #0
 80029b0:	d109      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029b2:	2301      	movs	r3, #1
 80029b4:	e06f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80029b6:	4b3b      	ldr	r3, [pc, #236]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0302 	and.w	r3, r3, #2
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d101      	bne.n	80029c6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029c2:	2301      	movs	r3, #1
 80029c4:	e067      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80029c6:	4b37      	ldr	r3, [pc, #220]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029c8:	689b      	ldr	r3, [r3, #8]
 80029ca:	f023 0203 	bic.w	r2, r3, #3
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	4934      	ldr	r1, [pc, #208]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029d4:	4313      	orrs	r3, r2
 80029d6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80029d8:	f7ff f9a8 	bl	8001d2c <HAL_GetTick>
 80029dc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029de:	e00a      	b.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80029e0:	f7ff f9a4 	bl	8001d2c <HAL_GetTick>
 80029e4:	4602      	mov	r2, r0
 80029e6:	68fb      	ldr	r3, [r7, #12]
 80029e8:	1ad3      	subs	r3, r2, r3
 80029ea:	f241 3288 	movw	r2, #5000	@ 0x1388
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d901      	bls.n	80029f6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80029f2:	2303      	movs	r3, #3
 80029f4:	e04f      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80029f6:	4b2b      	ldr	r3, [pc, #172]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 80029f8:	689b      	ldr	r3, [r3, #8]
 80029fa:	f003 020c 	and.w	r2, r3, #12
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	009b      	lsls	r3, r3, #2
 8002a04:	429a      	cmp	r2, r3
 8002a06:	d1eb      	bne.n	80029e0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a08:	4b25      	ldr	r3, [pc, #148]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f003 030f 	and.w	r3, r3, #15
 8002a10:	683a      	ldr	r2, [r7, #0]
 8002a12:	429a      	cmp	r2, r3
 8002a14:	d20c      	bcs.n	8002a30 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a16:	4b22      	ldr	r3, [pc, #136]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a18:	683a      	ldr	r2, [r7, #0]
 8002a1a:	b2d2      	uxtb	r2, r2
 8002a1c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a1e:	4b20      	ldr	r3, [pc, #128]	@ (8002aa0 <HAL_RCC_ClockConfig+0x1b8>)
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	f003 030f 	and.w	r3, r3, #15
 8002a26:	683a      	ldr	r2, [r7, #0]
 8002a28:	429a      	cmp	r2, r3
 8002a2a:	d001      	beq.n	8002a30 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002a2c:	2301      	movs	r3, #1
 8002a2e:	e032      	b.n	8002a96 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	d008      	beq.n	8002a4e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002a3c:	4b19      	ldr	r3, [pc, #100]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a3e:	689b      	ldr	r3, [r3, #8]
 8002a40:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	4916      	ldr	r1, [pc, #88]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a4a:	4313      	orrs	r3, r2
 8002a4c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0308 	and.w	r3, r3, #8
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d009      	beq.n	8002a6e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002a5a:	4b12      	ldr	r3, [pc, #72]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	691b      	ldr	r3, [r3, #16]
 8002a66:	00db      	lsls	r3, r3, #3
 8002a68:	490e      	ldr	r1, [pc, #56]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a6a:	4313      	orrs	r3, r2
 8002a6c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002a6e:	f000 f821 	bl	8002ab4 <HAL_RCC_GetSysClockFreq>
 8002a72:	4602      	mov	r2, r0
 8002a74:	4b0b      	ldr	r3, [pc, #44]	@ (8002aa4 <HAL_RCC_ClockConfig+0x1bc>)
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	091b      	lsrs	r3, r3, #4
 8002a7a:	f003 030f 	and.w	r3, r3, #15
 8002a7e:	490a      	ldr	r1, [pc, #40]	@ (8002aa8 <HAL_RCC_ClockConfig+0x1c0>)
 8002a80:	5ccb      	ldrb	r3, [r1, r3]
 8002a82:	fa22 f303 	lsr.w	r3, r2, r3
 8002a86:	4a09      	ldr	r2, [pc, #36]	@ (8002aac <HAL_RCC_ClockConfig+0x1c4>)
 8002a88:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8002a8a:	4b09      	ldr	r3, [pc, #36]	@ (8002ab0 <HAL_RCC_ClockConfig+0x1c8>)
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	4618      	mov	r0, r3
 8002a90:	f7ff f908 	bl	8001ca4 <HAL_InitTick>

  return HAL_OK;
 8002a94:	2300      	movs	r3, #0
}
 8002a96:	4618      	mov	r0, r3
 8002a98:	3710      	adds	r7, #16
 8002a9a:	46bd      	mov	sp, r7
 8002a9c:	bd80      	pop	{r7, pc}
 8002a9e:	bf00      	nop
 8002aa0:	40023c00 	.word	0x40023c00
 8002aa4:	40023800 	.word	0x40023800
 8002aa8:	08006350 	.word	0x08006350
 8002aac:	20000000 	.word	0x20000000
 8002ab0:	20000004 	.word	0x20000004

08002ab4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002ab4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002ab8:	b094      	sub	sp, #80	@ 0x50
 8002aba:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8002abc:	2300      	movs	r3, #0
 8002abe:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8002ac4:	2300      	movs	r3, #0
 8002ac6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8002ac8:	2300      	movs	r3, #0
 8002aca:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002acc:	4b79      	ldr	r3, [pc, #484]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ace:	689b      	ldr	r3, [r3, #8]
 8002ad0:	f003 030c 	and.w	r3, r3, #12
 8002ad4:	2b08      	cmp	r3, #8
 8002ad6:	d00d      	beq.n	8002af4 <HAL_RCC_GetSysClockFreq+0x40>
 8002ad8:	2b08      	cmp	r3, #8
 8002ada:	f200 80e1 	bhi.w	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d002      	beq.n	8002ae8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ae2:	2b04      	cmp	r3, #4
 8002ae4:	d003      	beq.n	8002aee <HAL_RCC_GetSysClockFreq+0x3a>
 8002ae6:	e0db      	b.n	8002ca0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ae8:	4b73      	ldr	r3, [pc, #460]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002aea:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002aec:	e0db      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002aee:	4b73      	ldr	r3, [pc, #460]	@ (8002cbc <HAL_RCC_GetSysClockFreq+0x208>)
 8002af0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002af2:	e0d8      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002af4:	4b6f      	ldr	r3, [pc, #444]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002af6:	685b      	ldr	r3, [r3, #4]
 8002af8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8002afc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002afe:	4b6d      	ldr	r3, [pc, #436]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b00:	685b      	ldr	r3, [r3, #4]
 8002b02:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b06:	2b00      	cmp	r3, #0
 8002b08:	d063      	beq.n	8002bd2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002b0a:	4b6a      	ldr	r3, [pc, #424]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	099b      	lsrs	r3, r3, #6
 8002b10:	2200      	movs	r2, #0
 8002b12:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002b14:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8002b16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002b18:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002b1c:	633b      	str	r3, [r7, #48]	@ 0x30
 8002b1e:	2300      	movs	r3, #0
 8002b20:	637b      	str	r3, [r7, #52]	@ 0x34
 8002b22:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8002b26:	4622      	mov	r2, r4
 8002b28:	462b      	mov	r3, r5
 8002b2a:	f04f 0000 	mov.w	r0, #0
 8002b2e:	f04f 0100 	mov.w	r1, #0
 8002b32:	0159      	lsls	r1, r3, #5
 8002b34:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002b38:	0150      	lsls	r0, r2, #5
 8002b3a:	4602      	mov	r2, r0
 8002b3c:	460b      	mov	r3, r1
 8002b3e:	4621      	mov	r1, r4
 8002b40:	1a51      	subs	r1, r2, r1
 8002b42:	6139      	str	r1, [r7, #16]
 8002b44:	4629      	mov	r1, r5
 8002b46:	eb63 0301 	sbc.w	r3, r3, r1
 8002b4a:	617b      	str	r3, [r7, #20]
 8002b4c:	f04f 0200 	mov.w	r2, #0
 8002b50:	f04f 0300 	mov.w	r3, #0
 8002b54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002b58:	4659      	mov	r1, fp
 8002b5a:	018b      	lsls	r3, r1, #6
 8002b5c:	4651      	mov	r1, sl
 8002b5e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002b62:	4651      	mov	r1, sl
 8002b64:	018a      	lsls	r2, r1, #6
 8002b66:	4651      	mov	r1, sl
 8002b68:	ebb2 0801 	subs.w	r8, r2, r1
 8002b6c:	4659      	mov	r1, fp
 8002b6e:	eb63 0901 	sbc.w	r9, r3, r1
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	f04f 0300 	mov.w	r3, #0
 8002b7a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002b7e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002b82:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002b86:	4690      	mov	r8, r2
 8002b88:	4699      	mov	r9, r3
 8002b8a:	4623      	mov	r3, r4
 8002b8c:	eb18 0303 	adds.w	r3, r8, r3
 8002b90:	60bb      	str	r3, [r7, #8]
 8002b92:	462b      	mov	r3, r5
 8002b94:	eb49 0303 	adc.w	r3, r9, r3
 8002b98:	60fb      	str	r3, [r7, #12]
 8002b9a:	f04f 0200 	mov.w	r2, #0
 8002b9e:	f04f 0300 	mov.w	r3, #0
 8002ba2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002ba6:	4629      	mov	r1, r5
 8002ba8:	024b      	lsls	r3, r1, #9
 8002baa:	4621      	mov	r1, r4
 8002bac:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002bb0:	4621      	mov	r1, r4
 8002bb2:	024a      	lsls	r2, r1, #9
 8002bb4:	4610      	mov	r0, r2
 8002bb6:	4619      	mov	r1, r3
 8002bb8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002bba:	2200      	movs	r2, #0
 8002bbc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002bbe:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002bc0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002bc4:	f7fe f800 	bl	8000bc8 <__aeabi_uldivmod>
 8002bc8:	4602      	mov	r2, r0
 8002bca:	460b      	mov	r3, r1
 8002bcc:	4613      	mov	r3, r2
 8002bce:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002bd0:	e058      	b.n	8002c84 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002bd2:	4b38      	ldr	r3, [pc, #224]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002bd4:	685b      	ldr	r3, [r3, #4]
 8002bd6:	099b      	lsrs	r3, r3, #6
 8002bd8:	2200      	movs	r2, #0
 8002bda:	4618      	mov	r0, r3
 8002bdc:	4611      	mov	r1, r2
 8002bde:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002be2:	623b      	str	r3, [r7, #32]
 8002be4:	2300      	movs	r3, #0
 8002be6:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002bec:	4642      	mov	r2, r8
 8002bee:	464b      	mov	r3, r9
 8002bf0:	f04f 0000 	mov.w	r0, #0
 8002bf4:	f04f 0100 	mov.w	r1, #0
 8002bf8:	0159      	lsls	r1, r3, #5
 8002bfa:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002bfe:	0150      	lsls	r0, r2, #5
 8002c00:	4602      	mov	r2, r0
 8002c02:	460b      	mov	r3, r1
 8002c04:	4641      	mov	r1, r8
 8002c06:	ebb2 0a01 	subs.w	sl, r2, r1
 8002c0a:	4649      	mov	r1, r9
 8002c0c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002c10:	f04f 0200 	mov.w	r2, #0
 8002c14:	f04f 0300 	mov.w	r3, #0
 8002c18:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002c1c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002c20:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002c24:	ebb2 040a 	subs.w	r4, r2, sl
 8002c28:	eb63 050b 	sbc.w	r5, r3, fp
 8002c2c:	f04f 0200 	mov.w	r2, #0
 8002c30:	f04f 0300 	mov.w	r3, #0
 8002c34:	00eb      	lsls	r3, r5, #3
 8002c36:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002c3a:	00e2      	lsls	r2, r4, #3
 8002c3c:	4614      	mov	r4, r2
 8002c3e:	461d      	mov	r5, r3
 8002c40:	4643      	mov	r3, r8
 8002c42:	18e3      	adds	r3, r4, r3
 8002c44:	603b      	str	r3, [r7, #0]
 8002c46:	464b      	mov	r3, r9
 8002c48:	eb45 0303 	adc.w	r3, r5, r3
 8002c4c:	607b      	str	r3, [r7, #4]
 8002c4e:	f04f 0200 	mov.w	r2, #0
 8002c52:	f04f 0300 	mov.w	r3, #0
 8002c56:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002c5a:	4629      	mov	r1, r5
 8002c5c:	028b      	lsls	r3, r1, #10
 8002c5e:	4621      	mov	r1, r4
 8002c60:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002c64:	4621      	mov	r1, r4
 8002c66:	028a      	lsls	r2, r1, #10
 8002c68:	4610      	mov	r0, r2
 8002c6a:	4619      	mov	r1, r3
 8002c6c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8002c6e:	2200      	movs	r2, #0
 8002c70:	61bb      	str	r3, [r7, #24]
 8002c72:	61fa      	str	r2, [r7, #28]
 8002c74:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002c78:	f7fd ffa6 	bl	8000bc8 <__aeabi_uldivmod>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4613      	mov	r3, r2
 8002c82:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002c84:	4b0b      	ldr	r3, [pc, #44]	@ (8002cb4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002c86:	685b      	ldr	r3, [r3, #4]
 8002c88:	0c1b      	lsrs	r3, r3, #16
 8002c8a:	f003 0303 	and.w	r3, r3, #3
 8002c8e:	3301      	adds	r3, #1
 8002c90:	005b      	lsls	r3, r3, #1
 8002c92:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002c94:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002c96:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002c98:	fbb2 f3f3 	udiv	r3, r2, r3
 8002c9c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002c9e:	e002      	b.n	8002ca6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002ca0:	4b05      	ldr	r3, [pc, #20]	@ (8002cb8 <HAL_RCC_GetSysClockFreq+0x204>)
 8002ca2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002ca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ca6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002ca8:	4618      	mov	r0, r3
 8002caa:	3750      	adds	r7, #80	@ 0x50
 8002cac:	46bd      	mov	sp, r7
 8002cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002cb2:	bf00      	nop
 8002cb4:	40023800 	.word	0x40023800
 8002cb8:	00f42400 	.word	0x00f42400
 8002cbc:	007a1200 	.word	0x007a1200

08002cc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	b082      	sub	sp, #8
 8002cc4:	af00      	add	r7, sp, #0
 8002cc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d101      	bne.n	8002cd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002cce:	2301      	movs	r3, #1
 8002cd0:	e07b      	b.n	8002dca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d108      	bne.n	8002cec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	685b      	ldr	r3, [r3, #4]
 8002cde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ce2:	d009      	beq.n	8002cf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	2200      	movs	r2, #0
 8002ce8:	61da      	str	r2, [r3, #28]
 8002cea:	e005      	b.n	8002cf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2200      	movs	r2, #0
 8002cfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002d04:	b2db      	uxtb	r3, r3
 8002d06:	2b00      	cmp	r3, #0
 8002d08:	d106      	bne.n	8002d18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7fe fdfc 	bl	8001910 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	2202      	movs	r2, #2
 8002d1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	681a      	ldr	r2, [r3, #0]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	685b      	ldr	r3, [r3, #4]
 8002d34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002d40:	431a      	orrs	r2, r3
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	68db      	ldr	r3, [r3, #12]
 8002d46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002d4a:	431a      	orrs	r2, r3
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	691b      	ldr	r3, [r3, #16]
 8002d50:	f003 0302 	and.w	r3, r3, #2
 8002d54:	431a      	orrs	r2, r3
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	695b      	ldr	r3, [r3, #20]
 8002d5a:	f003 0301 	and.w	r3, r3, #1
 8002d5e:	431a      	orrs	r2, r3
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	699b      	ldr	r3, [r3, #24]
 8002d64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002d68:	431a      	orrs	r2, r3
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	69db      	ldr	r3, [r3, #28]
 8002d6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002d72:	431a      	orrs	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6a1b      	ldr	r3, [r3, #32]
 8002d78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002d7c:	ea42 0103 	orr.w	r1, r2, r3
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002d84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	430a      	orrs	r2, r1
 8002d8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	699b      	ldr	r3, [r3, #24]
 8002d94:	0c1b      	lsrs	r3, r3, #16
 8002d96:	f003 0104 	and.w	r1, r3, #4
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d9e:	f003 0210 	and.w	r2, r3, #16
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	681b      	ldr	r3, [r3, #0]
 8002da6:	430a      	orrs	r2, r1
 8002da8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	69da      	ldr	r2, [r3, #28]
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002db8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002dba:	687b      	ldr	r3, [r7, #4]
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002dc0:	687b      	ldr	r3, [r7, #4]
 8002dc2:	2201      	movs	r2, #1
 8002dc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002dc8:	2300      	movs	r3, #0
}
 8002dca:	4618      	mov	r0, r3
 8002dcc:	3708      	adds	r7, #8
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	bd80      	pop	{r7, pc}

08002dd2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002dd2:	b580      	push	{r7, lr}
 8002dd4:	b088      	sub	sp, #32
 8002dd6:	af00      	add	r7, sp, #0
 8002dd8:	60f8      	str	r0, [r7, #12]
 8002dda:	60b9      	str	r1, [r7, #8]
 8002ddc:	603b      	str	r3, [r7, #0]
 8002dde:	4613      	mov	r3, r2
 8002de0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002de2:	f7fe ffa3 	bl	8001d2c <HAL_GetTick>
 8002de6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 8002de8:	88fb      	ldrh	r3, [r7, #6]
 8002dea:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002df2:	b2db      	uxtb	r3, r3
 8002df4:	2b01      	cmp	r3, #1
 8002df6:	d001      	beq.n	8002dfc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 8002df8:	2302      	movs	r3, #2
 8002dfa:	e12a      	b.n	8003052 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 8002dfc:	68bb      	ldr	r3, [r7, #8]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d002      	beq.n	8002e08 <HAL_SPI_Transmit+0x36>
 8002e02:	88fb      	ldrh	r3, [r7, #6]
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d101      	bne.n	8002e0c <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 8002e08:	2301      	movs	r3, #1
 8002e0a:	e122      	b.n	8003052 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e0c:	68fb      	ldr	r3, [r7, #12]
 8002e0e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e12:	2b01      	cmp	r3, #1
 8002e14:	d101      	bne.n	8002e1a <HAL_SPI_Transmit+0x48>
 8002e16:	2302      	movs	r3, #2
 8002e18:	e11b      	b.n	8003052 <HAL_SPI_Transmit+0x280>
 8002e1a:	68fb      	ldr	r3, [r7, #12]
 8002e1c:	2201      	movs	r2, #1
 8002e1e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002e22:	68fb      	ldr	r3, [r7, #12]
 8002e24:	2203      	movs	r2, #3
 8002e26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	68ba      	ldr	r2, [r7, #8]
 8002e34:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	88fa      	ldrh	r2, [r7, #6]
 8002e3a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 8002e3c:	68fb      	ldr	r3, [r7, #12]
 8002e3e:	88fa      	ldrh	r2, [r7, #6]
 8002e40:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	2200      	movs	r2, #0
 8002e46:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2200      	movs	r2, #0
 8002e4c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	2200      	movs	r2, #0
 8002e52:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	2200      	movs	r2, #0
 8002e58:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	2200      	movs	r2, #0
 8002e5e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	689b      	ldr	r3, [r3, #8]
 8002e64:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002e68:	d10f      	bne.n	8002e8a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	681a      	ldr	r2, [r3, #0]
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002e78:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002e7a:	68fb      	ldr	r3, [r7, #12]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002e88:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002e8a:	68fb      	ldr	r3, [r7, #12]
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e94:	2b40      	cmp	r3, #64	@ 0x40
 8002e96:	d007      	beq.n	8002ea8 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002e98:	68fb      	ldr	r3, [r7, #12]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	68fb      	ldr	r3, [r7, #12]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002ea6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	68db      	ldr	r3, [r3, #12]
 8002eac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002eb0:	d152      	bne.n	8002f58 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d002      	beq.n	8002ec0 <HAL_SPI_Transmit+0xee>
 8002eba:	8b7b      	ldrh	r3, [r7, #26]
 8002ebc:	2b01      	cmp	r3, #1
 8002ebe:	d145      	bne.n	8002f4c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ec4:	881a      	ldrh	r2, [r3, #0]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ed0:	1c9a      	adds	r2, r3, #2
 8002ed2:	68fb      	ldr	r3, [r7, #12]
 8002ed4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002eda:	b29b      	uxth	r3, r3
 8002edc:	3b01      	subs	r3, #1
 8002ede:	b29a      	uxth	r2, r3
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002ee4:	e032      	b.n	8002f4c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002ee6:	68fb      	ldr	r3, [r7, #12]
 8002ee8:	681b      	ldr	r3, [r3, #0]
 8002eea:	689b      	ldr	r3, [r3, #8]
 8002eec:	f003 0302 	and.w	r3, r3, #2
 8002ef0:	2b02      	cmp	r3, #2
 8002ef2:	d112      	bne.n	8002f1a <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef8:	881a      	ldrh	r2, [r3, #0]
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f04:	1c9a      	adds	r2, r3, #2
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002f0a:	68fb      	ldr	r3, [r7, #12]
 8002f0c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f0e:	b29b      	uxth	r3, r3
 8002f10:	3b01      	subs	r3, #1
 8002f12:	b29a      	uxth	r2, r3
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002f18:	e018      	b.n	8002f4c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002f1a:	f7fe ff07 	bl	8001d2c <HAL_GetTick>
 8002f1e:	4602      	mov	r2, r0
 8002f20:	69fb      	ldr	r3, [r7, #28]
 8002f22:	1ad3      	subs	r3, r2, r3
 8002f24:	683a      	ldr	r2, [r7, #0]
 8002f26:	429a      	cmp	r2, r3
 8002f28:	d803      	bhi.n	8002f32 <HAL_SPI_Transmit+0x160>
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002f30:	d102      	bne.n	8002f38 <HAL_SPI_Transmit+0x166>
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d109      	bne.n	8002f4c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	2201      	movs	r2, #1
 8002f3c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	2200      	movs	r2, #0
 8002f44:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002f48:	2303      	movs	r3, #3
 8002f4a:	e082      	b.n	8003052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f50:	b29b      	uxth	r3, r3
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d1c7      	bne.n	8002ee6 <HAL_SPI_Transmit+0x114>
 8002f56:	e053      	b.n	8003000 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	685b      	ldr	r3, [r3, #4]
 8002f5c:	2b00      	cmp	r3, #0
 8002f5e:	d002      	beq.n	8002f66 <HAL_SPI_Transmit+0x194>
 8002f60:	8b7b      	ldrh	r3, [r7, #26]
 8002f62:	2b01      	cmp	r3, #1
 8002f64:	d147      	bne.n	8002ff6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f66:	68fb      	ldr	r3, [r7, #12]
 8002f68:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002f6a:	68fb      	ldr	r3, [r7, #12]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	330c      	adds	r3, #12
 8002f70:	7812      	ldrb	r2, [r2, #0]
 8002f72:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f78:	1c5a      	adds	r2, r3, #1
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f82:	b29b      	uxth	r3, r3
 8002f84:	3b01      	subs	r3, #1
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002f8c:	e033      	b.n	8002ff6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	689b      	ldr	r3, [r3, #8]
 8002f94:	f003 0302 	and.w	r3, r3, #2
 8002f98:	2b02      	cmp	r3, #2
 8002f9a:	d113      	bne.n	8002fc4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	330c      	adds	r3, #12
 8002fa6:	7812      	ldrb	r2, [r2, #0]
 8002fa8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fae:	1c5a      	adds	r2, r3, #1
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	3b01      	subs	r3, #1
 8002fbc:	b29a      	uxth	r2, r3
 8002fbe:	68fb      	ldr	r3, [r7, #12]
 8002fc0:	86da      	strh	r2, [r3, #54]	@ 0x36
 8002fc2:	e018      	b.n	8002ff6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002fc4:	f7fe feb2 	bl	8001d2c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	69fb      	ldr	r3, [r7, #28]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	683a      	ldr	r2, [r7, #0]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d803      	bhi.n	8002fdc <HAL_SPI_Transmit+0x20a>
 8002fd4:	683b      	ldr	r3, [r7, #0]
 8002fd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fda:	d102      	bne.n	8002fe2 <HAL_SPI_Transmit+0x210>
 8002fdc:	683b      	ldr	r3, [r7, #0]
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d109      	bne.n	8002ff6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	2201      	movs	r2, #1
 8002fe6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	2200      	movs	r2, #0
 8002fee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e02d      	b.n	8003052 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002ffa:	b29b      	uxth	r3, r3
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d1c6      	bne.n	8002f8e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003000:	69fa      	ldr	r2, [r7, #28]
 8003002:	6839      	ldr	r1, [r7, #0]
 8003004:	68f8      	ldr	r0, [r7, #12]
 8003006:	f000 fbd9 	bl	80037bc <SPI_EndRxTxTransaction>
 800300a:	4603      	mov	r3, r0
 800300c:	2b00      	cmp	r3, #0
 800300e:	d002      	beq.n	8003016 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003010:	68fb      	ldr	r3, [r7, #12]
 8003012:	2220      	movs	r2, #32
 8003014:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	689b      	ldr	r3, [r3, #8]
 800301a:	2b00      	cmp	r3, #0
 800301c:	d10a      	bne.n	8003034 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800301e:	2300      	movs	r3, #0
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	68fb      	ldr	r3, [r7, #12]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	68db      	ldr	r3, [r3, #12]
 8003028:	617b      	str	r3, [r7, #20]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	617b      	str	r3, [r7, #20]
 8003032:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8003034:	68fb      	ldr	r3, [r7, #12]
 8003036:	2201      	movs	r2, #1
 8003038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003044:	68fb      	ldr	r3, [r7, #12]
 8003046:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003048:	2b00      	cmp	r3, #0
 800304a:	d001      	beq.n	8003050 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800304c:	2301      	movs	r3, #1
 800304e:	e000      	b.n	8003052 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8003050:	2300      	movs	r3, #0
  }
}
 8003052:	4618      	mov	r0, r3
 8003054:	3720      	adds	r7, #32
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b088      	sub	sp, #32
 800305e:	af02      	add	r7, sp, #8
 8003060:	60f8      	str	r0, [r7, #12]
 8003062:	60b9      	str	r1, [r7, #8]
 8003064:	603b      	str	r3, [r7, #0]
 8003066:	4613      	mov	r3, r2
 8003068:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800306a:	68fb      	ldr	r3, [r7, #12]
 800306c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b01      	cmp	r3, #1
 8003074:	d001      	beq.n	800307a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8003076:	2302      	movs	r3, #2
 8003078:	e104      	b.n	8003284 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800307a:	68bb      	ldr	r3, [r7, #8]
 800307c:	2b00      	cmp	r3, #0
 800307e:	d002      	beq.n	8003086 <HAL_SPI_Receive+0x2c>
 8003080:	88fb      	ldrh	r3, [r7, #6]
 8003082:	2b00      	cmp	r3, #0
 8003084:	d101      	bne.n	800308a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8003086:	2301      	movs	r3, #1
 8003088:	e0fc      	b.n	8003284 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003092:	d112      	bne.n	80030ba <HAL_SPI_Receive+0x60>
 8003094:	68fb      	ldr	r3, [r7, #12]
 8003096:	689b      	ldr	r3, [r3, #8]
 8003098:	2b00      	cmp	r3, #0
 800309a:	d10e      	bne.n	80030ba <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	2204      	movs	r2, #4
 80030a0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80030a4:	88fa      	ldrh	r2, [r7, #6]
 80030a6:	683b      	ldr	r3, [r7, #0]
 80030a8:	9300      	str	r3, [sp, #0]
 80030aa:	4613      	mov	r3, r2
 80030ac:	68ba      	ldr	r2, [r7, #8]
 80030ae:	68b9      	ldr	r1, [r7, #8]
 80030b0:	68f8      	ldr	r0, [r7, #12]
 80030b2:	f000 f8eb 	bl	800328c <HAL_SPI_TransmitReceive>
 80030b6:	4603      	mov	r3, r0
 80030b8:	e0e4      	b.n	8003284 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80030ba:	f7fe fe37 	bl	8001d2c <HAL_GetTick>
 80030be:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80030c6:	2b01      	cmp	r3, #1
 80030c8:	d101      	bne.n	80030ce <HAL_SPI_Receive+0x74>
 80030ca:	2302      	movs	r3, #2
 80030cc:	e0da      	b.n	8003284 <HAL_SPI_Receive+0x22a>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	2201      	movs	r2, #1
 80030d2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2204      	movs	r2, #4
 80030da:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	68ba      	ldr	r2, [r7, #8]
 80030e8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	88fa      	ldrh	r2, [r7, #6]
 80030ee:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80030f0:	68fb      	ldr	r3, [r7, #12]
 80030f2:	88fa      	ldrh	r2, [r7, #6]
 80030f4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2200      	movs	r2, #0
 80030fa:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	2200      	movs	r2, #0
 8003100:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	2200      	movs	r2, #0
 8003106:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	2200      	movs	r2, #0
 800310c:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	2200      	movs	r2, #0
 8003112:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	689b      	ldr	r3, [r3, #8]
 8003118:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800311c:	d10f      	bne.n	800313e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	681a      	ldr	r2, [r3, #0]
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800312c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800312e:	68fb      	ldr	r3, [r7, #12]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	681a      	ldr	r2, [r3, #0]
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800313c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003148:	2b40      	cmp	r3, #64	@ 0x40
 800314a:	d007      	beq.n	800315c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800314c:	68fb      	ldr	r3, [r7, #12]
 800314e:	681b      	ldr	r3, [r3, #0]
 8003150:	681a      	ldr	r2, [r3, #0]
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800315a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	68db      	ldr	r3, [r3, #12]
 8003160:	2b00      	cmp	r3, #0
 8003162:	d170      	bne.n	8003246 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003164:	e035      	b.n	80031d2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	689b      	ldr	r3, [r3, #8]
 800316c:	f003 0301 	and.w	r3, r3, #1
 8003170:	2b01      	cmp	r3, #1
 8003172:	d115      	bne.n	80031a0 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	f103 020c 	add.w	r2, r3, #12
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003180:	7812      	ldrb	r2, [r2, #0]
 8003182:	b2d2      	uxtb	r2, r2
 8003184:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800318a:	1c5a      	adds	r2, r3, #1
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003194:	b29b      	uxth	r3, r3
 8003196:	3b01      	subs	r3, #1
 8003198:	b29a      	uxth	r2, r3
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800319e:	e018      	b.n	80031d2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80031a0:	f7fe fdc4 	bl	8001d2c <HAL_GetTick>
 80031a4:	4602      	mov	r2, r0
 80031a6:	697b      	ldr	r3, [r7, #20]
 80031a8:	1ad3      	subs	r3, r2, r3
 80031aa:	683a      	ldr	r2, [r7, #0]
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d803      	bhi.n	80031b8 <HAL_SPI_Receive+0x15e>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031b6:	d102      	bne.n	80031be <HAL_SPI_Receive+0x164>
 80031b8:	683b      	ldr	r3, [r7, #0]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d109      	bne.n	80031d2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	2201      	movs	r2, #1
 80031c2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	2200      	movs	r2, #0
 80031ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80031ce:	2303      	movs	r3, #3
 80031d0:	e058      	b.n	8003284 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80031d6:	b29b      	uxth	r3, r3
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d1c4      	bne.n	8003166 <HAL_SPI_Receive+0x10c>
 80031dc:	e038      	b.n	8003250 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 0301 	and.w	r3, r3, #1
 80031e8:	2b01      	cmp	r3, #1
 80031ea:	d113      	bne.n	8003214 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80031ec:	68fb      	ldr	r3, [r7, #12]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	68da      	ldr	r2, [r3, #12]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031f6:	b292      	uxth	r2, r2
 80031f8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80031fe:	1c9a      	adds	r2, r3, #2
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003208:	b29b      	uxth	r3, r3
 800320a:	3b01      	subs	r3, #1
 800320c:	b29a      	uxth	r2, r3
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8003212:	e018      	b.n	8003246 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003214:	f7fe fd8a 	bl	8001d2c <HAL_GetTick>
 8003218:	4602      	mov	r2, r0
 800321a:	697b      	ldr	r3, [r7, #20]
 800321c:	1ad3      	subs	r3, r2, r3
 800321e:	683a      	ldr	r2, [r7, #0]
 8003220:	429a      	cmp	r2, r3
 8003222:	d803      	bhi.n	800322c <HAL_SPI_Receive+0x1d2>
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	f1b3 3fff 	cmp.w	r3, #4294967295
 800322a:	d102      	bne.n	8003232 <HAL_SPI_Receive+0x1d8>
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	2b00      	cmp	r3, #0
 8003230:	d109      	bne.n	8003246 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	2201      	movs	r2, #1
 8003236:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8003242:	2303      	movs	r3, #3
 8003244:	e01e      	b.n	8003284 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8003246:	68fb      	ldr	r3, [r7, #12]
 8003248:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800324a:	b29b      	uxth	r3, r3
 800324c:	2b00      	cmp	r3, #0
 800324e:	d1c6      	bne.n	80031de <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003250:	697a      	ldr	r2, [r7, #20]
 8003252:	6839      	ldr	r1, [r7, #0]
 8003254:	68f8      	ldr	r0, [r7, #12]
 8003256:	f000 fa4b 	bl	80036f0 <SPI_EndRxTransaction>
 800325a:	4603      	mov	r3, r0
 800325c:	2b00      	cmp	r3, #0
 800325e:	d002      	beq.n	8003266 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	2220      	movs	r2, #32
 8003264:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	2201      	movs	r2, #1
 800326a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	2200      	movs	r2, #0
 8003272:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800327a:	2b00      	cmp	r3, #0
 800327c:	d001      	beq.n	8003282 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800327e:	2301      	movs	r3, #1
 8003280:	e000      	b.n	8003284 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8003282:	2300      	movs	r3, #0
  }
}
 8003284:	4618      	mov	r0, r3
 8003286:	3718      	adds	r7, #24
 8003288:	46bd      	mov	sp, r7
 800328a:	bd80      	pop	{r7, pc}

0800328c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800328c:	b580      	push	{r7, lr}
 800328e:	b08a      	sub	sp, #40	@ 0x28
 8003290:	af00      	add	r7, sp, #0
 8003292:	60f8      	str	r0, [r7, #12]
 8003294:	60b9      	str	r1, [r7, #8]
 8003296:	607a      	str	r2, [r7, #4]
 8003298:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800329a:	2301      	movs	r3, #1
 800329c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800329e:	f7fe fd45 	bl	8001d2c <HAL_GetTick>
 80032a2:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80032aa:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	685b      	ldr	r3, [r3, #4]
 80032b0:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80032b2:	887b      	ldrh	r3, [r7, #2]
 80032b4:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80032b6:	7ffb      	ldrb	r3, [r7, #31]
 80032b8:	2b01      	cmp	r3, #1
 80032ba:	d00c      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x4a>
 80032bc:	69bb      	ldr	r3, [r7, #24]
 80032be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032c2:	d106      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80032c4:	68fb      	ldr	r3, [r7, #12]
 80032c6:	689b      	ldr	r3, [r3, #8]
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d102      	bne.n	80032d2 <HAL_SPI_TransmitReceive+0x46>
 80032cc:	7ffb      	ldrb	r3, [r7, #31]
 80032ce:	2b04      	cmp	r3, #4
 80032d0:	d001      	beq.n	80032d6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80032d2:	2302      	movs	r3, #2
 80032d4:	e17f      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80032d6:	68bb      	ldr	r3, [r7, #8]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d005      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x5c>
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2b00      	cmp	r3, #0
 80032e0:	d002      	beq.n	80032e8 <HAL_SPI_TransmitReceive+0x5c>
 80032e2:	887b      	ldrh	r3, [r7, #2]
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d101      	bne.n	80032ec <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80032e8:	2301      	movs	r3, #1
 80032ea:	e174      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80032f2:	2b01      	cmp	r3, #1
 80032f4:	d101      	bne.n	80032fa <HAL_SPI_TransmitReceive+0x6e>
 80032f6:	2302      	movs	r3, #2
 80032f8:	e16d      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2201      	movs	r2, #1
 80032fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003308:	b2db      	uxtb	r3, r3
 800330a:	2b04      	cmp	r3, #4
 800330c:	d003      	beq.n	8003316 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	2205      	movs	r2, #5
 8003312:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	2200      	movs	r2, #0
 800331a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	687a      	ldr	r2, [r7, #4]
 8003320:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	887a      	ldrh	r2, [r7, #2]
 8003326:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	68ba      	ldr	r2, [r7, #8]
 8003332:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	887a      	ldrh	r2, [r7, #2]
 8003338:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	887a      	ldrh	r2, [r7, #2]
 800333e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2200      	movs	r2, #0
 8003344:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003346:	68fb      	ldr	r3, [r7, #12]
 8003348:	2200      	movs	r2, #0
 800334a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003356:	2b40      	cmp	r3, #64	@ 0x40
 8003358:	d007      	beq.n	800336a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	681a      	ldr	r2, [r3, #0]
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	681b      	ldr	r3, [r3, #0]
 8003364:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003368:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	68db      	ldr	r3, [r3, #12]
 800336e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003372:	d17e      	bne.n	8003472 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	2b00      	cmp	r3, #0
 800337a:	d002      	beq.n	8003382 <HAL_SPI_TransmitReceive+0xf6>
 800337c:	8afb      	ldrh	r3, [r7, #22]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d16c      	bne.n	800345c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003386:	881a      	ldrh	r2, [r3, #0]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003392:	1c9a      	adds	r2, r3, #2
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800339c:	b29b      	uxth	r3, r3
 800339e:	3b01      	subs	r3, #1
 80033a0:	b29a      	uxth	r2, r3
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80033a6:	e059      	b.n	800345c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	f003 0302 	and.w	r3, r3, #2
 80033b2:	2b02      	cmp	r3, #2
 80033b4:	d11b      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x162>
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033ba:	b29b      	uxth	r3, r3
 80033bc:	2b00      	cmp	r3, #0
 80033be:	d016      	beq.n	80033ee <HAL_SPI_TransmitReceive+0x162>
 80033c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033c2:	2b01      	cmp	r3, #1
 80033c4:	d113      	bne.n	80033ee <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033ca:	881a      	ldrh	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80033d6:	1c9a      	adds	r2, r3, #2
 80033d8:	68fb      	ldr	r3, [r7, #12]
 80033da:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80033e0:	b29b      	uxth	r3, r3
 80033e2:	3b01      	subs	r3, #1
 80033e4:	b29a      	uxth	r2, r3
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80033ea:	2300      	movs	r3, #0
 80033ec:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	689b      	ldr	r3, [r3, #8]
 80033f4:	f003 0301 	and.w	r3, r3, #1
 80033f8:	2b01      	cmp	r3, #1
 80033fa:	d119      	bne.n	8003430 <HAL_SPI_TransmitReceive+0x1a4>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003400:	b29b      	uxth	r3, r3
 8003402:	2b00      	cmp	r3, #0
 8003404:	d014      	beq.n	8003430 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	68da      	ldr	r2, [r3, #12]
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003410:	b292      	uxth	r2, r2
 8003412:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003418:	1c9a      	adds	r2, r3, #2
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003422:	b29b      	uxth	r3, r3
 8003424:	3b01      	subs	r3, #1
 8003426:	b29a      	uxth	r2, r3
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800342c:	2301      	movs	r3, #1
 800342e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003430:	f7fe fc7c 	bl	8001d2c <HAL_GetTick>
 8003434:	4602      	mov	r2, r0
 8003436:	6a3b      	ldr	r3, [r7, #32]
 8003438:	1ad3      	subs	r3, r2, r3
 800343a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800343c:	429a      	cmp	r2, r3
 800343e:	d80d      	bhi.n	800345c <HAL_SPI_TransmitReceive+0x1d0>
 8003440:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003442:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003446:	d009      	beq.n	800345c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	2201      	movs	r2, #1
 800344c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	2200      	movs	r2, #0
 8003454:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e0bc      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003460:	b29b      	uxth	r3, r3
 8003462:	2b00      	cmp	r3, #0
 8003464:	d1a0      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x11c>
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800346a:	b29b      	uxth	r3, r3
 800346c:	2b00      	cmp	r3, #0
 800346e:	d19b      	bne.n	80033a8 <HAL_SPI_TransmitReceive+0x11c>
 8003470:	e082      	b.n	8003578 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	685b      	ldr	r3, [r3, #4]
 8003476:	2b00      	cmp	r3, #0
 8003478:	d002      	beq.n	8003480 <HAL_SPI_TransmitReceive+0x1f4>
 800347a:	8afb      	ldrh	r3, [r7, #22]
 800347c:	2b01      	cmp	r3, #1
 800347e:	d171      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	330c      	adds	r3, #12
 800348a:	7812      	ldrb	r2, [r2, #0]
 800348c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003492:	1c5a      	adds	r2, r3, #1
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800349c:	b29b      	uxth	r3, r3
 800349e:	3b01      	subs	r3, #1
 80034a0:	b29a      	uxth	r2, r3
 80034a2:	68fb      	ldr	r3, [r7, #12]
 80034a4:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80034a6:	e05d      	b.n	8003564 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	689b      	ldr	r3, [r3, #8]
 80034ae:	f003 0302 	and.w	r3, r3, #2
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d11c      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x264>
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034ba:	b29b      	uxth	r3, r3
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d017      	beq.n	80034f0 <HAL_SPI_TransmitReceive+0x264>
 80034c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034c2:	2b01      	cmp	r3, #1
 80034c4:	d114      	bne.n	80034f0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	330c      	adds	r3, #12
 80034d0:	7812      	ldrb	r2, [r2, #0]
 80034d2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80034e2:	b29b      	uxth	r3, r3
 80034e4:	3b01      	subs	r3, #1
 80034e6:	b29a      	uxth	r2, r3
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f003 0301 	and.w	r3, r3, #1
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d119      	bne.n	8003532 <HAL_SPI_TransmitReceive+0x2a6>
 80034fe:	68fb      	ldr	r3, [r7, #12]
 8003500:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003502:	b29b      	uxth	r3, r3
 8003504:	2b00      	cmp	r3, #0
 8003506:	d014      	beq.n	8003532 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	68da      	ldr	r2, [r3, #12]
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003512:	b2d2      	uxtb	r2, r2
 8003514:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800351a:	1c5a      	adds	r2, r3, #1
 800351c:	68fb      	ldr	r3, [r7, #12]
 800351e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003524:	b29b      	uxth	r3, r3
 8003526:	3b01      	subs	r3, #1
 8003528:	b29a      	uxth	r2, r3
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800352e:	2301      	movs	r3, #1
 8003530:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003532:	f7fe fbfb 	bl	8001d2c <HAL_GetTick>
 8003536:	4602      	mov	r2, r0
 8003538:	6a3b      	ldr	r3, [r7, #32]
 800353a:	1ad3      	subs	r3, r2, r3
 800353c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800353e:	429a      	cmp	r2, r3
 8003540:	d803      	bhi.n	800354a <HAL_SPI_TransmitReceive+0x2be>
 8003542:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003544:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003548:	d102      	bne.n	8003550 <HAL_SPI_TransmitReceive+0x2c4>
 800354a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800354c:	2b00      	cmp	r3, #0
 800354e:	d109      	bne.n	8003564 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	2200      	movs	r2, #0
 800355c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003560:	2303      	movs	r3, #3
 8003562:	e038      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003568:	b29b      	uxth	r3, r3
 800356a:	2b00      	cmp	r3, #0
 800356c:	d19c      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x21c>
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003572:	b29b      	uxth	r3, r3
 8003574:	2b00      	cmp	r3, #0
 8003576:	d197      	bne.n	80034a8 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003578:	6a3a      	ldr	r2, [r7, #32]
 800357a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800357c:	68f8      	ldr	r0, [r7, #12]
 800357e:	f000 f91d 	bl	80037bc <SPI_EndRxTxTransaction>
 8003582:	4603      	mov	r3, r0
 8003584:	2b00      	cmp	r3, #0
 8003586:	d008      	beq.n	800359a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003588:	68fb      	ldr	r3, [r7, #12]
 800358a:	2220      	movs	r2, #32
 800358c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	2200      	movs	r2, #0
 8003592:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003596:	2301      	movs	r3, #1
 8003598:	e01d      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	689b      	ldr	r3, [r3, #8]
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d10a      	bne.n	80035b8 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80035a2:	2300      	movs	r3, #0
 80035a4:	613b      	str	r3, [r7, #16]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	68db      	ldr	r3, [r3, #12]
 80035ac:	613b      	str	r3, [r7, #16]
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	613b      	str	r3, [r7, #16]
 80035b6:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	2200      	movs	r2, #0
 80035c4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80035cc:	2b00      	cmp	r3, #0
 80035ce:	d001      	beq.n	80035d4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80035d0:	2301      	movs	r3, #1
 80035d2:	e000      	b.n	80035d6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80035d4:	2300      	movs	r3, #0
  }
}
 80035d6:	4618      	mov	r0, r3
 80035d8:	3728      	adds	r7, #40	@ 0x28
 80035da:	46bd      	mov	sp, r7
 80035dc:	bd80      	pop	{r7, pc}
	...

080035e0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80035e0:	b580      	push	{r7, lr}
 80035e2:	b088      	sub	sp, #32
 80035e4:	af00      	add	r7, sp, #0
 80035e6:	60f8      	str	r0, [r7, #12]
 80035e8:	60b9      	str	r1, [r7, #8]
 80035ea:	603b      	str	r3, [r7, #0]
 80035ec:	4613      	mov	r3, r2
 80035ee:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80035f0:	f7fe fb9c 	bl	8001d2c <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80035f8:	1a9b      	subs	r3, r3, r2
 80035fa:	683a      	ldr	r2, [r7, #0]
 80035fc:	4413      	add	r3, r2
 80035fe:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003600:	f7fe fb94 	bl	8001d2c <HAL_GetTick>
 8003604:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003606:	4b39      	ldr	r3, [pc, #228]	@ (80036ec <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	015b      	lsls	r3, r3, #5
 800360c:	0d1b      	lsrs	r3, r3, #20
 800360e:	69fa      	ldr	r2, [r7, #28]
 8003610:	fb02 f303 	mul.w	r3, r2, r3
 8003614:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003616:	e055      	b.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003618:	683b      	ldr	r3, [r7, #0]
 800361a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800361e:	d051      	beq.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003620:	f7fe fb84 	bl	8001d2c <HAL_GetTick>
 8003624:	4602      	mov	r2, r0
 8003626:	69bb      	ldr	r3, [r7, #24]
 8003628:	1ad3      	subs	r3, r2, r3
 800362a:	69fa      	ldr	r2, [r7, #28]
 800362c:	429a      	cmp	r2, r3
 800362e:	d902      	bls.n	8003636 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003630:	69fb      	ldr	r3, [r7, #28]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d13d      	bne.n	80036b2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	685a      	ldr	r2, [r3, #4]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003644:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	685b      	ldr	r3, [r3, #4]
 800364a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800364e:	d111      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	689b      	ldr	r3, [r3, #8]
 8003654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003658:	d004      	beq.n	8003664 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	689b      	ldr	r3, [r3, #8]
 800365e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003662:	d107      	bne.n	8003674 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681a      	ldr	r2, [r3, #0]
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003672:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003678:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800367c:	d10f      	bne.n	800369e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	681a      	ldr	r2, [r3, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800368c:	601a      	str	r2, [r3, #0]
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	681a      	ldr	r2, [r3, #0]
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	681b      	ldr	r3, [r3, #0]
 8003698:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800369c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800369e:	68fb      	ldr	r3, [r7, #12]
 80036a0:	2201      	movs	r2, #1
 80036a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80036a6:	68fb      	ldr	r3, [r7, #12]
 80036a8:	2200      	movs	r2, #0
 80036aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80036ae:	2303      	movs	r3, #3
 80036b0:	e018      	b.n	80036e4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d102      	bne.n	80036be <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80036b8:	2300      	movs	r3, #0
 80036ba:	61fb      	str	r3, [r7, #28]
 80036bc:	e002      	b.n	80036c4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	3b01      	subs	r3, #1
 80036c2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	689a      	ldr	r2, [r3, #8]
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	4013      	ands	r3, r2
 80036ce:	68ba      	ldr	r2, [r7, #8]
 80036d0:	429a      	cmp	r2, r3
 80036d2:	bf0c      	ite	eq
 80036d4:	2301      	moveq	r3, #1
 80036d6:	2300      	movne	r3, #0
 80036d8:	b2db      	uxtb	r3, r3
 80036da:	461a      	mov	r2, r3
 80036dc:	79fb      	ldrb	r3, [r7, #7]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d19a      	bne.n	8003618 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80036e2:	2300      	movs	r3, #0
}
 80036e4:	4618      	mov	r0, r3
 80036e6:	3720      	adds	r7, #32
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	20000000 	.word	0x20000000

080036f0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80036f0:	b580      	push	{r7, lr}
 80036f2:	b086      	sub	sp, #24
 80036f4:	af02      	add	r7, sp, #8
 80036f6:	60f8      	str	r0, [r7, #12]
 80036f8:	60b9      	str	r1, [r7, #8]
 80036fa:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	685b      	ldr	r3, [r3, #4]
 8003700:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003704:	d111      	bne.n	800372a <SPI_EndRxTransaction+0x3a>
 8003706:	68fb      	ldr	r3, [r7, #12]
 8003708:	689b      	ldr	r3, [r3, #8]
 800370a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800370e:	d004      	beq.n	800371a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	689b      	ldr	r3, [r3, #8]
 8003714:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003718:	d107      	bne.n	800372a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800371a:	68fb      	ldr	r3, [r7, #12]
 800371c:	681b      	ldr	r3, [r3, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003728:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	685b      	ldr	r3, [r3, #4]
 800372e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003732:	d12a      	bne.n	800378a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8003734:	68fb      	ldr	r3, [r7, #12]
 8003736:	689b      	ldr	r3, [r3, #8]
 8003738:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800373c:	d012      	beq.n	8003764 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800373e:	687b      	ldr	r3, [r7, #4]
 8003740:	9300      	str	r3, [sp, #0]
 8003742:	68bb      	ldr	r3, [r7, #8]
 8003744:	2200      	movs	r2, #0
 8003746:	2180      	movs	r1, #128	@ 0x80
 8003748:	68f8      	ldr	r0, [r7, #12]
 800374a:	f7ff ff49 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800374e:	4603      	mov	r3, r0
 8003750:	2b00      	cmp	r3, #0
 8003752:	d02d      	beq.n	80037b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003758:	f043 0220 	orr.w	r2, r3, #32
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003760:	2303      	movs	r3, #3
 8003762:	e026      	b.n	80037b2 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	9300      	str	r3, [sp, #0]
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	2200      	movs	r2, #0
 800376c:	2101      	movs	r1, #1
 800376e:	68f8      	ldr	r0, [r7, #12]
 8003770:	f7ff ff36 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 8003774:	4603      	mov	r3, r0
 8003776:	2b00      	cmp	r3, #0
 8003778:	d01a      	beq.n	80037b0 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800377e:	f043 0220 	orr.w	r2, r3, #32
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003786:	2303      	movs	r3, #3
 8003788:	e013      	b.n	80037b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	9300      	str	r3, [sp, #0]
 800378e:	68bb      	ldr	r3, [r7, #8]
 8003790:	2200      	movs	r2, #0
 8003792:	2101      	movs	r1, #1
 8003794:	68f8      	ldr	r0, [r7, #12]
 8003796:	f7ff ff23 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800379a:	4603      	mov	r3, r0
 800379c:	2b00      	cmp	r3, #0
 800379e:	d007      	beq.n	80037b0 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037a0:	68fb      	ldr	r3, [r7, #12]
 80037a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037a4:	f043 0220 	orr.w	r2, r3, #32
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80037ac:	2303      	movs	r3, #3
 80037ae:	e000      	b.n	80037b2 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80037b0:	2300      	movs	r3, #0
}
 80037b2:	4618      	mov	r0, r3
 80037b4:	3710      	adds	r7, #16
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bd80      	pop	{r7, pc}
	...

080037bc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b088      	sub	sp, #32
 80037c0:	af02      	add	r7, sp, #8
 80037c2:	60f8      	str	r0, [r7, #12]
 80037c4:	60b9      	str	r1, [r7, #8]
 80037c6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	9300      	str	r3, [sp, #0]
 80037cc:	68bb      	ldr	r3, [r7, #8]
 80037ce:	2201      	movs	r2, #1
 80037d0:	2102      	movs	r1, #2
 80037d2:	68f8      	ldr	r0, [r7, #12]
 80037d4:	f7ff ff04 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 80037d8:	4603      	mov	r3, r0
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d007      	beq.n	80037ee <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80037de:	68fb      	ldr	r3, [r7, #12]
 80037e0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80037e2:	f043 0220 	orr.w	r2, r3, #32
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80037ea:	2303      	movs	r3, #3
 80037ec:	e032      	b.n	8003854 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80037ee:	4b1b      	ldr	r3, [pc, #108]	@ (800385c <SPI_EndRxTxTransaction+0xa0>)
 80037f0:	681b      	ldr	r3, [r3, #0]
 80037f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003860 <SPI_EndRxTxTransaction+0xa4>)
 80037f4:	fba2 2303 	umull	r2, r3, r2, r3
 80037f8:	0d5b      	lsrs	r3, r3, #21
 80037fa:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80037fe:	fb02 f303 	mul.w	r3, r2, r3
 8003802:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	685b      	ldr	r3, [r3, #4]
 8003808:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800380c:	d112      	bne.n	8003834 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	68bb      	ldr	r3, [r7, #8]
 8003814:	2200      	movs	r2, #0
 8003816:	2180      	movs	r1, #128	@ 0x80
 8003818:	68f8      	ldr	r0, [r7, #12]
 800381a:	f7ff fee1 	bl	80035e0 <SPI_WaitFlagStateUntilTimeout>
 800381e:	4603      	mov	r3, r0
 8003820:	2b00      	cmp	r3, #0
 8003822:	d016      	beq.n	8003852 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003828:	f043 0220 	orr.w	r2, r3, #32
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003830:	2303      	movs	r3, #3
 8003832:	e00f      	b.n	8003854 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003834:	697b      	ldr	r3, [r7, #20]
 8003836:	2b00      	cmp	r3, #0
 8003838:	d00a      	beq.n	8003850 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800383a:	697b      	ldr	r3, [r7, #20]
 800383c:	3b01      	subs	r3, #1
 800383e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	689b      	ldr	r3, [r3, #8]
 8003846:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800384a:	2b80      	cmp	r3, #128	@ 0x80
 800384c:	d0f2      	beq.n	8003834 <SPI_EndRxTxTransaction+0x78>
 800384e:	e000      	b.n	8003852 <SPI_EndRxTxTransaction+0x96>
        break;
 8003850:	bf00      	nop
  }

  return HAL_OK;
 8003852:	2300      	movs	r3, #0
}
 8003854:	4618      	mov	r0, r3
 8003856:	3718      	adds	r7, #24
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	20000000 	.word	0x20000000
 8003860:	165e9f81 	.word	0x165e9f81

08003864 <__cvt>:
 8003864:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003868:	ec57 6b10 	vmov	r6, r7, d0
 800386c:	2f00      	cmp	r7, #0
 800386e:	460c      	mov	r4, r1
 8003870:	4619      	mov	r1, r3
 8003872:	463b      	mov	r3, r7
 8003874:	bfbb      	ittet	lt
 8003876:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 800387a:	461f      	movlt	r7, r3
 800387c:	2300      	movge	r3, #0
 800387e:	232d      	movlt	r3, #45	@ 0x2d
 8003880:	700b      	strb	r3, [r1, #0]
 8003882:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8003884:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8003888:	4691      	mov	r9, r2
 800388a:	f023 0820 	bic.w	r8, r3, #32
 800388e:	bfbc      	itt	lt
 8003890:	4632      	movlt	r2, r6
 8003892:	4616      	movlt	r6, r2
 8003894:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8003898:	d005      	beq.n	80038a6 <__cvt+0x42>
 800389a:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800389e:	d100      	bne.n	80038a2 <__cvt+0x3e>
 80038a0:	3401      	adds	r4, #1
 80038a2:	2102      	movs	r1, #2
 80038a4:	e000      	b.n	80038a8 <__cvt+0x44>
 80038a6:	2103      	movs	r1, #3
 80038a8:	ab03      	add	r3, sp, #12
 80038aa:	9301      	str	r3, [sp, #4]
 80038ac:	ab02      	add	r3, sp, #8
 80038ae:	9300      	str	r3, [sp, #0]
 80038b0:	ec47 6b10 	vmov	d0, r6, r7
 80038b4:	4653      	mov	r3, sl
 80038b6:	4622      	mov	r2, r4
 80038b8:	f000 ff3e 	bl	8004738 <_dtoa_r>
 80038bc:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 80038c0:	4605      	mov	r5, r0
 80038c2:	d119      	bne.n	80038f8 <__cvt+0x94>
 80038c4:	f019 0f01 	tst.w	r9, #1
 80038c8:	d00e      	beq.n	80038e8 <__cvt+0x84>
 80038ca:	eb00 0904 	add.w	r9, r0, r4
 80038ce:	2200      	movs	r2, #0
 80038d0:	2300      	movs	r3, #0
 80038d2:	4630      	mov	r0, r6
 80038d4:	4639      	mov	r1, r7
 80038d6:	f7fd f907 	bl	8000ae8 <__aeabi_dcmpeq>
 80038da:	b108      	cbz	r0, 80038e0 <__cvt+0x7c>
 80038dc:	f8cd 900c 	str.w	r9, [sp, #12]
 80038e0:	2230      	movs	r2, #48	@ 0x30
 80038e2:	9b03      	ldr	r3, [sp, #12]
 80038e4:	454b      	cmp	r3, r9
 80038e6:	d31e      	bcc.n	8003926 <__cvt+0xc2>
 80038e8:	9b03      	ldr	r3, [sp, #12]
 80038ea:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80038ec:	1b5b      	subs	r3, r3, r5
 80038ee:	4628      	mov	r0, r5
 80038f0:	6013      	str	r3, [r2, #0]
 80038f2:	b004      	add	sp, #16
 80038f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80038f8:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80038fc:	eb00 0904 	add.w	r9, r0, r4
 8003900:	d1e5      	bne.n	80038ce <__cvt+0x6a>
 8003902:	7803      	ldrb	r3, [r0, #0]
 8003904:	2b30      	cmp	r3, #48	@ 0x30
 8003906:	d10a      	bne.n	800391e <__cvt+0xba>
 8003908:	2200      	movs	r2, #0
 800390a:	2300      	movs	r3, #0
 800390c:	4630      	mov	r0, r6
 800390e:	4639      	mov	r1, r7
 8003910:	f7fd f8ea 	bl	8000ae8 <__aeabi_dcmpeq>
 8003914:	b918      	cbnz	r0, 800391e <__cvt+0xba>
 8003916:	f1c4 0401 	rsb	r4, r4, #1
 800391a:	f8ca 4000 	str.w	r4, [sl]
 800391e:	f8da 3000 	ldr.w	r3, [sl]
 8003922:	4499      	add	r9, r3
 8003924:	e7d3      	b.n	80038ce <__cvt+0x6a>
 8003926:	1c59      	adds	r1, r3, #1
 8003928:	9103      	str	r1, [sp, #12]
 800392a:	701a      	strb	r2, [r3, #0]
 800392c:	e7d9      	b.n	80038e2 <__cvt+0x7e>

0800392e <__exponent>:
 800392e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003930:	2900      	cmp	r1, #0
 8003932:	bfba      	itte	lt
 8003934:	4249      	neglt	r1, r1
 8003936:	232d      	movlt	r3, #45	@ 0x2d
 8003938:	232b      	movge	r3, #43	@ 0x2b
 800393a:	2909      	cmp	r1, #9
 800393c:	7002      	strb	r2, [r0, #0]
 800393e:	7043      	strb	r3, [r0, #1]
 8003940:	dd29      	ble.n	8003996 <__exponent+0x68>
 8003942:	f10d 0307 	add.w	r3, sp, #7
 8003946:	461d      	mov	r5, r3
 8003948:	270a      	movs	r7, #10
 800394a:	461a      	mov	r2, r3
 800394c:	fbb1 f6f7 	udiv	r6, r1, r7
 8003950:	fb07 1416 	mls	r4, r7, r6, r1
 8003954:	3430      	adds	r4, #48	@ 0x30
 8003956:	f802 4c01 	strb.w	r4, [r2, #-1]
 800395a:	460c      	mov	r4, r1
 800395c:	2c63      	cmp	r4, #99	@ 0x63
 800395e:	f103 33ff 	add.w	r3, r3, #4294967295
 8003962:	4631      	mov	r1, r6
 8003964:	dcf1      	bgt.n	800394a <__exponent+0x1c>
 8003966:	3130      	adds	r1, #48	@ 0x30
 8003968:	1e94      	subs	r4, r2, #2
 800396a:	f803 1c01 	strb.w	r1, [r3, #-1]
 800396e:	1c41      	adds	r1, r0, #1
 8003970:	4623      	mov	r3, r4
 8003972:	42ab      	cmp	r3, r5
 8003974:	d30a      	bcc.n	800398c <__exponent+0x5e>
 8003976:	f10d 0309 	add.w	r3, sp, #9
 800397a:	1a9b      	subs	r3, r3, r2
 800397c:	42ac      	cmp	r4, r5
 800397e:	bf88      	it	hi
 8003980:	2300      	movhi	r3, #0
 8003982:	3302      	adds	r3, #2
 8003984:	4403      	add	r3, r0
 8003986:	1a18      	subs	r0, r3, r0
 8003988:	b003      	add	sp, #12
 800398a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800398c:	f813 6b01 	ldrb.w	r6, [r3], #1
 8003990:	f801 6f01 	strb.w	r6, [r1, #1]!
 8003994:	e7ed      	b.n	8003972 <__exponent+0x44>
 8003996:	2330      	movs	r3, #48	@ 0x30
 8003998:	3130      	adds	r1, #48	@ 0x30
 800399a:	7083      	strb	r3, [r0, #2]
 800399c:	70c1      	strb	r1, [r0, #3]
 800399e:	1d03      	adds	r3, r0, #4
 80039a0:	e7f1      	b.n	8003986 <__exponent+0x58>
	...

080039a4 <_printf_float>:
 80039a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80039a8:	b08d      	sub	sp, #52	@ 0x34
 80039aa:	460c      	mov	r4, r1
 80039ac:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 80039b0:	4616      	mov	r6, r2
 80039b2:	461f      	mov	r7, r3
 80039b4:	4605      	mov	r5, r0
 80039b6:	f000 fdbd 	bl	8004534 <_localeconv_r>
 80039ba:	6803      	ldr	r3, [r0, #0]
 80039bc:	9304      	str	r3, [sp, #16]
 80039be:	4618      	mov	r0, r3
 80039c0:	f7fc fc66 	bl	8000290 <strlen>
 80039c4:	2300      	movs	r3, #0
 80039c6:	930a      	str	r3, [sp, #40]	@ 0x28
 80039c8:	f8d8 3000 	ldr.w	r3, [r8]
 80039cc:	9005      	str	r0, [sp, #20]
 80039ce:	3307      	adds	r3, #7
 80039d0:	f023 0307 	bic.w	r3, r3, #7
 80039d4:	f103 0208 	add.w	r2, r3, #8
 80039d8:	f894 a018 	ldrb.w	sl, [r4, #24]
 80039dc:	f8d4 b000 	ldr.w	fp, [r4]
 80039e0:	f8c8 2000 	str.w	r2, [r8]
 80039e4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80039e8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80039ec:	9307      	str	r3, [sp, #28]
 80039ee:	f8cd 8018 	str.w	r8, [sp, #24]
 80039f2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80039f6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80039fa:	4b9c      	ldr	r3, [pc, #624]	@ (8003c6c <_printf_float+0x2c8>)
 80039fc:	f04f 32ff 	mov.w	r2, #4294967295
 8003a00:	f7fd f8a4 	bl	8000b4c <__aeabi_dcmpun>
 8003a04:	bb70      	cbnz	r0, 8003a64 <_printf_float+0xc0>
 8003a06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8003a0a:	4b98      	ldr	r3, [pc, #608]	@ (8003c6c <_printf_float+0x2c8>)
 8003a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8003a10:	f7fd f87e 	bl	8000b10 <__aeabi_dcmple>
 8003a14:	bb30      	cbnz	r0, 8003a64 <_printf_float+0xc0>
 8003a16:	2200      	movs	r2, #0
 8003a18:	2300      	movs	r3, #0
 8003a1a:	4640      	mov	r0, r8
 8003a1c:	4649      	mov	r1, r9
 8003a1e:	f7fd f86d 	bl	8000afc <__aeabi_dcmplt>
 8003a22:	b110      	cbz	r0, 8003a2a <_printf_float+0x86>
 8003a24:	232d      	movs	r3, #45	@ 0x2d
 8003a26:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003a2a:	4a91      	ldr	r2, [pc, #580]	@ (8003c70 <_printf_float+0x2cc>)
 8003a2c:	4b91      	ldr	r3, [pc, #580]	@ (8003c74 <_printf_float+0x2d0>)
 8003a2e:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8003a32:	bf8c      	ite	hi
 8003a34:	4690      	movhi	r8, r2
 8003a36:	4698      	movls	r8, r3
 8003a38:	2303      	movs	r3, #3
 8003a3a:	6123      	str	r3, [r4, #16]
 8003a3c:	f02b 0304 	bic.w	r3, fp, #4
 8003a40:	6023      	str	r3, [r4, #0]
 8003a42:	f04f 0900 	mov.w	r9, #0
 8003a46:	9700      	str	r7, [sp, #0]
 8003a48:	4633      	mov	r3, r6
 8003a4a:	aa0b      	add	r2, sp, #44	@ 0x2c
 8003a4c:	4621      	mov	r1, r4
 8003a4e:	4628      	mov	r0, r5
 8003a50:	f000 f9d2 	bl	8003df8 <_printf_common>
 8003a54:	3001      	adds	r0, #1
 8003a56:	f040 808d 	bne.w	8003b74 <_printf_float+0x1d0>
 8003a5a:	f04f 30ff 	mov.w	r0, #4294967295
 8003a5e:	b00d      	add	sp, #52	@ 0x34
 8003a60:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003a64:	4642      	mov	r2, r8
 8003a66:	464b      	mov	r3, r9
 8003a68:	4640      	mov	r0, r8
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	f7fd f86e 	bl	8000b4c <__aeabi_dcmpun>
 8003a70:	b140      	cbz	r0, 8003a84 <_printf_float+0xe0>
 8003a72:	464b      	mov	r3, r9
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	bfbc      	itt	lt
 8003a78:	232d      	movlt	r3, #45	@ 0x2d
 8003a7a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8003a7e:	4a7e      	ldr	r2, [pc, #504]	@ (8003c78 <_printf_float+0x2d4>)
 8003a80:	4b7e      	ldr	r3, [pc, #504]	@ (8003c7c <_printf_float+0x2d8>)
 8003a82:	e7d4      	b.n	8003a2e <_printf_float+0x8a>
 8003a84:	6863      	ldr	r3, [r4, #4]
 8003a86:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8003a8a:	9206      	str	r2, [sp, #24]
 8003a8c:	1c5a      	adds	r2, r3, #1
 8003a8e:	d13b      	bne.n	8003b08 <_printf_float+0x164>
 8003a90:	2306      	movs	r3, #6
 8003a92:	6063      	str	r3, [r4, #4]
 8003a94:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8003a98:	2300      	movs	r3, #0
 8003a9a:	6022      	str	r2, [r4, #0]
 8003a9c:	9303      	str	r3, [sp, #12]
 8003a9e:	ab0a      	add	r3, sp, #40	@ 0x28
 8003aa0:	e9cd a301 	strd	sl, r3, [sp, #4]
 8003aa4:	ab09      	add	r3, sp, #36	@ 0x24
 8003aa6:	9300      	str	r3, [sp, #0]
 8003aa8:	6861      	ldr	r1, [r4, #4]
 8003aaa:	ec49 8b10 	vmov	d0, r8, r9
 8003aae:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8003ab2:	4628      	mov	r0, r5
 8003ab4:	f7ff fed6 	bl	8003864 <__cvt>
 8003ab8:	9b06      	ldr	r3, [sp, #24]
 8003aba:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8003abc:	2b47      	cmp	r3, #71	@ 0x47
 8003abe:	4680      	mov	r8, r0
 8003ac0:	d129      	bne.n	8003b16 <_printf_float+0x172>
 8003ac2:	1cc8      	adds	r0, r1, #3
 8003ac4:	db02      	blt.n	8003acc <_printf_float+0x128>
 8003ac6:	6863      	ldr	r3, [r4, #4]
 8003ac8:	4299      	cmp	r1, r3
 8003aca:	dd41      	ble.n	8003b50 <_printf_float+0x1ac>
 8003acc:	f1aa 0a02 	sub.w	sl, sl, #2
 8003ad0:	fa5f fa8a 	uxtb.w	sl, sl
 8003ad4:	3901      	subs	r1, #1
 8003ad6:	4652      	mov	r2, sl
 8003ad8:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8003adc:	9109      	str	r1, [sp, #36]	@ 0x24
 8003ade:	f7ff ff26 	bl	800392e <__exponent>
 8003ae2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8003ae4:	1813      	adds	r3, r2, r0
 8003ae6:	2a01      	cmp	r2, #1
 8003ae8:	4681      	mov	r9, r0
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	dc02      	bgt.n	8003af4 <_printf_float+0x150>
 8003aee:	6822      	ldr	r2, [r4, #0]
 8003af0:	07d2      	lsls	r2, r2, #31
 8003af2:	d501      	bpl.n	8003af8 <_printf_float+0x154>
 8003af4:	3301      	adds	r3, #1
 8003af6:	6123      	str	r3, [r4, #16]
 8003af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8003afc:	2b00      	cmp	r3, #0
 8003afe:	d0a2      	beq.n	8003a46 <_printf_float+0xa2>
 8003b00:	232d      	movs	r3, #45	@ 0x2d
 8003b02:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003b06:	e79e      	b.n	8003a46 <_printf_float+0xa2>
 8003b08:	9a06      	ldr	r2, [sp, #24]
 8003b0a:	2a47      	cmp	r2, #71	@ 0x47
 8003b0c:	d1c2      	bne.n	8003a94 <_printf_float+0xf0>
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d1c0      	bne.n	8003a94 <_printf_float+0xf0>
 8003b12:	2301      	movs	r3, #1
 8003b14:	e7bd      	b.n	8003a92 <_printf_float+0xee>
 8003b16:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b1a:	d9db      	bls.n	8003ad4 <_printf_float+0x130>
 8003b1c:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8003b20:	d118      	bne.n	8003b54 <_printf_float+0x1b0>
 8003b22:	2900      	cmp	r1, #0
 8003b24:	6863      	ldr	r3, [r4, #4]
 8003b26:	dd0b      	ble.n	8003b40 <_printf_float+0x19c>
 8003b28:	6121      	str	r1, [r4, #16]
 8003b2a:	b913      	cbnz	r3, 8003b32 <_printf_float+0x18e>
 8003b2c:	6822      	ldr	r2, [r4, #0]
 8003b2e:	07d0      	lsls	r0, r2, #31
 8003b30:	d502      	bpl.n	8003b38 <_printf_float+0x194>
 8003b32:	3301      	adds	r3, #1
 8003b34:	440b      	add	r3, r1
 8003b36:	6123      	str	r3, [r4, #16]
 8003b38:	65a1      	str	r1, [r4, #88]	@ 0x58
 8003b3a:	f04f 0900 	mov.w	r9, #0
 8003b3e:	e7db      	b.n	8003af8 <_printf_float+0x154>
 8003b40:	b913      	cbnz	r3, 8003b48 <_printf_float+0x1a4>
 8003b42:	6822      	ldr	r2, [r4, #0]
 8003b44:	07d2      	lsls	r2, r2, #31
 8003b46:	d501      	bpl.n	8003b4c <_printf_float+0x1a8>
 8003b48:	3302      	adds	r3, #2
 8003b4a:	e7f4      	b.n	8003b36 <_printf_float+0x192>
 8003b4c:	2301      	movs	r3, #1
 8003b4e:	e7f2      	b.n	8003b36 <_printf_float+0x192>
 8003b50:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8003b54:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8003b56:	4299      	cmp	r1, r3
 8003b58:	db05      	blt.n	8003b66 <_printf_float+0x1c2>
 8003b5a:	6823      	ldr	r3, [r4, #0]
 8003b5c:	6121      	str	r1, [r4, #16]
 8003b5e:	07d8      	lsls	r0, r3, #31
 8003b60:	d5ea      	bpl.n	8003b38 <_printf_float+0x194>
 8003b62:	1c4b      	adds	r3, r1, #1
 8003b64:	e7e7      	b.n	8003b36 <_printf_float+0x192>
 8003b66:	2900      	cmp	r1, #0
 8003b68:	bfd4      	ite	le
 8003b6a:	f1c1 0202 	rsble	r2, r1, #2
 8003b6e:	2201      	movgt	r2, #1
 8003b70:	4413      	add	r3, r2
 8003b72:	e7e0      	b.n	8003b36 <_printf_float+0x192>
 8003b74:	6823      	ldr	r3, [r4, #0]
 8003b76:	055a      	lsls	r2, r3, #21
 8003b78:	d407      	bmi.n	8003b8a <_printf_float+0x1e6>
 8003b7a:	6923      	ldr	r3, [r4, #16]
 8003b7c:	4642      	mov	r2, r8
 8003b7e:	4631      	mov	r1, r6
 8003b80:	4628      	mov	r0, r5
 8003b82:	47b8      	blx	r7
 8003b84:	3001      	adds	r0, #1
 8003b86:	d12b      	bne.n	8003be0 <_printf_float+0x23c>
 8003b88:	e767      	b.n	8003a5a <_printf_float+0xb6>
 8003b8a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8003b8e:	f240 80dd 	bls.w	8003d4c <_printf_float+0x3a8>
 8003b92:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003b96:	2200      	movs	r2, #0
 8003b98:	2300      	movs	r3, #0
 8003b9a:	f7fc ffa5 	bl	8000ae8 <__aeabi_dcmpeq>
 8003b9e:	2800      	cmp	r0, #0
 8003ba0:	d033      	beq.n	8003c0a <_printf_float+0x266>
 8003ba2:	4a37      	ldr	r2, [pc, #220]	@ (8003c80 <_printf_float+0x2dc>)
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	4631      	mov	r1, r6
 8003ba8:	4628      	mov	r0, r5
 8003baa:	47b8      	blx	r7
 8003bac:	3001      	adds	r0, #1
 8003bae:	f43f af54 	beq.w	8003a5a <_printf_float+0xb6>
 8003bb2:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8003bb6:	4543      	cmp	r3, r8
 8003bb8:	db02      	blt.n	8003bc0 <_printf_float+0x21c>
 8003bba:	6823      	ldr	r3, [r4, #0]
 8003bbc:	07d8      	lsls	r0, r3, #31
 8003bbe:	d50f      	bpl.n	8003be0 <_printf_float+0x23c>
 8003bc0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003bc4:	4631      	mov	r1, r6
 8003bc6:	4628      	mov	r0, r5
 8003bc8:	47b8      	blx	r7
 8003bca:	3001      	adds	r0, #1
 8003bcc:	f43f af45 	beq.w	8003a5a <_printf_float+0xb6>
 8003bd0:	f04f 0900 	mov.w	r9, #0
 8003bd4:	f108 38ff 	add.w	r8, r8, #4294967295
 8003bd8:	f104 0a1a 	add.w	sl, r4, #26
 8003bdc:	45c8      	cmp	r8, r9
 8003bde:	dc09      	bgt.n	8003bf4 <_printf_float+0x250>
 8003be0:	6823      	ldr	r3, [r4, #0]
 8003be2:	079b      	lsls	r3, r3, #30
 8003be4:	f100 8103 	bmi.w	8003dee <_printf_float+0x44a>
 8003be8:	68e0      	ldr	r0, [r4, #12]
 8003bea:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8003bec:	4298      	cmp	r0, r3
 8003bee:	bfb8      	it	lt
 8003bf0:	4618      	movlt	r0, r3
 8003bf2:	e734      	b.n	8003a5e <_printf_float+0xba>
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	4652      	mov	r2, sl
 8003bf8:	4631      	mov	r1, r6
 8003bfa:	4628      	mov	r0, r5
 8003bfc:	47b8      	blx	r7
 8003bfe:	3001      	adds	r0, #1
 8003c00:	f43f af2b 	beq.w	8003a5a <_printf_float+0xb6>
 8003c04:	f109 0901 	add.w	r9, r9, #1
 8003c08:	e7e8      	b.n	8003bdc <_printf_float+0x238>
 8003c0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	dc39      	bgt.n	8003c84 <_printf_float+0x2e0>
 8003c10:	4a1b      	ldr	r2, [pc, #108]	@ (8003c80 <_printf_float+0x2dc>)
 8003c12:	2301      	movs	r3, #1
 8003c14:	4631      	mov	r1, r6
 8003c16:	4628      	mov	r0, r5
 8003c18:	47b8      	blx	r7
 8003c1a:	3001      	adds	r0, #1
 8003c1c:	f43f af1d 	beq.w	8003a5a <_printf_float+0xb6>
 8003c20:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8003c24:	ea59 0303 	orrs.w	r3, r9, r3
 8003c28:	d102      	bne.n	8003c30 <_printf_float+0x28c>
 8003c2a:	6823      	ldr	r3, [r4, #0]
 8003c2c:	07d9      	lsls	r1, r3, #31
 8003c2e:	d5d7      	bpl.n	8003be0 <_printf_float+0x23c>
 8003c30:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003c34:	4631      	mov	r1, r6
 8003c36:	4628      	mov	r0, r5
 8003c38:	47b8      	blx	r7
 8003c3a:	3001      	adds	r0, #1
 8003c3c:	f43f af0d 	beq.w	8003a5a <_printf_float+0xb6>
 8003c40:	f04f 0a00 	mov.w	sl, #0
 8003c44:	f104 0b1a 	add.w	fp, r4, #26
 8003c48:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003c4a:	425b      	negs	r3, r3
 8003c4c:	4553      	cmp	r3, sl
 8003c4e:	dc01      	bgt.n	8003c54 <_printf_float+0x2b0>
 8003c50:	464b      	mov	r3, r9
 8003c52:	e793      	b.n	8003b7c <_printf_float+0x1d8>
 8003c54:	2301      	movs	r3, #1
 8003c56:	465a      	mov	r2, fp
 8003c58:	4631      	mov	r1, r6
 8003c5a:	4628      	mov	r0, r5
 8003c5c:	47b8      	blx	r7
 8003c5e:	3001      	adds	r0, #1
 8003c60:	f43f aefb 	beq.w	8003a5a <_printf_float+0xb6>
 8003c64:	f10a 0a01 	add.w	sl, sl, #1
 8003c68:	e7ee      	b.n	8003c48 <_printf_float+0x2a4>
 8003c6a:	bf00      	nop
 8003c6c:	7fefffff 	.word	0x7fefffff
 8003c70:	08006364 	.word	0x08006364
 8003c74:	08006360 	.word	0x08006360
 8003c78:	0800636c 	.word	0x0800636c
 8003c7c:	08006368 	.word	0x08006368
 8003c80:	08006370 	.word	0x08006370
 8003c84:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003c86:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003c8a:	4553      	cmp	r3, sl
 8003c8c:	bfa8      	it	ge
 8003c8e:	4653      	movge	r3, sl
 8003c90:	2b00      	cmp	r3, #0
 8003c92:	4699      	mov	r9, r3
 8003c94:	dc36      	bgt.n	8003d04 <_printf_float+0x360>
 8003c96:	f04f 0b00 	mov.w	fp, #0
 8003c9a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003c9e:	f104 021a 	add.w	r2, r4, #26
 8003ca2:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8003ca4:	9306      	str	r3, [sp, #24]
 8003ca6:	eba3 0309 	sub.w	r3, r3, r9
 8003caa:	455b      	cmp	r3, fp
 8003cac:	dc31      	bgt.n	8003d12 <_printf_float+0x36e>
 8003cae:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cb0:	459a      	cmp	sl, r3
 8003cb2:	dc3a      	bgt.n	8003d2a <_printf_float+0x386>
 8003cb4:	6823      	ldr	r3, [r4, #0]
 8003cb6:	07da      	lsls	r2, r3, #31
 8003cb8:	d437      	bmi.n	8003d2a <_printf_float+0x386>
 8003cba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003cbc:	ebaa 0903 	sub.w	r9, sl, r3
 8003cc0:	9b06      	ldr	r3, [sp, #24]
 8003cc2:	ebaa 0303 	sub.w	r3, sl, r3
 8003cc6:	4599      	cmp	r9, r3
 8003cc8:	bfa8      	it	ge
 8003cca:	4699      	movge	r9, r3
 8003ccc:	f1b9 0f00 	cmp.w	r9, #0
 8003cd0:	dc33      	bgt.n	8003d3a <_printf_float+0x396>
 8003cd2:	f04f 0800 	mov.w	r8, #0
 8003cd6:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8003cda:	f104 0b1a 	add.w	fp, r4, #26
 8003cde:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003ce0:	ebaa 0303 	sub.w	r3, sl, r3
 8003ce4:	eba3 0309 	sub.w	r3, r3, r9
 8003ce8:	4543      	cmp	r3, r8
 8003cea:	f77f af79 	ble.w	8003be0 <_printf_float+0x23c>
 8003cee:	2301      	movs	r3, #1
 8003cf0:	465a      	mov	r2, fp
 8003cf2:	4631      	mov	r1, r6
 8003cf4:	4628      	mov	r0, r5
 8003cf6:	47b8      	blx	r7
 8003cf8:	3001      	adds	r0, #1
 8003cfa:	f43f aeae 	beq.w	8003a5a <_printf_float+0xb6>
 8003cfe:	f108 0801 	add.w	r8, r8, #1
 8003d02:	e7ec      	b.n	8003cde <_printf_float+0x33a>
 8003d04:	4642      	mov	r2, r8
 8003d06:	4631      	mov	r1, r6
 8003d08:	4628      	mov	r0, r5
 8003d0a:	47b8      	blx	r7
 8003d0c:	3001      	adds	r0, #1
 8003d0e:	d1c2      	bne.n	8003c96 <_printf_float+0x2f2>
 8003d10:	e6a3      	b.n	8003a5a <_printf_float+0xb6>
 8003d12:	2301      	movs	r3, #1
 8003d14:	4631      	mov	r1, r6
 8003d16:	4628      	mov	r0, r5
 8003d18:	9206      	str	r2, [sp, #24]
 8003d1a:	47b8      	blx	r7
 8003d1c:	3001      	adds	r0, #1
 8003d1e:	f43f ae9c 	beq.w	8003a5a <_printf_float+0xb6>
 8003d22:	9a06      	ldr	r2, [sp, #24]
 8003d24:	f10b 0b01 	add.w	fp, fp, #1
 8003d28:	e7bb      	b.n	8003ca2 <_printf_float+0x2fe>
 8003d2a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d2e:	4631      	mov	r1, r6
 8003d30:	4628      	mov	r0, r5
 8003d32:	47b8      	blx	r7
 8003d34:	3001      	adds	r0, #1
 8003d36:	d1c0      	bne.n	8003cba <_printf_float+0x316>
 8003d38:	e68f      	b.n	8003a5a <_printf_float+0xb6>
 8003d3a:	9a06      	ldr	r2, [sp, #24]
 8003d3c:	464b      	mov	r3, r9
 8003d3e:	4442      	add	r2, r8
 8003d40:	4631      	mov	r1, r6
 8003d42:	4628      	mov	r0, r5
 8003d44:	47b8      	blx	r7
 8003d46:	3001      	adds	r0, #1
 8003d48:	d1c3      	bne.n	8003cd2 <_printf_float+0x32e>
 8003d4a:	e686      	b.n	8003a5a <_printf_float+0xb6>
 8003d4c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8003d50:	f1ba 0f01 	cmp.w	sl, #1
 8003d54:	dc01      	bgt.n	8003d5a <_printf_float+0x3b6>
 8003d56:	07db      	lsls	r3, r3, #31
 8003d58:	d536      	bpl.n	8003dc8 <_printf_float+0x424>
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	4642      	mov	r2, r8
 8003d5e:	4631      	mov	r1, r6
 8003d60:	4628      	mov	r0, r5
 8003d62:	47b8      	blx	r7
 8003d64:	3001      	adds	r0, #1
 8003d66:	f43f ae78 	beq.w	8003a5a <_printf_float+0xb6>
 8003d6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003d6e:	4631      	mov	r1, r6
 8003d70:	4628      	mov	r0, r5
 8003d72:	47b8      	blx	r7
 8003d74:	3001      	adds	r0, #1
 8003d76:	f43f ae70 	beq.w	8003a5a <_printf_float+0xb6>
 8003d7a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8003d7e:	2200      	movs	r2, #0
 8003d80:	2300      	movs	r3, #0
 8003d82:	f10a 3aff 	add.w	sl, sl, #4294967295
 8003d86:	f7fc feaf 	bl	8000ae8 <__aeabi_dcmpeq>
 8003d8a:	b9c0      	cbnz	r0, 8003dbe <_printf_float+0x41a>
 8003d8c:	4653      	mov	r3, sl
 8003d8e:	f108 0201 	add.w	r2, r8, #1
 8003d92:	4631      	mov	r1, r6
 8003d94:	4628      	mov	r0, r5
 8003d96:	47b8      	blx	r7
 8003d98:	3001      	adds	r0, #1
 8003d9a:	d10c      	bne.n	8003db6 <_printf_float+0x412>
 8003d9c:	e65d      	b.n	8003a5a <_printf_float+0xb6>
 8003d9e:	2301      	movs	r3, #1
 8003da0:	465a      	mov	r2, fp
 8003da2:	4631      	mov	r1, r6
 8003da4:	4628      	mov	r0, r5
 8003da6:	47b8      	blx	r7
 8003da8:	3001      	adds	r0, #1
 8003daa:	f43f ae56 	beq.w	8003a5a <_printf_float+0xb6>
 8003dae:	f108 0801 	add.w	r8, r8, #1
 8003db2:	45d0      	cmp	r8, sl
 8003db4:	dbf3      	blt.n	8003d9e <_printf_float+0x3fa>
 8003db6:	464b      	mov	r3, r9
 8003db8:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8003dbc:	e6df      	b.n	8003b7e <_printf_float+0x1da>
 8003dbe:	f04f 0800 	mov.w	r8, #0
 8003dc2:	f104 0b1a 	add.w	fp, r4, #26
 8003dc6:	e7f4      	b.n	8003db2 <_printf_float+0x40e>
 8003dc8:	2301      	movs	r3, #1
 8003dca:	4642      	mov	r2, r8
 8003dcc:	e7e1      	b.n	8003d92 <_printf_float+0x3ee>
 8003dce:	2301      	movs	r3, #1
 8003dd0:	464a      	mov	r2, r9
 8003dd2:	4631      	mov	r1, r6
 8003dd4:	4628      	mov	r0, r5
 8003dd6:	47b8      	blx	r7
 8003dd8:	3001      	adds	r0, #1
 8003dda:	f43f ae3e 	beq.w	8003a5a <_printf_float+0xb6>
 8003dde:	f108 0801 	add.w	r8, r8, #1
 8003de2:	68e3      	ldr	r3, [r4, #12]
 8003de4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8003de6:	1a5b      	subs	r3, r3, r1
 8003de8:	4543      	cmp	r3, r8
 8003dea:	dcf0      	bgt.n	8003dce <_printf_float+0x42a>
 8003dec:	e6fc      	b.n	8003be8 <_printf_float+0x244>
 8003dee:	f04f 0800 	mov.w	r8, #0
 8003df2:	f104 0919 	add.w	r9, r4, #25
 8003df6:	e7f4      	b.n	8003de2 <_printf_float+0x43e>

08003df8 <_printf_common>:
 8003df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8003dfc:	4616      	mov	r6, r2
 8003dfe:	4698      	mov	r8, r3
 8003e00:	688a      	ldr	r2, [r1, #8]
 8003e02:	690b      	ldr	r3, [r1, #16]
 8003e04:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8003e08:	4293      	cmp	r3, r2
 8003e0a:	bfb8      	it	lt
 8003e0c:	4613      	movlt	r3, r2
 8003e0e:	6033      	str	r3, [r6, #0]
 8003e10:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8003e14:	4607      	mov	r7, r0
 8003e16:	460c      	mov	r4, r1
 8003e18:	b10a      	cbz	r2, 8003e1e <_printf_common+0x26>
 8003e1a:	3301      	adds	r3, #1
 8003e1c:	6033      	str	r3, [r6, #0]
 8003e1e:	6823      	ldr	r3, [r4, #0]
 8003e20:	0699      	lsls	r1, r3, #26
 8003e22:	bf42      	ittt	mi
 8003e24:	6833      	ldrmi	r3, [r6, #0]
 8003e26:	3302      	addmi	r3, #2
 8003e28:	6033      	strmi	r3, [r6, #0]
 8003e2a:	6825      	ldr	r5, [r4, #0]
 8003e2c:	f015 0506 	ands.w	r5, r5, #6
 8003e30:	d106      	bne.n	8003e40 <_printf_common+0x48>
 8003e32:	f104 0a19 	add.w	sl, r4, #25
 8003e36:	68e3      	ldr	r3, [r4, #12]
 8003e38:	6832      	ldr	r2, [r6, #0]
 8003e3a:	1a9b      	subs	r3, r3, r2
 8003e3c:	42ab      	cmp	r3, r5
 8003e3e:	dc26      	bgt.n	8003e8e <_printf_common+0x96>
 8003e40:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003e44:	6822      	ldr	r2, [r4, #0]
 8003e46:	3b00      	subs	r3, #0
 8003e48:	bf18      	it	ne
 8003e4a:	2301      	movne	r3, #1
 8003e4c:	0692      	lsls	r2, r2, #26
 8003e4e:	d42b      	bmi.n	8003ea8 <_printf_common+0xb0>
 8003e50:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003e54:	4641      	mov	r1, r8
 8003e56:	4638      	mov	r0, r7
 8003e58:	47c8      	blx	r9
 8003e5a:	3001      	adds	r0, #1
 8003e5c:	d01e      	beq.n	8003e9c <_printf_common+0xa4>
 8003e5e:	6823      	ldr	r3, [r4, #0]
 8003e60:	6922      	ldr	r2, [r4, #16]
 8003e62:	f003 0306 	and.w	r3, r3, #6
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	bf02      	ittt	eq
 8003e6a:	68e5      	ldreq	r5, [r4, #12]
 8003e6c:	6833      	ldreq	r3, [r6, #0]
 8003e6e:	1aed      	subeq	r5, r5, r3
 8003e70:	68a3      	ldr	r3, [r4, #8]
 8003e72:	bf0c      	ite	eq
 8003e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003e78:	2500      	movne	r5, #0
 8003e7a:	4293      	cmp	r3, r2
 8003e7c:	bfc4      	itt	gt
 8003e7e:	1a9b      	subgt	r3, r3, r2
 8003e80:	18ed      	addgt	r5, r5, r3
 8003e82:	2600      	movs	r6, #0
 8003e84:	341a      	adds	r4, #26
 8003e86:	42b5      	cmp	r5, r6
 8003e88:	d11a      	bne.n	8003ec0 <_printf_common+0xc8>
 8003e8a:	2000      	movs	r0, #0
 8003e8c:	e008      	b.n	8003ea0 <_printf_common+0xa8>
 8003e8e:	2301      	movs	r3, #1
 8003e90:	4652      	mov	r2, sl
 8003e92:	4641      	mov	r1, r8
 8003e94:	4638      	mov	r0, r7
 8003e96:	47c8      	blx	r9
 8003e98:	3001      	adds	r0, #1
 8003e9a:	d103      	bne.n	8003ea4 <_printf_common+0xac>
 8003e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8003ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003ea4:	3501      	adds	r5, #1
 8003ea6:	e7c6      	b.n	8003e36 <_printf_common+0x3e>
 8003ea8:	18e1      	adds	r1, r4, r3
 8003eaa:	1c5a      	adds	r2, r3, #1
 8003eac:	2030      	movs	r0, #48	@ 0x30
 8003eae:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8003eb2:	4422      	add	r2, r4
 8003eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003eb8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003ebc:	3302      	adds	r3, #2
 8003ebe:	e7c7      	b.n	8003e50 <_printf_common+0x58>
 8003ec0:	2301      	movs	r3, #1
 8003ec2:	4622      	mov	r2, r4
 8003ec4:	4641      	mov	r1, r8
 8003ec6:	4638      	mov	r0, r7
 8003ec8:	47c8      	blx	r9
 8003eca:	3001      	adds	r0, #1
 8003ecc:	d0e6      	beq.n	8003e9c <_printf_common+0xa4>
 8003ece:	3601      	adds	r6, #1
 8003ed0:	e7d9      	b.n	8003e86 <_printf_common+0x8e>
	...

08003ed4 <_printf_i>:
 8003ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8003ed8:	7e0f      	ldrb	r7, [r1, #24]
 8003eda:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8003edc:	2f78      	cmp	r7, #120	@ 0x78
 8003ede:	4691      	mov	r9, r2
 8003ee0:	4680      	mov	r8, r0
 8003ee2:	460c      	mov	r4, r1
 8003ee4:	469a      	mov	sl, r3
 8003ee6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8003eea:	d807      	bhi.n	8003efc <_printf_i+0x28>
 8003eec:	2f62      	cmp	r7, #98	@ 0x62
 8003eee:	d80a      	bhi.n	8003f06 <_printf_i+0x32>
 8003ef0:	2f00      	cmp	r7, #0
 8003ef2:	f000 80d1 	beq.w	8004098 <_printf_i+0x1c4>
 8003ef6:	2f58      	cmp	r7, #88	@ 0x58
 8003ef8:	f000 80b8 	beq.w	800406c <_printf_i+0x198>
 8003efc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f00:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8003f04:	e03a      	b.n	8003f7c <_printf_i+0xa8>
 8003f06:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8003f0a:	2b15      	cmp	r3, #21
 8003f0c:	d8f6      	bhi.n	8003efc <_printf_i+0x28>
 8003f0e:	a101      	add	r1, pc, #4	@ (adr r1, 8003f14 <_printf_i+0x40>)
 8003f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8003f14:	08003f6d 	.word	0x08003f6d
 8003f18:	08003f81 	.word	0x08003f81
 8003f1c:	08003efd 	.word	0x08003efd
 8003f20:	08003efd 	.word	0x08003efd
 8003f24:	08003efd 	.word	0x08003efd
 8003f28:	08003efd 	.word	0x08003efd
 8003f2c:	08003f81 	.word	0x08003f81
 8003f30:	08003efd 	.word	0x08003efd
 8003f34:	08003efd 	.word	0x08003efd
 8003f38:	08003efd 	.word	0x08003efd
 8003f3c:	08003efd 	.word	0x08003efd
 8003f40:	0800407f 	.word	0x0800407f
 8003f44:	08003fab 	.word	0x08003fab
 8003f48:	08004039 	.word	0x08004039
 8003f4c:	08003efd 	.word	0x08003efd
 8003f50:	08003efd 	.word	0x08003efd
 8003f54:	080040a1 	.word	0x080040a1
 8003f58:	08003efd 	.word	0x08003efd
 8003f5c:	08003fab 	.word	0x08003fab
 8003f60:	08003efd 	.word	0x08003efd
 8003f64:	08003efd 	.word	0x08003efd
 8003f68:	08004041 	.word	0x08004041
 8003f6c:	6833      	ldr	r3, [r6, #0]
 8003f6e:	1d1a      	adds	r2, r3, #4
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	6032      	str	r2, [r6, #0]
 8003f74:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003f78:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003f7c:	2301      	movs	r3, #1
 8003f7e:	e09c      	b.n	80040ba <_printf_i+0x1e6>
 8003f80:	6833      	ldr	r3, [r6, #0]
 8003f82:	6820      	ldr	r0, [r4, #0]
 8003f84:	1d19      	adds	r1, r3, #4
 8003f86:	6031      	str	r1, [r6, #0]
 8003f88:	0606      	lsls	r6, r0, #24
 8003f8a:	d501      	bpl.n	8003f90 <_printf_i+0xbc>
 8003f8c:	681d      	ldr	r5, [r3, #0]
 8003f8e:	e003      	b.n	8003f98 <_printf_i+0xc4>
 8003f90:	0645      	lsls	r5, r0, #25
 8003f92:	d5fb      	bpl.n	8003f8c <_printf_i+0xb8>
 8003f94:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003f98:	2d00      	cmp	r5, #0
 8003f9a:	da03      	bge.n	8003fa4 <_printf_i+0xd0>
 8003f9c:	232d      	movs	r3, #45	@ 0x2d
 8003f9e:	426d      	negs	r5, r5
 8003fa0:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003fa4:	4858      	ldr	r0, [pc, #352]	@ (8004108 <_printf_i+0x234>)
 8003fa6:	230a      	movs	r3, #10
 8003fa8:	e011      	b.n	8003fce <_printf_i+0xfa>
 8003faa:	6821      	ldr	r1, [r4, #0]
 8003fac:	6833      	ldr	r3, [r6, #0]
 8003fae:	0608      	lsls	r0, r1, #24
 8003fb0:	f853 5b04 	ldr.w	r5, [r3], #4
 8003fb4:	d402      	bmi.n	8003fbc <_printf_i+0xe8>
 8003fb6:	0649      	lsls	r1, r1, #25
 8003fb8:	bf48      	it	mi
 8003fba:	b2ad      	uxthmi	r5, r5
 8003fbc:	2f6f      	cmp	r7, #111	@ 0x6f
 8003fbe:	4852      	ldr	r0, [pc, #328]	@ (8004108 <_printf_i+0x234>)
 8003fc0:	6033      	str	r3, [r6, #0]
 8003fc2:	bf14      	ite	ne
 8003fc4:	230a      	movne	r3, #10
 8003fc6:	2308      	moveq	r3, #8
 8003fc8:	2100      	movs	r1, #0
 8003fca:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8003fce:	6866      	ldr	r6, [r4, #4]
 8003fd0:	60a6      	str	r6, [r4, #8]
 8003fd2:	2e00      	cmp	r6, #0
 8003fd4:	db05      	blt.n	8003fe2 <_printf_i+0x10e>
 8003fd6:	6821      	ldr	r1, [r4, #0]
 8003fd8:	432e      	orrs	r6, r5
 8003fda:	f021 0104 	bic.w	r1, r1, #4
 8003fde:	6021      	str	r1, [r4, #0]
 8003fe0:	d04b      	beq.n	800407a <_printf_i+0x1a6>
 8003fe2:	4616      	mov	r6, r2
 8003fe4:	fbb5 f1f3 	udiv	r1, r5, r3
 8003fe8:	fb03 5711 	mls	r7, r3, r1, r5
 8003fec:	5dc7      	ldrb	r7, [r0, r7]
 8003fee:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8003ff2:	462f      	mov	r7, r5
 8003ff4:	42bb      	cmp	r3, r7
 8003ff6:	460d      	mov	r5, r1
 8003ff8:	d9f4      	bls.n	8003fe4 <_printf_i+0x110>
 8003ffa:	2b08      	cmp	r3, #8
 8003ffc:	d10b      	bne.n	8004016 <_printf_i+0x142>
 8003ffe:	6823      	ldr	r3, [r4, #0]
 8004000:	07df      	lsls	r7, r3, #31
 8004002:	d508      	bpl.n	8004016 <_printf_i+0x142>
 8004004:	6923      	ldr	r3, [r4, #16]
 8004006:	6861      	ldr	r1, [r4, #4]
 8004008:	4299      	cmp	r1, r3
 800400a:	bfde      	ittt	le
 800400c:	2330      	movle	r3, #48	@ 0x30
 800400e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004012:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004016:	1b92      	subs	r2, r2, r6
 8004018:	6122      	str	r2, [r4, #16]
 800401a:	f8cd a000 	str.w	sl, [sp]
 800401e:	464b      	mov	r3, r9
 8004020:	aa03      	add	r2, sp, #12
 8004022:	4621      	mov	r1, r4
 8004024:	4640      	mov	r0, r8
 8004026:	f7ff fee7 	bl	8003df8 <_printf_common>
 800402a:	3001      	adds	r0, #1
 800402c:	d14a      	bne.n	80040c4 <_printf_i+0x1f0>
 800402e:	f04f 30ff 	mov.w	r0, #4294967295
 8004032:	b004      	add	sp, #16
 8004034:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004038:	6823      	ldr	r3, [r4, #0]
 800403a:	f043 0320 	orr.w	r3, r3, #32
 800403e:	6023      	str	r3, [r4, #0]
 8004040:	4832      	ldr	r0, [pc, #200]	@ (800410c <_printf_i+0x238>)
 8004042:	2778      	movs	r7, #120	@ 0x78
 8004044:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8004048:	6823      	ldr	r3, [r4, #0]
 800404a:	6831      	ldr	r1, [r6, #0]
 800404c:	061f      	lsls	r7, r3, #24
 800404e:	f851 5b04 	ldr.w	r5, [r1], #4
 8004052:	d402      	bmi.n	800405a <_printf_i+0x186>
 8004054:	065f      	lsls	r7, r3, #25
 8004056:	bf48      	it	mi
 8004058:	b2ad      	uxthmi	r5, r5
 800405a:	6031      	str	r1, [r6, #0]
 800405c:	07d9      	lsls	r1, r3, #31
 800405e:	bf44      	itt	mi
 8004060:	f043 0320 	orrmi.w	r3, r3, #32
 8004064:	6023      	strmi	r3, [r4, #0]
 8004066:	b11d      	cbz	r5, 8004070 <_printf_i+0x19c>
 8004068:	2310      	movs	r3, #16
 800406a:	e7ad      	b.n	8003fc8 <_printf_i+0xf4>
 800406c:	4826      	ldr	r0, [pc, #152]	@ (8004108 <_printf_i+0x234>)
 800406e:	e7e9      	b.n	8004044 <_printf_i+0x170>
 8004070:	6823      	ldr	r3, [r4, #0]
 8004072:	f023 0320 	bic.w	r3, r3, #32
 8004076:	6023      	str	r3, [r4, #0]
 8004078:	e7f6      	b.n	8004068 <_printf_i+0x194>
 800407a:	4616      	mov	r6, r2
 800407c:	e7bd      	b.n	8003ffa <_printf_i+0x126>
 800407e:	6833      	ldr	r3, [r6, #0]
 8004080:	6825      	ldr	r5, [r4, #0]
 8004082:	6961      	ldr	r1, [r4, #20]
 8004084:	1d18      	adds	r0, r3, #4
 8004086:	6030      	str	r0, [r6, #0]
 8004088:	062e      	lsls	r6, r5, #24
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	d501      	bpl.n	8004092 <_printf_i+0x1be>
 800408e:	6019      	str	r1, [r3, #0]
 8004090:	e002      	b.n	8004098 <_printf_i+0x1c4>
 8004092:	0668      	lsls	r0, r5, #25
 8004094:	d5fb      	bpl.n	800408e <_printf_i+0x1ba>
 8004096:	8019      	strh	r1, [r3, #0]
 8004098:	2300      	movs	r3, #0
 800409a:	6123      	str	r3, [r4, #16]
 800409c:	4616      	mov	r6, r2
 800409e:	e7bc      	b.n	800401a <_printf_i+0x146>
 80040a0:	6833      	ldr	r3, [r6, #0]
 80040a2:	1d1a      	adds	r2, r3, #4
 80040a4:	6032      	str	r2, [r6, #0]
 80040a6:	681e      	ldr	r6, [r3, #0]
 80040a8:	6862      	ldr	r2, [r4, #4]
 80040aa:	2100      	movs	r1, #0
 80040ac:	4630      	mov	r0, r6
 80040ae:	f7fc f89f 	bl	80001f0 <memchr>
 80040b2:	b108      	cbz	r0, 80040b8 <_printf_i+0x1e4>
 80040b4:	1b80      	subs	r0, r0, r6
 80040b6:	6060      	str	r0, [r4, #4]
 80040b8:	6863      	ldr	r3, [r4, #4]
 80040ba:	6123      	str	r3, [r4, #16]
 80040bc:	2300      	movs	r3, #0
 80040be:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80040c2:	e7aa      	b.n	800401a <_printf_i+0x146>
 80040c4:	6923      	ldr	r3, [r4, #16]
 80040c6:	4632      	mov	r2, r6
 80040c8:	4649      	mov	r1, r9
 80040ca:	4640      	mov	r0, r8
 80040cc:	47d0      	blx	sl
 80040ce:	3001      	adds	r0, #1
 80040d0:	d0ad      	beq.n	800402e <_printf_i+0x15a>
 80040d2:	6823      	ldr	r3, [r4, #0]
 80040d4:	079b      	lsls	r3, r3, #30
 80040d6:	d413      	bmi.n	8004100 <_printf_i+0x22c>
 80040d8:	68e0      	ldr	r0, [r4, #12]
 80040da:	9b03      	ldr	r3, [sp, #12]
 80040dc:	4298      	cmp	r0, r3
 80040de:	bfb8      	it	lt
 80040e0:	4618      	movlt	r0, r3
 80040e2:	e7a6      	b.n	8004032 <_printf_i+0x15e>
 80040e4:	2301      	movs	r3, #1
 80040e6:	4632      	mov	r2, r6
 80040e8:	4649      	mov	r1, r9
 80040ea:	4640      	mov	r0, r8
 80040ec:	47d0      	blx	sl
 80040ee:	3001      	adds	r0, #1
 80040f0:	d09d      	beq.n	800402e <_printf_i+0x15a>
 80040f2:	3501      	adds	r5, #1
 80040f4:	68e3      	ldr	r3, [r4, #12]
 80040f6:	9903      	ldr	r1, [sp, #12]
 80040f8:	1a5b      	subs	r3, r3, r1
 80040fa:	42ab      	cmp	r3, r5
 80040fc:	dcf2      	bgt.n	80040e4 <_printf_i+0x210>
 80040fe:	e7eb      	b.n	80040d8 <_printf_i+0x204>
 8004100:	2500      	movs	r5, #0
 8004102:	f104 0619 	add.w	r6, r4, #25
 8004106:	e7f5      	b.n	80040f4 <_printf_i+0x220>
 8004108:	08006372 	.word	0x08006372
 800410c:	08006383 	.word	0x08006383

08004110 <std>:
 8004110:	2300      	movs	r3, #0
 8004112:	b510      	push	{r4, lr}
 8004114:	4604      	mov	r4, r0
 8004116:	e9c0 3300 	strd	r3, r3, [r0]
 800411a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800411e:	6083      	str	r3, [r0, #8]
 8004120:	8181      	strh	r1, [r0, #12]
 8004122:	6643      	str	r3, [r0, #100]	@ 0x64
 8004124:	81c2      	strh	r2, [r0, #14]
 8004126:	6183      	str	r3, [r0, #24]
 8004128:	4619      	mov	r1, r3
 800412a:	2208      	movs	r2, #8
 800412c:	305c      	adds	r0, #92	@ 0x5c
 800412e:	f000 f9f9 	bl	8004524 <memset>
 8004132:	4b0d      	ldr	r3, [pc, #52]	@ (8004168 <std+0x58>)
 8004134:	6263      	str	r3, [r4, #36]	@ 0x24
 8004136:	4b0d      	ldr	r3, [pc, #52]	@ (800416c <std+0x5c>)
 8004138:	62a3      	str	r3, [r4, #40]	@ 0x28
 800413a:	4b0d      	ldr	r3, [pc, #52]	@ (8004170 <std+0x60>)
 800413c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800413e:	4b0d      	ldr	r3, [pc, #52]	@ (8004174 <std+0x64>)
 8004140:	6323      	str	r3, [r4, #48]	@ 0x30
 8004142:	4b0d      	ldr	r3, [pc, #52]	@ (8004178 <std+0x68>)
 8004144:	6224      	str	r4, [r4, #32]
 8004146:	429c      	cmp	r4, r3
 8004148:	d006      	beq.n	8004158 <std+0x48>
 800414a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800414e:	4294      	cmp	r4, r2
 8004150:	d002      	beq.n	8004158 <std+0x48>
 8004152:	33d0      	adds	r3, #208	@ 0xd0
 8004154:	429c      	cmp	r4, r3
 8004156:	d105      	bne.n	8004164 <std+0x54>
 8004158:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800415c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004160:	f000 ba5c 	b.w	800461c <__retarget_lock_init_recursive>
 8004164:	bd10      	pop	{r4, pc}
 8004166:	bf00      	nop
 8004168:	08004375 	.word	0x08004375
 800416c:	08004397 	.word	0x08004397
 8004170:	080043cf 	.word	0x080043cf
 8004174:	080043f3 	.word	0x080043f3
 8004178:	2000025c 	.word	0x2000025c

0800417c <stdio_exit_handler>:
 800417c:	4a02      	ldr	r2, [pc, #8]	@ (8004188 <stdio_exit_handler+0xc>)
 800417e:	4903      	ldr	r1, [pc, #12]	@ (800418c <stdio_exit_handler+0x10>)
 8004180:	4803      	ldr	r0, [pc, #12]	@ (8004190 <stdio_exit_handler+0x14>)
 8004182:	f000 b869 	b.w	8004258 <_fwalk_sglue>
 8004186:	bf00      	nop
 8004188:	2000000c 	.word	0x2000000c
 800418c:	08005f59 	.word	0x08005f59
 8004190:	2000001c 	.word	0x2000001c

08004194 <cleanup_stdio>:
 8004194:	6841      	ldr	r1, [r0, #4]
 8004196:	4b0c      	ldr	r3, [pc, #48]	@ (80041c8 <cleanup_stdio+0x34>)
 8004198:	4299      	cmp	r1, r3
 800419a:	b510      	push	{r4, lr}
 800419c:	4604      	mov	r4, r0
 800419e:	d001      	beq.n	80041a4 <cleanup_stdio+0x10>
 80041a0:	f001 feda 	bl	8005f58 <_fflush_r>
 80041a4:	68a1      	ldr	r1, [r4, #8]
 80041a6:	4b09      	ldr	r3, [pc, #36]	@ (80041cc <cleanup_stdio+0x38>)
 80041a8:	4299      	cmp	r1, r3
 80041aa:	d002      	beq.n	80041b2 <cleanup_stdio+0x1e>
 80041ac:	4620      	mov	r0, r4
 80041ae:	f001 fed3 	bl	8005f58 <_fflush_r>
 80041b2:	68e1      	ldr	r1, [r4, #12]
 80041b4:	4b06      	ldr	r3, [pc, #24]	@ (80041d0 <cleanup_stdio+0x3c>)
 80041b6:	4299      	cmp	r1, r3
 80041b8:	d004      	beq.n	80041c4 <cleanup_stdio+0x30>
 80041ba:	4620      	mov	r0, r4
 80041bc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041c0:	f001 beca 	b.w	8005f58 <_fflush_r>
 80041c4:	bd10      	pop	{r4, pc}
 80041c6:	bf00      	nop
 80041c8:	2000025c 	.word	0x2000025c
 80041cc:	200002c4 	.word	0x200002c4
 80041d0:	2000032c 	.word	0x2000032c

080041d4 <global_stdio_init.part.0>:
 80041d4:	b510      	push	{r4, lr}
 80041d6:	4b0b      	ldr	r3, [pc, #44]	@ (8004204 <global_stdio_init.part.0+0x30>)
 80041d8:	4c0b      	ldr	r4, [pc, #44]	@ (8004208 <global_stdio_init.part.0+0x34>)
 80041da:	4a0c      	ldr	r2, [pc, #48]	@ (800420c <global_stdio_init.part.0+0x38>)
 80041dc:	601a      	str	r2, [r3, #0]
 80041de:	4620      	mov	r0, r4
 80041e0:	2200      	movs	r2, #0
 80041e2:	2104      	movs	r1, #4
 80041e4:	f7ff ff94 	bl	8004110 <std>
 80041e8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80041ec:	2201      	movs	r2, #1
 80041ee:	2109      	movs	r1, #9
 80041f0:	f7ff ff8e 	bl	8004110 <std>
 80041f4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80041f8:	2202      	movs	r2, #2
 80041fa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80041fe:	2112      	movs	r1, #18
 8004200:	f7ff bf86 	b.w	8004110 <std>
 8004204:	20000394 	.word	0x20000394
 8004208:	2000025c 	.word	0x2000025c
 800420c:	0800417d 	.word	0x0800417d

08004210 <__sfp_lock_acquire>:
 8004210:	4801      	ldr	r0, [pc, #4]	@ (8004218 <__sfp_lock_acquire+0x8>)
 8004212:	f000 ba04 	b.w	800461e <__retarget_lock_acquire_recursive>
 8004216:	bf00      	nop
 8004218:	2000039d 	.word	0x2000039d

0800421c <__sfp_lock_release>:
 800421c:	4801      	ldr	r0, [pc, #4]	@ (8004224 <__sfp_lock_release+0x8>)
 800421e:	f000 b9ff 	b.w	8004620 <__retarget_lock_release_recursive>
 8004222:	bf00      	nop
 8004224:	2000039d 	.word	0x2000039d

08004228 <__sinit>:
 8004228:	b510      	push	{r4, lr}
 800422a:	4604      	mov	r4, r0
 800422c:	f7ff fff0 	bl	8004210 <__sfp_lock_acquire>
 8004230:	6a23      	ldr	r3, [r4, #32]
 8004232:	b11b      	cbz	r3, 800423c <__sinit+0x14>
 8004234:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004238:	f7ff bff0 	b.w	800421c <__sfp_lock_release>
 800423c:	4b04      	ldr	r3, [pc, #16]	@ (8004250 <__sinit+0x28>)
 800423e:	6223      	str	r3, [r4, #32]
 8004240:	4b04      	ldr	r3, [pc, #16]	@ (8004254 <__sinit+0x2c>)
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	2b00      	cmp	r3, #0
 8004246:	d1f5      	bne.n	8004234 <__sinit+0xc>
 8004248:	f7ff ffc4 	bl	80041d4 <global_stdio_init.part.0>
 800424c:	e7f2      	b.n	8004234 <__sinit+0xc>
 800424e:	bf00      	nop
 8004250:	08004195 	.word	0x08004195
 8004254:	20000394 	.word	0x20000394

08004258 <_fwalk_sglue>:
 8004258:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800425c:	4607      	mov	r7, r0
 800425e:	4688      	mov	r8, r1
 8004260:	4614      	mov	r4, r2
 8004262:	2600      	movs	r6, #0
 8004264:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004268:	f1b9 0901 	subs.w	r9, r9, #1
 800426c:	d505      	bpl.n	800427a <_fwalk_sglue+0x22>
 800426e:	6824      	ldr	r4, [r4, #0]
 8004270:	2c00      	cmp	r4, #0
 8004272:	d1f7      	bne.n	8004264 <_fwalk_sglue+0xc>
 8004274:	4630      	mov	r0, r6
 8004276:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800427a:	89ab      	ldrh	r3, [r5, #12]
 800427c:	2b01      	cmp	r3, #1
 800427e:	d907      	bls.n	8004290 <_fwalk_sglue+0x38>
 8004280:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004284:	3301      	adds	r3, #1
 8004286:	d003      	beq.n	8004290 <_fwalk_sglue+0x38>
 8004288:	4629      	mov	r1, r5
 800428a:	4638      	mov	r0, r7
 800428c:	47c0      	blx	r8
 800428e:	4306      	orrs	r6, r0
 8004290:	3568      	adds	r5, #104	@ 0x68
 8004292:	e7e9      	b.n	8004268 <_fwalk_sglue+0x10>

08004294 <iprintf>:
 8004294:	b40f      	push	{r0, r1, r2, r3}
 8004296:	b507      	push	{r0, r1, r2, lr}
 8004298:	4906      	ldr	r1, [pc, #24]	@ (80042b4 <iprintf+0x20>)
 800429a:	ab04      	add	r3, sp, #16
 800429c:	6808      	ldr	r0, [r1, #0]
 800429e:	f853 2b04 	ldr.w	r2, [r3], #4
 80042a2:	6881      	ldr	r1, [r0, #8]
 80042a4:	9301      	str	r3, [sp, #4]
 80042a6:	f001 fcbb 	bl	8005c20 <_vfiprintf_r>
 80042aa:	b003      	add	sp, #12
 80042ac:	f85d eb04 	ldr.w	lr, [sp], #4
 80042b0:	b004      	add	sp, #16
 80042b2:	4770      	bx	lr
 80042b4:	20000018 	.word	0x20000018

080042b8 <_puts_r>:
 80042b8:	6a03      	ldr	r3, [r0, #32]
 80042ba:	b570      	push	{r4, r5, r6, lr}
 80042bc:	6884      	ldr	r4, [r0, #8]
 80042be:	4605      	mov	r5, r0
 80042c0:	460e      	mov	r6, r1
 80042c2:	b90b      	cbnz	r3, 80042c8 <_puts_r+0x10>
 80042c4:	f7ff ffb0 	bl	8004228 <__sinit>
 80042c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042ca:	07db      	lsls	r3, r3, #31
 80042cc:	d405      	bmi.n	80042da <_puts_r+0x22>
 80042ce:	89a3      	ldrh	r3, [r4, #12]
 80042d0:	0598      	lsls	r0, r3, #22
 80042d2:	d402      	bmi.n	80042da <_puts_r+0x22>
 80042d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80042d6:	f000 f9a2 	bl	800461e <__retarget_lock_acquire_recursive>
 80042da:	89a3      	ldrh	r3, [r4, #12]
 80042dc:	0719      	lsls	r1, r3, #28
 80042de:	d502      	bpl.n	80042e6 <_puts_r+0x2e>
 80042e0:	6923      	ldr	r3, [r4, #16]
 80042e2:	2b00      	cmp	r3, #0
 80042e4:	d135      	bne.n	8004352 <_puts_r+0x9a>
 80042e6:	4621      	mov	r1, r4
 80042e8:	4628      	mov	r0, r5
 80042ea:	f000 f8c5 	bl	8004478 <__swsetup_r>
 80042ee:	b380      	cbz	r0, 8004352 <_puts_r+0x9a>
 80042f0:	f04f 35ff 	mov.w	r5, #4294967295
 80042f4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80042f6:	07da      	lsls	r2, r3, #31
 80042f8:	d405      	bmi.n	8004306 <_puts_r+0x4e>
 80042fa:	89a3      	ldrh	r3, [r4, #12]
 80042fc:	059b      	lsls	r3, r3, #22
 80042fe:	d402      	bmi.n	8004306 <_puts_r+0x4e>
 8004300:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004302:	f000 f98d 	bl	8004620 <__retarget_lock_release_recursive>
 8004306:	4628      	mov	r0, r5
 8004308:	bd70      	pop	{r4, r5, r6, pc}
 800430a:	2b00      	cmp	r3, #0
 800430c:	da04      	bge.n	8004318 <_puts_r+0x60>
 800430e:	69a2      	ldr	r2, [r4, #24]
 8004310:	429a      	cmp	r2, r3
 8004312:	dc17      	bgt.n	8004344 <_puts_r+0x8c>
 8004314:	290a      	cmp	r1, #10
 8004316:	d015      	beq.n	8004344 <_puts_r+0x8c>
 8004318:	6823      	ldr	r3, [r4, #0]
 800431a:	1c5a      	adds	r2, r3, #1
 800431c:	6022      	str	r2, [r4, #0]
 800431e:	7019      	strb	r1, [r3, #0]
 8004320:	68a3      	ldr	r3, [r4, #8]
 8004322:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8004326:	3b01      	subs	r3, #1
 8004328:	60a3      	str	r3, [r4, #8]
 800432a:	2900      	cmp	r1, #0
 800432c:	d1ed      	bne.n	800430a <_puts_r+0x52>
 800432e:	2b00      	cmp	r3, #0
 8004330:	da11      	bge.n	8004356 <_puts_r+0x9e>
 8004332:	4622      	mov	r2, r4
 8004334:	210a      	movs	r1, #10
 8004336:	4628      	mov	r0, r5
 8004338:	f000 f85f 	bl	80043fa <__swbuf_r>
 800433c:	3001      	adds	r0, #1
 800433e:	d0d7      	beq.n	80042f0 <_puts_r+0x38>
 8004340:	250a      	movs	r5, #10
 8004342:	e7d7      	b.n	80042f4 <_puts_r+0x3c>
 8004344:	4622      	mov	r2, r4
 8004346:	4628      	mov	r0, r5
 8004348:	f000 f857 	bl	80043fa <__swbuf_r>
 800434c:	3001      	adds	r0, #1
 800434e:	d1e7      	bne.n	8004320 <_puts_r+0x68>
 8004350:	e7ce      	b.n	80042f0 <_puts_r+0x38>
 8004352:	3e01      	subs	r6, #1
 8004354:	e7e4      	b.n	8004320 <_puts_r+0x68>
 8004356:	6823      	ldr	r3, [r4, #0]
 8004358:	1c5a      	adds	r2, r3, #1
 800435a:	6022      	str	r2, [r4, #0]
 800435c:	220a      	movs	r2, #10
 800435e:	701a      	strb	r2, [r3, #0]
 8004360:	e7ee      	b.n	8004340 <_puts_r+0x88>
	...

08004364 <puts>:
 8004364:	4b02      	ldr	r3, [pc, #8]	@ (8004370 <puts+0xc>)
 8004366:	4601      	mov	r1, r0
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	f7ff bfa5 	b.w	80042b8 <_puts_r>
 800436e:	bf00      	nop
 8004370:	20000018 	.word	0x20000018

08004374 <__sread>:
 8004374:	b510      	push	{r4, lr}
 8004376:	460c      	mov	r4, r1
 8004378:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800437c:	f000 f900 	bl	8004580 <_read_r>
 8004380:	2800      	cmp	r0, #0
 8004382:	bfab      	itete	ge
 8004384:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004386:	89a3      	ldrhlt	r3, [r4, #12]
 8004388:	181b      	addge	r3, r3, r0
 800438a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800438e:	bfac      	ite	ge
 8004390:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004392:	81a3      	strhlt	r3, [r4, #12]
 8004394:	bd10      	pop	{r4, pc}

08004396 <__swrite>:
 8004396:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800439a:	461f      	mov	r7, r3
 800439c:	898b      	ldrh	r3, [r1, #12]
 800439e:	05db      	lsls	r3, r3, #23
 80043a0:	4605      	mov	r5, r0
 80043a2:	460c      	mov	r4, r1
 80043a4:	4616      	mov	r6, r2
 80043a6:	d505      	bpl.n	80043b4 <__swrite+0x1e>
 80043a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043ac:	2302      	movs	r3, #2
 80043ae:	2200      	movs	r2, #0
 80043b0:	f000 f8d4 	bl	800455c <_lseek_r>
 80043b4:	89a3      	ldrh	r3, [r4, #12]
 80043b6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80043ba:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80043be:	81a3      	strh	r3, [r4, #12]
 80043c0:	4632      	mov	r2, r6
 80043c2:	463b      	mov	r3, r7
 80043c4:	4628      	mov	r0, r5
 80043c6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80043ca:	f000 b8eb 	b.w	80045a4 <_write_r>

080043ce <__sseek>:
 80043ce:	b510      	push	{r4, lr}
 80043d0:	460c      	mov	r4, r1
 80043d2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043d6:	f000 f8c1 	bl	800455c <_lseek_r>
 80043da:	1c43      	adds	r3, r0, #1
 80043dc:	89a3      	ldrh	r3, [r4, #12]
 80043de:	bf15      	itete	ne
 80043e0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80043e2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80043e6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80043ea:	81a3      	strheq	r3, [r4, #12]
 80043ec:	bf18      	it	ne
 80043ee:	81a3      	strhne	r3, [r4, #12]
 80043f0:	bd10      	pop	{r4, pc}

080043f2 <__sclose>:
 80043f2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80043f6:	f000 b8a1 	b.w	800453c <_close_r>

080043fa <__swbuf_r>:
 80043fa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80043fc:	460e      	mov	r6, r1
 80043fe:	4614      	mov	r4, r2
 8004400:	4605      	mov	r5, r0
 8004402:	b118      	cbz	r0, 800440c <__swbuf_r+0x12>
 8004404:	6a03      	ldr	r3, [r0, #32]
 8004406:	b90b      	cbnz	r3, 800440c <__swbuf_r+0x12>
 8004408:	f7ff ff0e 	bl	8004228 <__sinit>
 800440c:	69a3      	ldr	r3, [r4, #24]
 800440e:	60a3      	str	r3, [r4, #8]
 8004410:	89a3      	ldrh	r3, [r4, #12]
 8004412:	071a      	lsls	r2, r3, #28
 8004414:	d501      	bpl.n	800441a <__swbuf_r+0x20>
 8004416:	6923      	ldr	r3, [r4, #16]
 8004418:	b943      	cbnz	r3, 800442c <__swbuf_r+0x32>
 800441a:	4621      	mov	r1, r4
 800441c:	4628      	mov	r0, r5
 800441e:	f000 f82b 	bl	8004478 <__swsetup_r>
 8004422:	b118      	cbz	r0, 800442c <__swbuf_r+0x32>
 8004424:	f04f 37ff 	mov.w	r7, #4294967295
 8004428:	4638      	mov	r0, r7
 800442a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800442c:	6823      	ldr	r3, [r4, #0]
 800442e:	6922      	ldr	r2, [r4, #16]
 8004430:	1a98      	subs	r0, r3, r2
 8004432:	6963      	ldr	r3, [r4, #20]
 8004434:	b2f6      	uxtb	r6, r6
 8004436:	4283      	cmp	r3, r0
 8004438:	4637      	mov	r7, r6
 800443a:	dc05      	bgt.n	8004448 <__swbuf_r+0x4e>
 800443c:	4621      	mov	r1, r4
 800443e:	4628      	mov	r0, r5
 8004440:	f001 fd8a 	bl	8005f58 <_fflush_r>
 8004444:	2800      	cmp	r0, #0
 8004446:	d1ed      	bne.n	8004424 <__swbuf_r+0x2a>
 8004448:	68a3      	ldr	r3, [r4, #8]
 800444a:	3b01      	subs	r3, #1
 800444c:	60a3      	str	r3, [r4, #8]
 800444e:	6823      	ldr	r3, [r4, #0]
 8004450:	1c5a      	adds	r2, r3, #1
 8004452:	6022      	str	r2, [r4, #0]
 8004454:	701e      	strb	r6, [r3, #0]
 8004456:	6962      	ldr	r2, [r4, #20]
 8004458:	1c43      	adds	r3, r0, #1
 800445a:	429a      	cmp	r2, r3
 800445c:	d004      	beq.n	8004468 <__swbuf_r+0x6e>
 800445e:	89a3      	ldrh	r3, [r4, #12]
 8004460:	07db      	lsls	r3, r3, #31
 8004462:	d5e1      	bpl.n	8004428 <__swbuf_r+0x2e>
 8004464:	2e0a      	cmp	r6, #10
 8004466:	d1df      	bne.n	8004428 <__swbuf_r+0x2e>
 8004468:	4621      	mov	r1, r4
 800446a:	4628      	mov	r0, r5
 800446c:	f001 fd74 	bl	8005f58 <_fflush_r>
 8004470:	2800      	cmp	r0, #0
 8004472:	d0d9      	beq.n	8004428 <__swbuf_r+0x2e>
 8004474:	e7d6      	b.n	8004424 <__swbuf_r+0x2a>
	...

08004478 <__swsetup_r>:
 8004478:	b538      	push	{r3, r4, r5, lr}
 800447a:	4b29      	ldr	r3, [pc, #164]	@ (8004520 <__swsetup_r+0xa8>)
 800447c:	4605      	mov	r5, r0
 800447e:	6818      	ldr	r0, [r3, #0]
 8004480:	460c      	mov	r4, r1
 8004482:	b118      	cbz	r0, 800448c <__swsetup_r+0x14>
 8004484:	6a03      	ldr	r3, [r0, #32]
 8004486:	b90b      	cbnz	r3, 800448c <__swsetup_r+0x14>
 8004488:	f7ff fece 	bl	8004228 <__sinit>
 800448c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004490:	0719      	lsls	r1, r3, #28
 8004492:	d422      	bmi.n	80044da <__swsetup_r+0x62>
 8004494:	06da      	lsls	r2, r3, #27
 8004496:	d407      	bmi.n	80044a8 <__swsetup_r+0x30>
 8004498:	2209      	movs	r2, #9
 800449a:	602a      	str	r2, [r5, #0]
 800449c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80044a0:	81a3      	strh	r3, [r4, #12]
 80044a2:	f04f 30ff 	mov.w	r0, #4294967295
 80044a6:	e033      	b.n	8004510 <__swsetup_r+0x98>
 80044a8:	0758      	lsls	r0, r3, #29
 80044aa:	d512      	bpl.n	80044d2 <__swsetup_r+0x5a>
 80044ac:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80044ae:	b141      	cbz	r1, 80044c2 <__swsetup_r+0x4a>
 80044b0:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80044b4:	4299      	cmp	r1, r3
 80044b6:	d002      	beq.n	80044be <__swsetup_r+0x46>
 80044b8:	4628      	mov	r0, r5
 80044ba:	f000 ff0d 	bl	80052d8 <_free_r>
 80044be:	2300      	movs	r3, #0
 80044c0:	6363      	str	r3, [r4, #52]	@ 0x34
 80044c2:	89a3      	ldrh	r3, [r4, #12]
 80044c4:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80044c8:	81a3      	strh	r3, [r4, #12]
 80044ca:	2300      	movs	r3, #0
 80044cc:	6063      	str	r3, [r4, #4]
 80044ce:	6923      	ldr	r3, [r4, #16]
 80044d0:	6023      	str	r3, [r4, #0]
 80044d2:	89a3      	ldrh	r3, [r4, #12]
 80044d4:	f043 0308 	orr.w	r3, r3, #8
 80044d8:	81a3      	strh	r3, [r4, #12]
 80044da:	6923      	ldr	r3, [r4, #16]
 80044dc:	b94b      	cbnz	r3, 80044f2 <__swsetup_r+0x7a>
 80044de:	89a3      	ldrh	r3, [r4, #12]
 80044e0:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80044e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80044e8:	d003      	beq.n	80044f2 <__swsetup_r+0x7a>
 80044ea:	4621      	mov	r1, r4
 80044ec:	4628      	mov	r0, r5
 80044ee:	f001 fd81 	bl	8005ff4 <__smakebuf_r>
 80044f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80044f6:	f013 0201 	ands.w	r2, r3, #1
 80044fa:	d00a      	beq.n	8004512 <__swsetup_r+0x9a>
 80044fc:	2200      	movs	r2, #0
 80044fe:	60a2      	str	r2, [r4, #8]
 8004500:	6962      	ldr	r2, [r4, #20]
 8004502:	4252      	negs	r2, r2
 8004504:	61a2      	str	r2, [r4, #24]
 8004506:	6922      	ldr	r2, [r4, #16]
 8004508:	b942      	cbnz	r2, 800451c <__swsetup_r+0xa4>
 800450a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800450e:	d1c5      	bne.n	800449c <__swsetup_r+0x24>
 8004510:	bd38      	pop	{r3, r4, r5, pc}
 8004512:	0799      	lsls	r1, r3, #30
 8004514:	bf58      	it	pl
 8004516:	6962      	ldrpl	r2, [r4, #20]
 8004518:	60a2      	str	r2, [r4, #8]
 800451a:	e7f4      	b.n	8004506 <__swsetup_r+0x8e>
 800451c:	2000      	movs	r0, #0
 800451e:	e7f7      	b.n	8004510 <__swsetup_r+0x98>
 8004520:	20000018 	.word	0x20000018

08004524 <memset>:
 8004524:	4402      	add	r2, r0
 8004526:	4603      	mov	r3, r0
 8004528:	4293      	cmp	r3, r2
 800452a:	d100      	bne.n	800452e <memset+0xa>
 800452c:	4770      	bx	lr
 800452e:	f803 1b01 	strb.w	r1, [r3], #1
 8004532:	e7f9      	b.n	8004528 <memset+0x4>

08004534 <_localeconv_r>:
 8004534:	4800      	ldr	r0, [pc, #0]	@ (8004538 <_localeconv_r+0x4>)
 8004536:	4770      	bx	lr
 8004538:	20000158 	.word	0x20000158

0800453c <_close_r>:
 800453c:	b538      	push	{r3, r4, r5, lr}
 800453e:	4d06      	ldr	r5, [pc, #24]	@ (8004558 <_close_r+0x1c>)
 8004540:	2300      	movs	r3, #0
 8004542:	4604      	mov	r4, r0
 8004544:	4608      	mov	r0, r1
 8004546:	602b      	str	r3, [r5, #0]
 8004548:	f7fd fae4 	bl	8001b14 <_close>
 800454c:	1c43      	adds	r3, r0, #1
 800454e:	d102      	bne.n	8004556 <_close_r+0x1a>
 8004550:	682b      	ldr	r3, [r5, #0]
 8004552:	b103      	cbz	r3, 8004556 <_close_r+0x1a>
 8004554:	6023      	str	r3, [r4, #0]
 8004556:	bd38      	pop	{r3, r4, r5, pc}
 8004558:	20000398 	.word	0x20000398

0800455c <_lseek_r>:
 800455c:	b538      	push	{r3, r4, r5, lr}
 800455e:	4d07      	ldr	r5, [pc, #28]	@ (800457c <_lseek_r+0x20>)
 8004560:	4604      	mov	r4, r0
 8004562:	4608      	mov	r0, r1
 8004564:	4611      	mov	r1, r2
 8004566:	2200      	movs	r2, #0
 8004568:	602a      	str	r2, [r5, #0]
 800456a:	461a      	mov	r2, r3
 800456c:	f7fd faf9 	bl	8001b62 <_lseek>
 8004570:	1c43      	adds	r3, r0, #1
 8004572:	d102      	bne.n	800457a <_lseek_r+0x1e>
 8004574:	682b      	ldr	r3, [r5, #0]
 8004576:	b103      	cbz	r3, 800457a <_lseek_r+0x1e>
 8004578:	6023      	str	r3, [r4, #0]
 800457a:	bd38      	pop	{r3, r4, r5, pc}
 800457c:	20000398 	.word	0x20000398

08004580 <_read_r>:
 8004580:	b538      	push	{r3, r4, r5, lr}
 8004582:	4d07      	ldr	r5, [pc, #28]	@ (80045a0 <_read_r+0x20>)
 8004584:	4604      	mov	r4, r0
 8004586:	4608      	mov	r0, r1
 8004588:	4611      	mov	r1, r2
 800458a:	2200      	movs	r2, #0
 800458c:	602a      	str	r2, [r5, #0]
 800458e:	461a      	mov	r2, r3
 8004590:	f7fd fa87 	bl	8001aa2 <_read>
 8004594:	1c43      	adds	r3, r0, #1
 8004596:	d102      	bne.n	800459e <_read_r+0x1e>
 8004598:	682b      	ldr	r3, [r5, #0]
 800459a:	b103      	cbz	r3, 800459e <_read_r+0x1e>
 800459c:	6023      	str	r3, [r4, #0]
 800459e:	bd38      	pop	{r3, r4, r5, pc}
 80045a0:	20000398 	.word	0x20000398

080045a4 <_write_r>:
 80045a4:	b538      	push	{r3, r4, r5, lr}
 80045a6:	4d07      	ldr	r5, [pc, #28]	@ (80045c4 <_write_r+0x20>)
 80045a8:	4604      	mov	r4, r0
 80045aa:	4608      	mov	r0, r1
 80045ac:	4611      	mov	r1, r2
 80045ae:	2200      	movs	r2, #0
 80045b0:	602a      	str	r2, [r5, #0]
 80045b2:	461a      	mov	r2, r3
 80045b4:	f7fd fa92 	bl	8001adc <_write>
 80045b8:	1c43      	adds	r3, r0, #1
 80045ba:	d102      	bne.n	80045c2 <_write_r+0x1e>
 80045bc:	682b      	ldr	r3, [r5, #0]
 80045be:	b103      	cbz	r3, 80045c2 <_write_r+0x1e>
 80045c0:	6023      	str	r3, [r4, #0]
 80045c2:	bd38      	pop	{r3, r4, r5, pc}
 80045c4:	20000398 	.word	0x20000398

080045c8 <__errno>:
 80045c8:	4b01      	ldr	r3, [pc, #4]	@ (80045d0 <__errno+0x8>)
 80045ca:	6818      	ldr	r0, [r3, #0]
 80045cc:	4770      	bx	lr
 80045ce:	bf00      	nop
 80045d0:	20000018 	.word	0x20000018

080045d4 <__libc_init_array>:
 80045d4:	b570      	push	{r4, r5, r6, lr}
 80045d6:	4d0d      	ldr	r5, [pc, #52]	@ (800460c <__libc_init_array+0x38>)
 80045d8:	4c0d      	ldr	r4, [pc, #52]	@ (8004610 <__libc_init_array+0x3c>)
 80045da:	1b64      	subs	r4, r4, r5
 80045dc:	10a4      	asrs	r4, r4, #2
 80045de:	2600      	movs	r6, #0
 80045e0:	42a6      	cmp	r6, r4
 80045e2:	d109      	bne.n	80045f8 <__libc_init_array+0x24>
 80045e4:	4d0b      	ldr	r5, [pc, #44]	@ (8004614 <__libc_init_array+0x40>)
 80045e6:	4c0c      	ldr	r4, [pc, #48]	@ (8004618 <__libc_init_array+0x44>)
 80045e8:	f001 fe30 	bl	800624c <_init>
 80045ec:	1b64      	subs	r4, r4, r5
 80045ee:	10a4      	asrs	r4, r4, #2
 80045f0:	2600      	movs	r6, #0
 80045f2:	42a6      	cmp	r6, r4
 80045f4:	d105      	bne.n	8004602 <__libc_init_array+0x2e>
 80045f6:	bd70      	pop	{r4, r5, r6, pc}
 80045f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80045fc:	4798      	blx	r3
 80045fe:	3601      	adds	r6, #1
 8004600:	e7ee      	b.n	80045e0 <__libc_init_array+0xc>
 8004602:	f855 3b04 	ldr.w	r3, [r5], #4
 8004606:	4798      	blx	r3
 8004608:	3601      	adds	r6, #1
 800460a:	e7f2      	b.n	80045f2 <__libc_init_array+0x1e>
 800460c:	080066dc 	.word	0x080066dc
 8004610:	080066dc 	.word	0x080066dc
 8004614:	080066dc 	.word	0x080066dc
 8004618:	080066e0 	.word	0x080066e0

0800461c <__retarget_lock_init_recursive>:
 800461c:	4770      	bx	lr

0800461e <__retarget_lock_acquire_recursive>:
 800461e:	4770      	bx	lr

08004620 <__retarget_lock_release_recursive>:
 8004620:	4770      	bx	lr

08004622 <quorem>:
 8004622:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004626:	6903      	ldr	r3, [r0, #16]
 8004628:	690c      	ldr	r4, [r1, #16]
 800462a:	42a3      	cmp	r3, r4
 800462c:	4607      	mov	r7, r0
 800462e:	db7e      	blt.n	800472e <quorem+0x10c>
 8004630:	3c01      	subs	r4, #1
 8004632:	f101 0814 	add.w	r8, r1, #20
 8004636:	00a3      	lsls	r3, r4, #2
 8004638:	f100 0514 	add.w	r5, r0, #20
 800463c:	9300      	str	r3, [sp, #0]
 800463e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004642:	9301      	str	r3, [sp, #4]
 8004644:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004648:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800464c:	3301      	adds	r3, #1
 800464e:	429a      	cmp	r2, r3
 8004650:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004654:	fbb2 f6f3 	udiv	r6, r2, r3
 8004658:	d32e      	bcc.n	80046b8 <quorem+0x96>
 800465a:	f04f 0a00 	mov.w	sl, #0
 800465e:	46c4      	mov	ip, r8
 8004660:	46ae      	mov	lr, r5
 8004662:	46d3      	mov	fp, sl
 8004664:	f85c 3b04 	ldr.w	r3, [ip], #4
 8004668:	b298      	uxth	r0, r3
 800466a:	fb06 a000 	mla	r0, r6, r0, sl
 800466e:	0c02      	lsrs	r2, r0, #16
 8004670:	0c1b      	lsrs	r3, r3, #16
 8004672:	fb06 2303 	mla	r3, r6, r3, r2
 8004676:	f8de 2000 	ldr.w	r2, [lr]
 800467a:	b280      	uxth	r0, r0
 800467c:	b292      	uxth	r2, r2
 800467e:	1a12      	subs	r2, r2, r0
 8004680:	445a      	add	r2, fp
 8004682:	f8de 0000 	ldr.w	r0, [lr]
 8004686:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800468a:	b29b      	uxth	r3, r3
 800468c:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8004690:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8004694:	b292      	uxth	r2, r2
 8004696:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 800469a:	45e1      	cmp	r9, ip
 800469c:	f84e 2b04 	str.w	r2, [lr], #4
 80046a0:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80046a4:	d2de      	bcs.n	8004664 <quorem+0x42>
 80046a6:	9b00      	ldr	r3, [sp, #0]
 80046a8:	58eb      	ldr	r3, [r5, r3]
 80046aa:	b92b      	cbnz	r3, 80046b8 <quorem+0x96>
 80046ac:	9b01      	ldr	r3, [sp, #4]
 80046ae:	3b04      	subs	r3, #4
 80046b0:	429d      	cmp	r5, r3
 80046b2:	461a      	mov	r2, r3
 80046b4:	d32f      	bcc.n	8004716 <quorem+0xf4>
 80046b6:	613c      	str	r4, [r7, #16]
 80046b8:	4638      	mov	r0, r7
 80046ba:	f001 f97f 	bl	80059bc <__mcmp>
 80046be:	2800      	cmp	r0, #0
 80046c0:	db25      	blt.n	800470e <quorem+0xec>
 80046c2:	4629      	mov	r1, r5
 80046c4:	2000      	movs	r0, #0
 80046c6:	f858 2b04 	ldr.w	r2, [r8], #4
 80046ca:	f8d1 c000 	ldr.w	ip, [r1]
 80046ce:	fa1f fe82 	uxth.w	lr, r2
 80046d2:	fa1f f38c 	uxth.w	r3, ip
 80046d6:	eba3 030e 	sub.w	r3, r3, lr
 80046da:	4403      	add	r3, r0
 80046dc:	0c12      	lsrs	r2, r2, #16
 80046de:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80046e2:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80046e6:	b29b      	uxth	r3, r3
 80046e8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80046ec:	45c1      	cmp	r9, r8
 80046ee:	f841 3b04 	str.w	r3, [r1], #4
 80046f2:	ea4f 4022 	mov.w	r0, r2, asr #16
 80046f6:	d2e6      	bcs.n	80046c6 <quorem+0xa4>
 80046f8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80046fc:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004700:	b922      	cbnz	r2, 800470c <quorem+0xea>
 8004702:	3b04      	subs	r3, #4
 8004704:	429d      	cmp	r5, r3
 8004706:	461a      	mov	r2, r3
 8004708:	d30b      	bcc.n	8004722 <quorem+0x100>
 800470a:	613c      	str	r4, [r7, #16]
 800470c:	3601      	adds	r6, #1
 800470e:	4630      	mov	r0, r6
 8004710:	b003      	add	sp, #12
 8004712:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004716:	6812      	ldr	r2, [r2, #0]
 8004718:	3b04      	subs	r3, #4
 800471a:	2a00      	cmp	r2, #0
 800471c:	d1cb      	bne.n	80046b6 <quorem+0x94>
 800471e:	3c01      	subs	r4, #1
 8004720:	e7c6      	b.n	80046b0 <quorem+0x8e>
 8004722:	6812      	ldr	r2, [r2, #0]
 8004724:	3b04      	subs	r3, #4
 8004726:	2a00      	cmp	r2, #0
 8004728:	d1ef      	bne.n	800470a <quorem+0xe8>
 800472a:	3c01      	subs	r4, #1
 800472c:	e7ea      	b.n	8004704 <quorem+0xe2>
 800472e:	2000      	movs	r0, #0
 8004730:	e7ee      	b.n	8004710 <quorem+0xee>
 8004732:	0000      	movs	r0, r0
 8004734:	0000      	movs	r0, r0
	...

08004738 <_dtoa_r>:
 8004738:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800473c:	69c7      	ldr	r7, [r0, #28]
 800473e:	b097      	sub	sp, #92	@ 0x5c
 8004740:	ed8d 0b04 	vstr	d0, [sp, #16]
 8004744:	ec55 4b10 	vmov	r4, r5, d0
 8004748:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 800474a:	9107      	str	r1, [sp, #28]
 800474c:	4681      	mov	r9, r0
 800474e:	920c      	str	r2, [sp, #48]	@ 0x30
 8004750:	9311      	str	r3, [sp, #68]	@ 0x44
 8004752:	b97f      	cbnz	r7, 8004774 <_dtoa_r+0x3c>
 8004754:	2010      	movs	r0, #16
 8004756:	f000 fe09 	bl	800536c <malloc>
 800475a:	4602      	mov	r2, r0
 800475c:	f8c9 001c 	str.w	r0, [r9, #28]
 8004760:	b920      	cbnz	r0, 800476c <_dtoa_r+0x34>
 8004762:	4ba9      	ldr	r3, [pc, #676]	@ (8004a08 <_dtoa_r+0x2d0>)
 8004764:	21ef      	movs	r1, #239	@ 0xef
 8004766:	48a9      	ldr	r0, [pc, #676]	@ (8004a0c <_dtoa_r+0x2d4>)
 8004768:	f001 fcc0 	bl	80060ec <__assert_func>
 800476c:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8004770:	6007      	str	r7, [r0, #0]
 8004772:	60c7      	str	r7, [r0, #12]
 8004774:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004778:	6819      	ldr	r1, [r3, #0]
 800477a:	b159      	cbz	r1, 8004794 <_dtoa_r+0x5c>
 800477c:	685a      	ldr	r2, [r3, #4]
 800477e:	604a      	str	r2, [r1, #4]
 8004780:	2301      	movs	r3, #1
 8004782:	4093      	lsls	r3, r2
 8004784:	608b      	str	r3, [r1, #8]
 8004786:	4648      	mov	r0, r9
 8004788:	f000 fee6 	bl	8005558 <_Bfree>
 800478c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004790:	2200      	movs	r2, #0
 8004792:	601a      	str	r2, [r3, #0]
 8004794:	1e2b      	subs	r3, r5, #0
 8004796:	bfb9      	ittee	lt
 8004798:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800479c:	9305      	strlt	r3, [sp, #20]
 800479e:	2300      	movge	r3, #0
 80047a0:	6033      	strge	r3, [r6, #0]
 80047a2:	9f05      	ldr	r7, [sp, #20]
 80047a4:	4b9a      	ldr	r3, [pc, #616]	@ (8004a10 <_dtoa_r+0x2d8>)
 80047a6:	bfbc      	itt	lt
 80047a8:	2201      	movlt	r2, #1
 80047aa:	6032      	strlt	r2, [r6, #0]
 80047ac:	43bb      	bics	r3, r7
 80047ae:	d112      	bne.n	80047d6 <_dtoa_r+0x9e>
 80047b0:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80047b2:	f242 730f 	movw	r3, #9999	@ 0x270f
 80047b6:	6013      	str	r3, [r2, #0]
 80047b8:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80047bc:	4323      	orrs	r3, r4
 80047be:	f000 855a 	beq.w	8005276 <_dtoa_r+0xb3e>
 80047c2:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047c4:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8004a24 <_dtoa_r+0x2ec>
 80047c8:	2b00      	cmp	r3, #0
 80047ca:	f000 855c 	beq.w	8005286 <_dtoa_r+0xb4e>
 80047ce:	f10a 0303 	add.w	r3, sl, #3
 80047d2:	f000 bd56 	b.w	8005282 <_dtoa_r+0xb4a>
 80047d6:	ed9d 7b04 	vldr	d7, [sp, #16]
 80047da:	2200      	movs	r2, #0
 80047dc:	ec51 0b17 	vmov	r0, r1, d7
 80047e0:	2300      	movs	r3, #0
 80047e2:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 80047e6:	f7fc f97f 	bl	8000ae8 <__aeabi_dcmpeq>
 80047ea:	4680      	mov	r8, r0
 80047ec:	b158      	cbz	r0, 8004806 <_dtoa_r+0xce>
 80047ee:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 80047f0:	2301      	movs	r3, #1
 80047f2:	6013      	str	r3, [r2, #0]
 80047f4:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80047f6:	b113      	cbz	r3, 80047fe <_dtoa_r+0xc6>
 80047f8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80047fa:	4b86      	ldr	r3, [pc, #536]	@ (8004a14 <_dtoa_r+0x2dc>)
 80047fc:	6013      	str	r3, [r2, #0]
 80047fe:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8004a28 <_dtoa_r+0x2f0>
 8004802:	f000 bd40 	b.w	8005286 <_dtoa_r+0xb4e>
 8004806:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800480a:	aa14      	add	r2, sp, #80	@ 0x50
 800480c:	a915      	add	r1, sp, #84	@ 0x54
 800480e:	4648      	mov	r0, r9
 8004810:	f001 f984 	bl	8005b1c <__d2b>
 8004814:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8004818:	9002      	str	r0, [sp, #8]
 800481a:	2e00      	cmp	r6, #0
 800481c:	d078      	beq.n	8004910 <_dtoa_r+0x1d8>
 800481e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004820:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 8004824:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004828:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800482c:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8004830:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 8004834:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8004838:	4619      	mov	r1, r3
 800483a:	2200      	movs	r2, #0
 800483c:	4b76      	ldr	r3, [pc, #472]	@ (8004a18 <_dtoa_r+0x2e0>)
 800483e:	f7fb fd33 	bl	80002a8 <__aeabi_dsub>
 8004842:	a36b      	add	r3, pc, #428	@ (adr r3, 80049f0 <_dtoa_r+0x2b8>)
 8004844:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004848:	f7fb fee6 	bl	8000618 <__aeabi_dmul>
 800484c:	a36a      	add	r3, pc, #424	@ (adr r3, 80049f8 <_dtoa_r+0x2c0>)
 800484e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004852:	f7fb fd2b 	bl	80002ac <__adddf3>
 8004856:	4604      	mov	r4, r0
 8004858:	4630      	mov	r0, r6
 800485a:	460d      	mov	r5, r1
 800485c:	f7fb fe72 	bl	8000544 <__aeabi_i2d>
 8004860:	a367      	add	r3, pc, #412	@ (adr r3, 8004a00 <_dtoa_r+0x2c8>)
 8004862:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004866:	f7fb fed7 	bl	8000618 <__aeabi_dmul>
 800486a:	4602      	mov	r2, r0
 800486c:	460b      	mov	r3, r1
 800486e:	4620      	mov	r0, r4
 8004870:	4629      	mov	r1, r5
 8004872:	f7fb fd1b 	bl	80002ac <__adddf3>
 8004876:	4604      	mov	r4, r0
 8004878:	460d      	mov	r5, r1
 800487a:	f7fc f97d 	bl	8000b78 <__aeabi_d2iz>
 800487e:	2200      	movs	r2, #0
 8004880:	4607      	mov	r7, r0
 8004882:	2300      	movs	r3, #0
 8004884:	4620      	mov	r0, r4
 8004886:	4629      	mov	r1, r5
 8004888:	f7fc f938 	bl	8000afc <__aeabi_dcmplt>
 800488c:	b140      	cbz	r0, 80048a0 <_dtoa_r+0x168>
 800488e:	4638      	mov	r0, r7
 8004890:	f7fb fe58 	bl	8000544 <__aeabi_i2d>
 8004894:	4622      	mov	r2, r4
 8004896:	462b      	mov	r3, r5
 8004898:	f7fc f926 	bl	8000ae8 <__aeabi_dcmpeq>
 800489c:	b900      	cbnz	r0, 80048a0 <_dtoa_r+0x168>
 800489e:	3f01      	subs	r7, #1
 80048a0:	2f16      	cmp	r7, #22
 80048a2:	d852      	bhi.n	800494a <_dtoa_r+0x212>
 80048a4:	4b5d      	ldr	r3, [pc, #372]	@ (8004a1c <_dtoa_r+0x2e4>)
 80048a6:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80048aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ae:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80048b2:	f7fc f923 	bl	8000afc <__aeabi_dcmplt>
 80048b6:	2800      	cmp	r0, #0
 80048b8:	d049      	beq.n	800494e <_dtoa_r+0x216>
 80048ba:	3f01      	subs	r7, #1
 80048bc:	2300      	movs	r3, #0
 80048be:	9310      	str	r3, [sp, #64]	@ 0x40
 80048c0:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 80048c2:	1b9b      	subs	r3, r3, r6
 80048c4:	1e5a      	subs	r2, r3, #1
 80048c6:	bf45      	ittet	mi
 80048c8:	f1c3 0301 	rsbmi	r3, r3, #1
 80048cc:	9300      	strmi	r3, [sp, #0]
 80048ce:	2300      	movpl	r3, #0
 80048d0:	2300      	movmi	r3, #0
 80048d2:	9206      	str	r2, [sp, #24]
 80048d4:	bf54      	ite	pl
 80048d6:	9300      	strpl	r3, [sp, #0]
 80048d8:	9306      	strmi	r3, [sp, #24]
 80048da:	2f00      	cmp	r7, #0
 80048dc:	db39      	blt.n	8004952 <_dtoa_r+0x21a>
 80048de:	9b06      	ldr	r3, [sp, #24]
 80048e0:	970d      	str	r7, [sp, #52]	@ 0x34
 80048e2:	443b      	add	r3, r7
 80048e4:	9306      	str	r3, [sp, #24]
 80048e6:	2300      	movs	r3, #0
 80048e8:	9308      	str	r3, [sp, #32]
 80048ea:	9b07      	ldr	r3, [sp, #28]
 80048ec:	2b09      	cmp	r3, #9
 80048ee:	d863      	bhi.n	80049b8 <_dtoa_r+0x280>
 80048f0:	2b05      	cmp	r3, #5
 80048f2:	bfc4      	itt	gt
 80048f4:	3b04      	subgt	r3, #4
 80048f6:	9307      	strgt	r3, [sp, #28]
 80048f8:	9b07      	ldr	r3, [sp, #28]
 80048fa:	f1a3 0302 	sub.w	r3, r3, #2
 80048fe:	bfcc      	ite	gt
 8004900:	2400      	movgt	r4, #0
 8004902:	2401      	movle	r4, #1
 8004904:	2b03      	cmp	r3, #3
 8004906:	d863      	bhi.n	80049d0 <_dtoa_r+0x298>
 8004908:	e8df f003 	tbb	[pc, r3]
 800490c:	2b375452 	.word	0x2b375452
 8004910:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8004914:	441e      	add	r6, r3
 8004916:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800491a:	2b20      	cmp	r3, #32
 800491c:	bfc1      	itttt	gt
 800491e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8004922:	409f      	lslgt	r7, r3
 8004924:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8004928:	fa24 f303 	lsrgt.w	r3, r4, r3
 800492c:	bfd6      	itet	le
 800492e:	f1c3 0320 	rsble	r3, r3, #32
 8004932:	ea47 0003 	orrgt.w	r0, r7, r3
 8004936:	fa04 f003 	lslle.w	r0, r4, r3
 800493a:	f7fb fdf3 	bl	8000524 <__aeabi_ui2d>
 800493e:	2201      	movs	r2, #1
 8004940:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8004944:	3e01      	subs	r6, #1
 8004946:	9212      	str	r2, [sp, #72]	@ 0x48
 8004948:	e776      	b.n	8004838 <_dtoa_r+0x100>
 800494a:	2301      	movs	r3, #1
 800494c:	e7b7      	b.n	80048be <_dtoa_r+0x186>
 800494e:	9010      	str	r0, [sp, #64]	@ 0x40
 8004950:	e7b6      	b.n	80048c0 <_dtoa_r+0x188>
 8004952:	9b00      	ldr	r3, [sp, #0]
 8004954:	1bdb      	subs	r3, r3, r7
 8004956:	9300      	str	r3, [sp, #0]
 8004958:	427b      	negs	r3, r7
 800495a:	9308      	str	r3, [sp, #32]
 800495c:	2300      	movs	r3, #0
 800495e:	930d      	str	r3, [sp, #52]	@ 0x34
 8004960:	e7c3      	b.n	80048ea <_dtoa_r+0x1b2>
 8004962:	2301      	movs	r3, #1
 8004964:	9309      	str	r3, [sp, #36]	@ 0x24
 8004966:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004968:	eb07 0b03 	add.w	fp, r7, r3
 800496c:	f10b 0301 	add.w	r3, fp, #1
 8004970:	2b01      	cmp	r3, #1
 8004972:	9303      	str	r3, [sp, #12]
 8004974:	bfb8      	it	lt
 8004976:	2301      	movlt	r3, #1
 8004978:	e006      	b.n	8004988 <_dtoa_r+0x250>
 800497a:	2301      	movs	r3, #1
 800497c:	9309      	str	r3, [sp, #36]	@ 0x24
 800497e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004980:	2b00      	cmp	r3, #0
 8004982:	dd28      	ble.n	80049d6 <_dtoa_r+0x29e>
 8004984:	469b      	mov	fp, r3
 8004986:	9303      	str	r3, [sp, #12]
 8004988:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800498c:	2100      	movs	r1, #0
 800498e:	2204      	movs	r2, #4
 8004990:	f102 0514 	add.w	r5, r2, #20
 8004994:	429d      	cmp	r5, r3
 8004996:	d926      	bls.n	80049e6 <_dtoa_r+0x2ae>
 8004998:	6041      	str	r1, [r0, #4]
 800499a:	4648      	mov	r0, r9
 800499c:	f000 fd9c 	bl	80054d8 <_Balloc>
 80049a0:	4682      	mov	sl, r0
 80049a2:	2800      	cmp	r0, #0
 80049a4:	d142      	bne.n	8004a2c <_dtoa_r+0x2f4>
 80049a6:	4b1e      	ldr	r3, [pc, #120]	@ (8004a20 <_dtoa_r+0x2e8>)
 80049a8:	4602      	mov	r2, r0
 80049aa:	f240 11af 	movw	r1, #431	@ 0x1af
 80049ae:	e6da      	b.n	8004766 <_dtoa_r+0x2e>
 80049b0:	2300      	movs	r3, #0
 80049b2:	e7e3      	b.n	800497c <_dtoa_r+0x244>
 80049b4:	2300      	movs	r3, #0
 80049b6:	e7d5      	b.n	8004964 <_dtoa_r+0x22c>
 80049b8:	2401      	movs	r4, #1
 80049ba:	2300      	movs	r3, #0
 80049bc:	9307      	str	r3, [sp, #28]
 80049be:	9409      	str	r4, [sp, #36]	@ 0x24
 80049c0:	f04f 3bff 	mov.w	fp, #4294967295
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8cd b00c 	str.w	fp, [sp, #12]
 80049ca:	2312      	movs	r3, #18
 80049cc:	920c      	str	r2, [sp, #48]	@ 0x30
 80049ce:	e7db      	b.n	8004988 <_dtoa_r+0x250>
 80049d0:	2301      	movs	r3, #1
 80049d2:	9309      	str	r3, [sp, #36]	@ 0x24
 80049d4:	e7f4      	b.n	80049c0 <_dtoa_r+0x288>
 80049d6:	f04f 0b01 	mov.w	fp, #1
 80049da:	f8cd b00c 	str.w	fp, [sp, #12]
 80049de:	465b      	mov	r3, fp
 80049e0:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 80049e4:	e7d0      	b.n	8004988 <_dtoa_r+0x250>
 80049e6:	3101      	adds	r1, #1
 80049e8:	0052      	lsls	r2, r2, #1
 80049ea:	e7d1      	b.n	8004990 <_dtoa_r+0x258>
 80049ec:	f3af 8000 	nop.w
 80049f0:	636f4361 	.word	0x636f4361
 80049f4:	3fd287a7 	.word	0x3fd287a7
 80049f8:	8b60c8b3 	.word	0x8b60c8b3
 80049fc:	3fc68a28 	.word	0x3fc68a28
 8004a00:	509f79fb 	.word	0x509f79fb
 8004a04:	3fd34413 	.word	0x3fd34413
 8004a08:	080063a1 	.word	0x080063a1
 8004a0c:	080063b8 	.word	0x080063b8
 8004a10:	7ff00000 	.word	0x7ff00000
 8004a14:	08006371 	.word	0x08006371
 8004a18:	3ff80000 	.word	0x3ff80000
 8004a1c:	08006508 	.word	0x08006508
 8004a20:	08006410 	.word	0x08006410
 8004a24:	0800639d 	.word	0x0800639d
 8004a28:	08006370 	.word	0x08006370
 8004a2c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8004a30:	6018      	str	r0, [r3, #0]
 8004a32:	9b03      	ldr	r3, [sp, #12]
 8004a34:	2b0e      	cmp	r3, #14
 8004a36:	f200 80a1 	bhi.w	8004b7c <_dtoa_r+0x444>
 8004a3a:	2c00      	cmp	r4, #0
 8004a3c:	f000 809e 	beq.w	8004b7c <_dtoa_r+0x444>
 8004a40:	2f00      	cmp	r7, #0
 8004a42:	dd33      	ble.n	8004aac <_dtoa_r+0x374>
 8004a44:	4b9c      	ldr	r3, [pc, #624]	@ (8004cb8 <_dtoa_r+0x580>)
 8004a46:	f007 020f 	and.w	r2, r7, #15
 8004a4a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004a4e:	ed93 7b00 	vldr	d7, [r3]
 8004a52:	05f8      	lsls	r0, r7, #23
 8004a54:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8004a58:	ea4f 1427 	mov.w	r4, r7, asr #4
 8004a5c:	d516      	bpl.n	8004a8c <_dtoa_r+0x354>
 8004a5e:	4b97      	ldr	r3, [pc, #604]	@ (8004cbc <_dtoa_r+0x584>)
 8004a60:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004a64:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8004a68:	f7fb ff00 	bl	800086c <__aeabi_ddiv>
 8004a6c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a70:	f004 040f 	and.w	r4, r4, #15
 8004a74:	2603      	movs	r6, #3
 8004a76:	4d91      	ldr	r5, [pc, #580]	@ (8004cbc <_dtoa_r+0x584>)
 8004a78:	b954      	cbnz	r4, 8004a90 <_dtoa_r+0x358>
 8004a7a:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004a7e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004a82:	f7fb fef3 	bl	800086c <__aeabi_ddiv>
 8004a86:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004a8a:	e028      	b.n	8004ade <_dtoa_r+0x3a6>
 8004a8c:	2602      	movs	r6, #2
 8004a8e:	e7f2      	b.n	8004a76 <_dtoa_r+0x33e>
 8004a90:	07e1      	lsls	r1, r4, #31
 8004a92:	d508      	bpl.n	8004aa6 <_dtoa_r+0x36e>
 8004a94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004a98:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004a9c:	f7fb fdbc 	bl	8000618 <__aeabi_dmul>
 8004aa0:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004aa4:	3601      	adds	r6, #1
 8004aa6:	1064      	asrs	r4, r4, #1
 8004aa8:	3508      	adds	r5, #8
 8004aaa:	e7e5      	b.n	8004a78 <_dtoa_r+0x340>
 8004aac:	f000 80af 	beq.w	8004c0e <_dtoa_r+0x4d6>
 8004ab0:	427c      	negs	r4, r7
 8004ab2:	4b81      	ldr	r3, [pc, #516]	@ (8004cb8 <_dtoa_r+0x580>)
 8004ab4:	4d81      	ldr	r5, [pc, #516]	@ (8004cbc <_dtoa_r+0x584>)
 8004ab6:	f004 020f 	and.w	r2, r4, #15
 8004aba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8004abe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ac2:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8004ac6:	f7fb fda7 	bl	8000618 <__aeabi_dmul>
 8004aca:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004ace:	1124      	asrs	r4, r4, #4
 8004ad0:	2300      	movs	r3, #0
 8004ad2:	2602      	movs	r6, #2
 8004ad4:	2c00      	cmp	r4, #0
 8004ad6:	f040 808f 	bne.w	8004bf8 <_dtoa_r+0x4c0>
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d1d3      	bne.n	8004a86 <_dtoa_r+0x34e>
 8004ade:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004ae0:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	f000 8094 	beq.w	8004c12 <_dtoa_r+0x4da>
 8004aea:	4b75      	ldr	r3, [pc, #468]	@ (8004cc0 <_dtoa_r+0x588>)
 8004aec:	2200      	movs	r2, #0
 8004aee:	4620      	mov	r0, r4
 8004af0:	4629      	mov	r1, r5
 8004af2:	f7fc f803 	bl	8000afc <__aeabi_dcmplt>
 8004af6:	2800      	cmp	r0, #0
 8004af8:	f000 808b 	beq.w	8004c12 <_dtoa_r+0x4da>
 8004afc:	9b03      	ldr	r3, [sp, #12]
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	f000 8087 	beq.w	8004c12 <_dtoa_r+0x4da>
 8004b04:	f1bb 0f00 	cmp.w	fp, #0
 8004b08:	dd34      	ble.n	8004b74 <_dtoa_r+0x43c>
 8004b0a:	4620      	mov	r0, r4
 8004b0c:	4b6d      	ldr	r3, [pc, #436]	@ (8004cc4 <_dtoa_r+0x58c>)
 8004b0e:	2200      	movs	r2, #0
 8004b10:	4629      	mov	r1, r5
 8004b12:	f7fb fd81 	bl	8000618 <__aeabi_dmul>
 8004b16:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004b1a:	f107 38ff 	add.w	r8, r7, #4294967295
 8004b1e:	3601      	adds	r6, #1
 8004b20:	465c      	mov	r4, fp
 8004b22:	4630      	mov	r0, r6
 8004b24:	f7fb fd0e 	bl	8000544 <__aeabi_i2d>
 8004b28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b2c:	f7fb fd74 	bl	8000618 <__aeabi_dmul>
 8004b30:	4b65      	ldr	r3, [pc, #404]	@ (8004cc8 <_dtoa_r+0x590>)
 8004b32:	2200      	movs	r2, #0
 8004b34:	f7fb fbba 	bl	80002ac <__adddf3>
 8004b38:	4605      	mov	r5, r0
 8004b3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8004b3e:	2c00      	cmp	r4, #0
 8004b40:	d16a      	bne.n	8004c18 <_dtoa_r+0x4e0>
 8004b42:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b46:	4b61      	ldr	r3, [pc, #388]	@ (8004ccc <_dtoa_r+0x594>)
 8004b48:	2200      	movs	r2, #0
 8004b4a:	f7fb fbad 	bl	80002a8 <__aeabi_dsub>
 8004b4e:	4602      	mov	r2, r0
 8004b50:	460b      	mov	r3, r1
 8004b52:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004b56:	462a      	mov	r2, r5
 8004b58:	4633      	mov	r3, r6
 8004b5a:	f7fb ffed 	bl	8000b38 <__aeabi_dcmpgt>
 8004b5e:	2800      	cmp	r0, #0
 8004b60:	f040 8298 	bne.w	8005094 <_dtoa_r+0x95c>
 8004b64:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004b68:	462a      	mov	r2, r5
 8004b6a:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004b6e:	f7fb ffc5 	bl	8000afc <__aeabi_dcmplt>
 8004b72:	bb38      	cbnz	r0, 8004bc4 <_dtoa_r+0x48c>
 8004b74:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8004b78:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8004b7c:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	f2c0 8157 	blt.w	8004e32 <_dtoa_r+0x6fa>
 8004b84:	2f0e      	cmp	r7, #14
 8004b86:	f300 8154 	bgt.w	8004e32 <_dtoa_r+0x6fa>
 8004b8a:	4b4b      	ldr	r3, [pc, #300]	@ (8004cb8 <_dtoa_r+0x580>)
 8004b8c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8004b90:	ed93 7b00 	vldr	d7, [r3]
 8004b94:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	ed8d 7b00 	vstr	d7, [sp]
 8004b9c:	f280 80e5 	bge.w	8004d6a <_dtoa_r+0x632>
 8004ba0:	9b03      	ldr	r3, [sp, #12]
 8004ba2:	2b00      	cmp	r3, #0
 8004ba4:	f300 80e1 	bgt.w	8004d6a <_dtoa_r+0x632>
 8004ba8:	d10c      	bne.n	8004bc4 <_dtoa_r+0x48c>
 8004baa:	4b48      	ldr	r3, [pc, #288]	@ (8004ccc <_dtoa_r+0x594>)
 8004bac:	2200      	movs	r2, #0
 8004bae:	ec51 0b17 	vmov	r0, r1, d7
 8004bb2:	f7fb fd31 	bl	8000618 <__aeabi_dmul>
 8004bb6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bba:	f7fb ffb3 	bl	8000b24 <__aeabi_dcmpge>
 8004bbe:	2800      	cmp	r0, #0
 8004bc0:	f000 8266 	beq.w	8005090 <_dtoa_r+0x958>
 8004bc4:	2400      	movs	r4, #0
 8004bc6:	4625      	mov	r5, r4
 8004bc8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8004bca:	4656      	mov	r6, sl
 8004bcc:	ea6f 0803 	mvn.w	r8, r3
 8004bd0:	2700      	movs	r7, #0
 8004bd2:	4621      	mov	r1, r4
 8004bd4:	4648      	mov	r0, r9
 8004bd6:	f000 fcbf 	bl	8005558 <_Bfree>
 8004bda:	2d00      	cmp	r5, #0
 8004bdc:	f000 80bd 	beq.w	8004d5a <_dtoa_r+0x622>
 8004be0:	b12f      	cbz	r7, 8004bee <_dtoa_r+0x4b6>
 8004be2:	42af      	cmp	r7, r5
 8004be4:	d003      	beq.n	8004bee <_dtoa_r+0x4b6>
 8004be6:	4639      	mov	r1, r7
 8004be8:	4648      	mov	r0, r9
 8004bea:	f000 fcb5 	bl	8005558 <_Bfree>
 8004bee:	4629      	mov	r1, r5
 8004bf0:	4648      	mov	r0, r9
 8004bf2:	f000 fcb1 	bl	8005558 <_Bfree>
 8004bf6:	e0b0      	b.n	8004d5a <_dtoa_r+0x622>
 8004bf8:	07e2      	lsls	r2, r4, #31
 8004bfa:	d505      	bpl.n	8004c08 <_dtoa_r+0x4d0>
 8004bfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c00:	f7fb fd0a 	bl	8000618 <__aeabi_dmul>
 8004c04:	3601      	adds	r6, #1
 8004c06:	2301      	movs	r3, #1
 8004c08:	1064      	asrs	r4, r4, #1
 8004c0a:	3508      	adds	r5, #8
 8004c0c:	e762      	b.n	8004ad4 <_dtoa_r+0x39c>
 8004c0e:	2602      	movs	r6, #2
 8004c10:	e765      	b.n	8004ade <_dtoa_r+0x3a6>
 8004c12:	9c03      	ldr	r4, [sp, #12]
 8004c14:	46b8      	mov	r8, r7
 8004c16:	e784      	b.n	8004b22 <_dtoa_r+0x3ea>
 8004c18:	4b27      	ldr	r3, [pc, #156]	@ (8004cb8 <_dtoa_r+0x580>)
 8004c1a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8004c1c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8004c20:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8004c24:	4454      	add	r4, sl
 8004c26:	2900      	cmp	r1, #0
 8004c28:	d054      	beq.n	8004cd4 <_dtoa_r+0x59c>
 8004c2a:	4929      	ldr	r1, [pc, #164]	@ (8004cd0 <_dtoa_r+0x598>)
 8004c2c:	2000      	movs	r0, #0
 8004c2e:	f7fb fe1d 	bl	800086c <__aeabi_ddiv>
 8004c32:	4633      	mov	r3, r6
 8004c34:	462a      	mov	r2, r5
 8004c36:	f7fb fb37 	bl	80002a8 <__aeabi_dsub>
 8004c3a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004c3e:	4656      	mov	r6, sl
 8004c40:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c44:	f7fb ff98 	bl	8000b78 <__aeabi_d2iz>
 8004c48:	4605      	mov	r5, r0
 8004c4a:	f7fb fc7b 	bl	8000544 <__aeabi_i2d>
 8004c4e:	4602      	mov	r2, r0
 8004c50:	460b      	mov	r3, r1
 8004c52:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004c56:	f7fb fb27 	bl	80002a8 <__aeabi_dsub>
 8004c5a:	3530      	adds	r5, #48	@ 0x30
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004c64:	f806 5b01 	strb.w	r5, [r6], #1
 8004c68:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c6c:	f7fb ff46 	bl	8000afc <__aeabi_dcmplt>
 8004c70:	2800      	cmp	r0, #0
 8004c72:	d172      	bne.n	8004d5a <_dtoa_r+0x622>
 8004c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c78:	4911      	ldr	r1, [pc, #68]	@ (8004cc0 <_dtoa_r+0x588>)
 8004c7a:	2000      	movs	r0, #0
 8004c7c:	f7fb fb14 	bl	80002a8 <__aeabi_dsub>
 8004c80:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004c84:	f7fb ff3a 	bl	8000afc <__aeabi_dcmplt>
 8004c88:	2800      	cmp	r0, #0
 8004c8a:	f040 80b4 	bne.w	8004df6 <_dtoa_r+0x6be>
 8004c8e:	42a6      	cmp	r6, r4
 8004c90:	f43f af70 	beq.w	8004b74 <_dtoa_r+0x43c>
 8004c94:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004c98:	4b0a      	ldr	r3, [pc, #40]	@ (8004cc4 <_dtoa_r+0x58c>)
 8004c9a:	2200      	movs	r2, #0
 8004c9c:	f7fb fcbc 	bl	8000618 <__aeabi_dmul>
 8004ca0:	4b08      	ldr	r3, [pc, #32]	@ (8004cc4 <_dtoa_r+0x58c>)
 8004ca2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ca6:	2200      	movs	r2, #0
 8004ca8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cac:	f7fb fcb4 	bl	8000618 <__aeabi_dmul>
 8004cb0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004cb4:	e7c4      	b.n	8004c40 <_dtoa_r+0x508>
 8004cb6:	bf00      	nop
 8004cb8:	08006508 	.word	0x08006508
 8004cbc:	080064e0 	.word	0x080064e0
 8004cc0:	3ff00000 	.word	0x3ff00000
 8004cc4:	40240000 	.word	0x40240000
 8004cc8:	401c0000 	.word	0x401c0000
 8004ccc:	40140000 	.word	0x40140000
 8004cd0:	3fe00000 	.word	0x3fe00000
 8004cd4:	4631      	mov	r1, r6
 8004cd6:	4628      	mov	r0, r5
 8004cd8:	f7fb fc9e 	bl	8000618 <__aeabi_dmul>
 8004cdc:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8004ce0:	9413      	str	r4, [sp, #76]	@ 0x4c
 8004ce2:	4656      	mov	r6, sl
 8004ce4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004ce8:	f7fb ff46 	bl	8000b78 <__aeabi_d2iz>
 8004cec:	4605      	mov	r5, r0
 8004cee:	f7fb fc29 	bl	8000544 <__aeabi_i2d>
 8004cf2:	4602      	mov	r2, r0
 8004cf4:	460b      	mov	r3, r1
 8004cf6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004cfa:	f7fb fad5 	bl	80002a8 <__aeabi_dsub>
 8004cfe:	3530      	adds	r5, #48	@ 0x30
 8004d00:	f806 5b01 	strb.w	r5, [r6], #1
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	42a6      	cmp	r6, r4
 8004d0a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8004d0e:	f04f 0200 	mov.w	r2, #0
 8004d12:	d124      	bne.n	8004d5e <_dtoa_r+0x626>
 8004d14:	4baf      	ldr	r3, [pc, #700]	@ (8004fd4 <_dtoa_r+0x89c>)
 8004d16:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8004d1a:	f7fb fac7 	bl	80002ac <__adddf3>
 8004d1e:	4602      	mov	r2, r0
 8004d20:	460b      	mov	r3, r1
 8004d22:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d26:	f7fb ff07 	bl	8000b38 <__aeabi_dcmpgt>
 8004d2a:	2800      	cmp	r0, #0
 8004d2c:	d163      	bne.n	8004df6 <_dtoa_r+0x6be>
 8004d2e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8004d32:	49a8      	ldr	r1, [pc, #672]	@ (8004fd4 <_dtoa_r+0x89c>)
 8004d34:	2000      	movs	r0, #0
 8004d36:	f7fb fab7 	bl	80002a8 <__aeabi_dsub>
 8004d3a:	4602      	mov	r2, r0
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8004d42:	f7fb fedb 	bl	8000afc <__aeabi_dcmplt>
 8004d46:	2800      	cmp	r0, #0
 8004d48:	f43f af14 	beq.w	8004b74 <_dtoa_r+0x43c>
 8004d4c:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8004d4e:	1e73      	subs	r3, r6, #1
 8004d50:	9313      	str	r3, [sp, #76]	@ 0x4c
 8004d52:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8004d56:	2b30      	cmp	r3, #48	@ 0x30
 8004d58:	d0f8      	beq.n	8004d4c <_dtoa_r+0x614>
 8004d5a:	4647      	mov	r7, r8
 8004d5c:	e03b      	b.n	8004dd6 <_dtoa_r+0x69e>
 8004d5e:	4b9e      	ldr	r3, [pc, #632]	@ (8004fd8 <_dtoa_r+0x8a0>)
 8004d60:	f7fb fc5a 	bl	8000618 <__aeabi_dmul>
 8004d64:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8004d68:	e7bc      	b.n	8004ce4 <_dtoa_r+0x5ac>
 8004d6a:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8004d6e:	4656      	mov	r6, sl
 8004d70:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d74:	4620      	mov	r0, r4
 8004d76:	4629      	mov	r1, r5
 8004d78:	f7fb fd78 	bl	800086c <__aeabi_ddiv>
 8004d7c:	f7fb fefc 	bl	8000b78 <__aeabi_d2iz>
 8004d80:	4680      	mov	r8, r0
 8004d82:	f7fb fbdf 	bl	8000544 <__aeabi_i2d>
 8004d86:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d8a:	f7fb fc45 	bl	8000618 <__aeabi_dmul>
 8004d8e:	4602      	mov	r2, r0
 8004d90:	460b      	mov	r3, r1
 8004d92:	4620      	mov	r0, r4
 8004d94:	4629      	mov	r1, r5
 8004d96:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8004d9a:	f7fb fa85 	bl	80002a8 <__aeabi_dsub>
 8004d9e:	f806 4b01 	strb.w	r4, [r6], #1
 8004da2:	9d03      	ldr	r5, [sp, #12]
 8004da4:	eba6 040a 	sub.w	r4, r6, sl
 8004da8:	42a5      	cmp	r5, r4
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	d133      	bne.n	8004e18 <_dtoa_r+0x6e0>
 8004db0:	f7fb fa7c 	bl	80002ac <__adddf3>
 8004db4:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004db8:	4604      	mov	r4, r0
 8004dba:	460d      	mov	r5, r1
 8004dbc:	f7fb febc 	bl	8000b38 <__aeabi_dcmpgt>
 8004dc0:	b9c0      	cbnz	r0, 8004df4 <_dtoa_r+0x6bc>
 8004dc2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004dc6:	4620      	mov	r0, r4
 8004dc8:	4629      	mov	r1, r5
 8004dca:	f7fb fe8d 	bl	8000ae8 <__aeabi_dcmpeq>
 8004dce:	b110      	cbz	r0, 8004dd6 <_dtoa_r+0x69e>
 8004dd0:	f018 0f01 	tst.w	r8, #1
 8004dd4:	d10e      	bne.n	8004df4 <_dtoa_r+0x6bc>
 8004dd6:	9902      	ldr	r1, [sp, #8]
 8004dd8:	4648      	mov	r0, r9
 8004dda:	f000 fbbd 	bl	8005558 <_Bfree>
 8004dde:	2300      	movs	r3, #0
 8004de0:	7033      	strb	r3, [r6, #0]
 8004de2:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8004de4:	3701      	adds	r7, #1
 8004de6:	601f      	str	r7, [r3, #0]
 8004de8:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	f000 824b 	beq.w	8005286 <_dtoa_r+0xb4e>
 8004df0:	601e      	str	r6, [r3, #0]
 8004df2:	e248      	b.n	8005286 <_dtoa_r+0xb4e>
 8004df4:	46b8      	mov	r8, r7
 8004df6:	4633      	mov	r3, r6
 8004df8:	461e      	mov	r6, r3
 8004dfa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8004dfe:	2a39      	cmp	r2, #57	@ 0x39
 8004e00:	d106      	bne.n	8004e10 <_dtoa_r+0x6d8>
 8004e02:	459a      	cmp	sl, r3
 8004e04:	d1f8      	bne.n	8004df8 <_dtoa_r+0x6c0>
 8004e06:	2230      	movs	r2, #48	@ 0x30
 8004e08:	f108 0801 	add.w	r8, r8, #1
 8004e0c:	f88a 2000 	strb.w	r2, [sl]
 8004e10:	781a      	ldrb	r2, [r3, #0]
 8004e12:	3201      	adds	r2, #1
 8004e14:	701a      	strb	r2, [r3, #0]
 8004e16:	e7a0      	b.n	8004d5a <_dtoa_r+0x622>
 8004e18:	4b6f      	ldr	r3, [pc, #444]	@ (8004fd8 <_dtoa_r+0x8a0>)
 8004e1a:	2200      	movs	r2, #0
 8004e1c:	f7fb fbfc 	bl	8000618 <__aeabi_dmul>
 8004e20:	2200      	movs	r2, #0
 8004e22:	2300      	movs	r3, #0
 8004e24:	4604      	mov	r4, r0
 8004e26:	460d      	mov	r5, r1
 8004e28:	f7fb fe5e 	bl	8000ae8 <__aeabi_dcmpeq>
 8004e2c:	2800      	cmp	r0, #0
 8004e2e:	d09f      	beq.n	8004d70 <_dtoa_r+0x638>
 8004e30:	e7d1      	b.n	8004dd6 <_dtoa_r+0x69e>
 8004e32:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e34:	2a00      	cmp	r2, #0
 8004e36:	f000 80ea 	beq.w	800500e <_dtoa_r+0x8d6>
 8004e3a:	9a07      	ldr	r2, [sp, #28]
 8004e3c:	2a01      	cmp	r2, #1
 8004e3e:	f300 80cd 	bgt.w	8004fdc <_dtoa_r+0x8a4>
 8004e42:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8004e44:	2a00      	cmp	r2, #0
 8004e46:	f000 80c1 	beq.w	8004fcc <_dtoa_r+0x894>
 8004e4a:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8004e4e:	9c08      	ldr	r4, [sp, #32]
 8004e50:	9e00      	ldr	r6, [sp, #0]
 8004e52:	9a00      	ldr	r2, [sp, #0]
 8004e54:	441a      	add	r2, r3
 8004e56:	9200      	str	r2, [sp, #0]
 8004e58:	9a06      	ldr	r2, [sp, #24]
 8004e5a:	2101      	movs	r1, #1
 8004e5c:	441a      	add	r2, r3
 8004e5e:	4648      	mov	r0, r9
 8004e60:	9206      	str	r2, [sp, #24]
 8004e62:	f000 fc2d 	bl	80056c0 <__i2b>
 8004e66:	4605      	mov	r5, r0
 8004e68:	b166      	cbz	r6, 8004e84 <_dtoa_r+0x74c>
 8004e6a:	9b06      	ldr	r3, [sp, #24]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	dd09      	ble.n	8004e84 <_dtoa_r+0x74c>
 8004e70:	42b3      	cmp	r3, r6
 8004e72:	9a00      	ldr	r2, [sp, #0]
 8004e74:	bfa8      	it	ge
 8004e76:	4633      	movge	r3, r6
 8004e78:	1ad2      	subs	r2, r2, r3
 8004e7a:	9200      	str	r2, [sp, #0]
 8004e7c:	9a06      	ldr	r2, [sp, #24]
 8004e7e:	1af6      	subs	r6, r6, r3
 8004e80:	1ad3      	subs	r3, r2, r3
 8004e82:	9306      	str	r3, [sp, #24]
 8004e84:	9b08      	ldr	r3, [sp, #32]
 8004e86:	b30b      	cbz	r3, 8004ecc <_dtoa_r+0x794>
 8004e88:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 80c6 	beq.w	800501c <_dtoa_r+0x8e4>
 8004e90:	2c00      	cmp	r4, #0
 8004e92:	f000 80c0 	beq.w	8005016 <_dtoa_r+0x8de>
 8004e96:	4629      	mov	r1, r5
 8004e98:	4622      	mov	r2, r4
 8004e9a:	4648      	mov	r0, r9
 8004e9c:	f000 fcc8 	bl	8005830 <__pow5mult>
 8004ea0:	9a02      	ldr	r2, [sp, #8]
 8004ea2:	4601      	mov	r1, r0
 8004ea4:	4605      	mov	r5, r0
 8004ea6:	4648      	mov	r0, r9
 8004ea8:	f000 fc20 	bl	80056ec <__multiply>
 8004eac:	9902      	ldr	r1, [sp, #8]
 8004eae:	4680      	mov	r8, r0
 8004eb0:	4648      	mov	r0, r9
 8004eb2:	f000 fb51 	bl	8005558 <_Bfree>
 8004eb6:	9b08      	ldr	r3, [sp, #32]
 8004eb8:	1b1b      	subs	r3, r3, r4
 8004eba:	9308      	str	r3, [sp, #32]
 8004ebc:	f000 80b1 	beq.w	8005022 <_dtoa_r+0x8ea>
 8004ec0:	9a08      	ldr	r2, [sp, #32]
 8004ec2:	4641      	mov	r1, r8
 8004ec4:	4648      	mov	r0, r9
 8004ec6:	f000 fcb3 	bl	8005830 <__pow5mult>
 8004eca:	9002      	str	r0, [sp, #8]
 8004ecc:	2101      	movs	r1, #1
 8004ece:	4648      	mov	r0, r9
 8004ed0:	f000 fbf6 	bl	80056c0 <__i2b>
 8004ed4:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004ed6:	4604      	mov	r4, r0
 8004ed8:	2b00      	cmp	r3, #0
 8004eda:	f000 81d8 	beq.w	800528e <_dtoa_r+0xb56>
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4601      	mov	r1, r0
 8004ee2:	4648      	mov	r0, r9
 8004ee4:	f000 fca4 	bl	8005830 <__pow5mult>
 8004ee8:	9b07      	ldr	r3, [sp, #28]
 8004eea:	2b01      	cmp	r3, #1
 8004eec:	4604      	mov	r4, r0
 8004eee:	f300 809f 	bgt.w	8005030 <_dtoa_r+0x8f8>
 8004ef2:	9b04      	ldr	r3, [sp, #16]
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	f040 8097 	bne.w	8005028 <_dtoa_r+0x8f0>
 8004efa:	9b05      	ldr	r3, [sp, #20]
 8004efc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	f040 8093 	bne.w	800502c <_dtoa_r+0x8f4>
 8004f06:	9b05      	ldr	r3, [sp, #20]
 8004f08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8004f0c:	0d1b      	lsrs	r3, r3, #20
 8004f0e:	051b      	lsls	r3, r3, #20
 8004f10:	b133      	cbz	r3, 8004f20 <_dtoa_r+0x7e8>
 8004f12:	9b00      	ldr	r3, [sp, #0]
 8004f14:	3301      	adds	r3, #1
 8004f16:	9300      	str	r3, [sp, #0]
 8004f18:	9b06      	ldr	r3, [sp, #24]
 8004f1a:	3301      	adds	r3, #1
 8004f1c:	9306      	str	r3, [sp, #24]
 8004f1e:	2301      	movs	r3, #1
 8004f20:	9308      	str	r3, [sp, #32]
 8004f22:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	f000 81b8 	beq.w	800529a <_dtoa_r+0xb62>
 8004f2a:	6923      	ldr	r3, [r4, #16]
 8004f2c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8004f30:	6918      	ldr	r0, [r3, #16]
 8004f32:	f000 fb79 	bl	8005628 <__hi0bits>
 8004f36:	f1c0 0020 	rsb	r0, r0, #32
 8004f3a:	9b06      	ldr	r3, [sp, #24]
 8004f3c:	4418      	add	r0, r3
 8004f3e:	f010 001f 	ands.w	r0, r0, #31
 8004f42:	f000 8082 	beq.w	800504a <_dtoa_r+0x912>
 8004f46:	f1c0 0320 	rsb	r3, r0, #32
 8004f4a:	2b04      	cmp	r3, #4
 8004f4c:	dd73      	ble.n	8005036 <_dtoa_r+0x8fe>
 8004f4e:	9b00      	ldr	r3, [sp, #0]
 8004f50:	f1c0 001c 	rsb	r0, r0, #28
 8004f54:	4403      	add	r3, r0
 8004f56:	9300      	str	r3, [sp, #0]
 8004f58:	9b06      	ldr	r3, [sp, #24]
 8004f5a:	4403      	add	r3, r0
 8004f5c:	4406      	add	r6, r0
 8004f5e:	9306      	str	r3, [sp, #24]
 8004f60:	9b00      	ldr	r3, [sp, #0]
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	dd05      	ble.n	8004f72 <_dtoa_r+0x83a>
 8004f66:	9902      	ldr	r1, [sp, #8]
 8004f68:	461a      	mov	r2, r3
 8004f6a:	4648      	mov	r0, r9
 8004f6c:	f000 fcba 	bl	80058e4 <__lshift>
 8004f70:	9002      	str	r0, [sp, #8]
 8004f72:	9b06      	ldr	r3, [sp, #24]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	dd05      	ble.n	8004f84 <_dtoa_r+0x84c>
 8004f78:	4621      	mov	r1, r4
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	4648      	mov	r0, r9
 8004f7e:	f000 fcb1 	bl	80058e4 <__lshift>
 8004f82:	4604      	mov	r4, r0
 8004f84:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8004f86:	2b00      	cmp	r3, #0
 8004f88:	d061      	beq.n	800504e <_dtoa_r+0x916>
 8004f8a:	9802      	ldr	r0, [sp, #8]
 8004f8c:	4621      	mov	r1, r4
 8004f8e:	f000 fd15 	bl	80059bc <__mcmp>
 8004f92:	2800      	cmp	r0, #0
 8004f94:	da5b      	bge.n	800504e <_dtoa_r+0x916>
 8004f96:	2300      	movs	r3, #0
 8004f98:	9902      	ldr	r1, [sp, #8]
 8004f9a:	220a      	movs	r2, #10
 8004f9c:	4648      	mov	r0, r9
 8004f9e:	f000 fafd 	bl	800559c <__multadd>
 8004fa2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fa4:	9002      	str	r0, [sp, #8]
 8004fa6:	f107 38ff 	add.w	r8, r7, #4294967295
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	f000 8177 	beq.w	800529e <_dtoa_r+0xb66>
 8004fb0:	4629      	mov	r1, r5
 8004fb2:	2300      	movs	r3, #0
 8004fb4:	220a      	movs	r2, #10
 8004fb6:	4648      	mov	r0, r9
 8004fb8:	f000 faf0 	bl	800559c <__multadd>
 8004fbc:	f1bb 0f00 	cmp.w	fp, #0
 8004fc0:	4605      	mov	r5, r0
 8004fc2:	dc6f      	bgt.n	80050a4 <_dtoa_r+0x96c>
 8004fc4:	9b07      	ldr	r3, [sp, #28]
 8004fc6:	2b02      	cmp	r3, #2
 8004fc8:	dc49      	bgt.n	800505e <_dtoa_r+0x926>
 8004fca:	e06b      	b.n	80050a4 <_dtoa_r+0x96c>
 8004fcc:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8004fce:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8004fd2:	e73c      	b.n	8004e4e <_dtoa_r+0x716>
 8004fd4:	3fe00000 	.word	0x3fe00000
 8004fd8:	40240000 	.word	0x40240000
 8004fdc:	9b03      	ldr	r3, [sp, #12]
 8004fde:	1e5c      	subs	r4, r3, #1
 8004fe0:	9b08      	ldr	r3, [sp, #32]
 8004fe2:	42a3      	cmp	r3, r4
 8004fe4:	db09      	blt.n	8004ffa <_dtoa_r+0x8c2>
 8004fe6:	1b1c      	subs	r4, r3, r4
 8004fe8:	9b03      	ldr	r3, [sp, #12]
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	f6bf af30 	bge.w	8004e50 <_dtoa_r+0x718>
 8004ff0:	9b00      	ldr	r3, [sp, #0]
 8004ff2:	9a03      	ldr	r2, [sp, #12]
 8004ff4:	1a9e      	subs	r6, r3, r2
 8004ff6:	2300      	movs	r3, #0
 8004ff8:	e72b      	b.n	8004e52 <_dtoa_r+0x71a>
 8004ffa:	9b08      	ldr	r3, [sp, #32]
 8004ffc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8004ffe:	9408      	str	r4, [sp, #32]
 8005000:	1ae3      	subs	r3, r4, r3
 8005002:	441a      	add	r2, r3
 8005004:	9e00      	ldr	r6, [sp, #0]
 8005006:	9b03      	ldr	r3, [sp, #12]
 8005008:	920d      	str	r2, [sp, #52]	@ 0x34
 800500a:	2400      	movs	r4, #0
 800500c:	e721      	b.n	8004e52 <_dtoa_r+0x71a>
 800500e:	9c08      	ldr	r4, [sp, #32]
 8005010:	9e00      	ldr	r6, [sp, #0]
 8005012:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8005014:	e728      	b.n	8004e68 <_dtoa_r+0x730>
 8005016:	f8dd 8008 	ldr.w	r8, [sp, #8]
 800501a:	e751      	b.n	8004ec0 <_dtoa_r+0x788>
 800501c:	9a08      	ldr	r2, [sp, #32]
 800501e:	9902      	ldr	r1, [sp, #8]
 8005020:	e750      	b.n	8004ec4 <_dtoa_r+0x78c>
 8005022:	f8cd 8008 	str.w	r8, [sp, #8]
 8005026:	e751      	b.n	8004ecc <_dtoa_r+0x794>
 8005028:	2300      	movs	r3, #0
 800502a:	e779      	b.n	8004f20 <_dtoa_r+0x7e8>
 800502c:	9b04      	ldr	r3, [sp, #16]
 800502e:	e777      	b.n	8004f20 <_dtoa_r+0x7e8>
 8005030:	2300      	movs	r3, #0
 8005032:	9308      	str	r3, [sp, #32]
 8005034:	e779      	b.n	8004f2a <_dtoa_r+0x7f2>
 8005036:	d093      	beq.n	8004f60 <_dtoa_r+0x828>
 8005038:	9a00      	ldr	r2, [sp, #0]
 800503a:	331c      	adds	r3, #28
 800503c:	441a      	add	r2, r3
 800503e:	9200      	str	r2, [sp, #0]
 8005040:	9a06      	ldr	r2, [sp, #24]
 8005042:	441a      	add	r2, r3
 8005044:	441e      	add	r6, r3
 8005046:	9206      	str	r2, [sp, #24]
 8005048:	e78a      	b.n	8004f60 <_dtoa_r+0x828>
 800504a:	4603      	mov	r3, r0
 800504c:	e7f4      	b.n	8005038 <_dtoa_r+0x900>
 800504e:	9b03      	ldr	r3, [sp, #12]
 8005050:	2b00      	cmp	r3, #0
 8005052:	46b8      	mov	r8, r7
 8005054:	dc20      	bgt.n	8005098 <_dtoa_r+0x960>
 8005056:	469b      	mov	fp, r3
 8005058:	9b07      	ldr	r3, [sp, #28]
 800505a:	2b02      	cmp	r3, #2
 800505c:	dd1e      	ble.n	800509c <_dtoa_r+0x964>
 800505e:	f1bb 0f00 	cmp.w	fp, #0
 8005062:	f47f adb1 	bne.w	8004bc8 <_dtoa_r+0x490>
 8005066:	4621      	mov	r1, r4
 8005068:	465b      	mov	r3, fp
 800506a:	2205      	movs	r2, #5
 800506c:	4648      	mov	r0, r9
 800506e:	f000 fa95 	bl	800559c <__multadd>
 8005072:	4601      	mov	r1, r0
 8005074:	4604      	mov	r4, r0
 8005076:	9802      	ldr	r0, [sp, #8]
 8005078:	f000 fca0 	bl	80059bc <__mcmp>
 800507c:	2800      	cmp	r0, #0
 800507e:	f77f ada3 	ble.w	8004bc8 <_dtoa_r+0x490>
 8005082:	4656      	mov	r6, sl
 8005084:	2331      	movs	r3, #49	@ 0x31
 8005086:	f806 3b01 	strb.w	r3, [r6], #1
 800508a:	f108 0801 	add.w	r8, r8, #1
 800508e:	e59f      	b.n	8004bd0 <_dtoa_r+0x498>
 8005090:	9c03      	ldr	r4, [sp, #12]
 8005092:	46b8      	mov	r8, r7
 8005094:	4625      	mov	r5, r4
 8005096:	e7f4      	b.n	8005082 <_dtoa_r+0x94a>
 8005098:	f8dd b00c 	ldr.w	fp, [sp, #12]
 800509c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800509e:	2b00      	cmp	r3, #0
 80050a0:	f000 8101 	beq.w	80052a6 <_dtoa_r+0xb6e>
 80050a4:	2e00      	cmp	r6, #0
 80050a6:	dd05      	ble.n	80050b4 <_dtoa_r+0x97c>
 80050a8:	4629      	mov	r1, r5
 80050aa:	4632      	mov	r2, r6
 80050ac:	4648      	mov	r0, r9
 80050ae:	f000 fc19 	bl	80058e4 <__lshift>
 80050b2:	4605      	mov	r5, r0
 80050b4:	9b08      	ldr	r3, [sp, #32]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d05c      	beq.n	8005174 <_dtoa_r+0xa3c>
 80050ba:	6869      	ldr	r1, [r5, #4]
 80050bc:	4648      	mov	r0, r9
 80050be:	f000 fa0b 	bl	80054d8 <_Balloc>
 80050c2:	4606      	mov	r6, r0
 80050c4:	b928      	cbnz	r0, 80050d2 <_dtoa_r+0x99a>
 80050c6:	4b82      	ldr	r3, [pc, #520]	@ (80052d0 <_dtoa_r+0xb98>)
 80050c8:	4602      	mov	r2, r0
 80050ca:	f240 21ef 	movw	r1, #751	@ 0x2ef
 80050ce:	f7ff bb4a 	b.w	8004766 <_dtoa_r+0x2e>
 80050d2:	692a      	ldr	r2, [r5, #16]
 80050d4:	3202      	adds	r2, #2
 80050d6:	0092      	lsls	r2, r2, #2
 80050d8:	f105 010c 	add.w	r1, r5, #12
 80050dc:	300c      	adds	r0, #12
 80050de:	f000 fff7 	bl	80060d0 <memcpy>
 80050e2:	2201      	movs	r2, #1
 80050e4:	4631      	mov	r1, r6
 80050e6:	4648      	mov	r0, r9
 80050e8:	f000 fbfc 	bl	80058e4 <__lshift>
 80050ec:	f10a 0301 	add.w	r3, sl, #1
 80050f0:	9300      	str	r3, [sp, #0]
 80050f2:	eb0a 030b 	add.w	r3, sl, fp
 80050f6:	9308      	str	r3, [sp, #32]
 80050f8:	9b04      	ldr	r3, [sp, #16]
 80050fa:	f003 0301 	and.w	r3, r3, #1
 80050fe:	462f      	mov	r7, r5
 8005100:	9306      	str	r3, [sp, #24]
 8005102:	4605      	mov	r5, r0
 8005104:	9b00      	ldr	r3, [sp, #0]
 8005106:	9802      	ldr	r0, [sp, #8]
 8005108:	4621      	mov	r1, r4
 800510a:	f103 3bff 	add.w	fp, r3, #4294967295
 800510e:	f7ff fa88 	bl	8004622 <quorem>
 8005112:	4603      	mov	r3, r0
 8005114:	3330      	adds	r3, #48	@ 0x30
 8005116:	9003      	str	r0, [sp, #12]
 8005118:	4639      	mov	r1, r7
 800511a:	9802      	ldr	r0, [sp, #8]
 800511c:	9309      	str	r3, [sp, #36]	@ 0x24
 800511e:	f000 fc4d 	bl	80059bc <__mcmp>
 8005122:	462a      	mov	r2, r5
 8005124:	9004      	str	r0, [sp, #16]
 8005126:	4621      	mov	r1, r4
 8005128:	4648      	mov	r0, r9
 800512a:	f000 fc63 	bl	80059f4 <__mdiff>
 800512e:	68c2      	ldr	r2, [r0, #12]
 8005130:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005132:	4606      	mov	r6, r0
 8005134:	bb02      	cbnz	r2, 8005178 <_dtoa_r+0xa40>
 8005136:	4601      	mov	r1, r0
 8005138:	9802      	ldr	r0, [sp, #8]
 800513a:	f000 fc3f 	bl	80059bc <__mcmp>
 800513e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005140:	4602      	mov	r2, r0
 8005142:	4631      	mov	r1, r6
 8005144:	4648      	mov	r0, r9
 8005146:	920c      	str	r2, [sp, #48]	@ 0x30
 8005148:	9309      	str	r3, [sp, #36]	@ 0x24
 800514a:	f000 fa05 	bl	8005558 <_Bfree>
 800514e:	9b07      	ldr	r3, [sp, #28]
 8005150:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8005152:	9e00      	ldr	r6, [sp, #0]
 8005154:	ea42 0103 	orr.w	r1, r2, r3
 8005158:	9b06      	ldr	r3, [sp, #24]
 800515a:	4319      	orrs	r1, r3
 800515c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800515e:	d10d      	bne.n	800517c <_dtoa_r+0xa44>
 8005160:	2b39      	cmp	r3, #57	@ 0x39
 8005162:	d027      	beq.n	80051b4 <_dtoa_r+0xa7c>
 8005164:	9a04      	ldr	r2, [sp, #16]
 8005166:	2a00      	cmp	r2, #0
 8005168:	dd01      	ble.n	800516e <_dtoa_r+0xa36>
 800516a:	9b03      	ldr	r3, [sp, #12]
 800516c:	3331      	adds	r3, #49	@ 0x31
 800516e:	f88b 3000 	strb.w	r3, [fp]
 8005172:	e52e      	b.n	8004bd2 <_dtoa_r+0x49a>
 8005174:	4628      	mov	r0, r5
 8005176:	e7b9      	b.n	80050ec <_dtoa_r+0x9b4>
 8005178:	2201      	movs	r2, #1
 800517a:	e7e2      	b.n	8005142 <_dtoa_r+0xa0a>
 800517c:	9904      	ldr	r1, [sp, #16]
 800517e:	2900      	cmp	r1, #0
 8005180:	db04      	blt.n	800518c <_dtoa_r+0xa54>
 8005182:	9807      	ldr	r0, [sp, #28]
 8005184:	4301      	orrs	r1, r0
 8005186:	9806      	ldr	r0, [sp, #24]
 8005188:	4301      	orrs	r1, r0
 800518a:	d120      	bne.n	80051ce <_dtoa_r+0xa96>
 800518c:	2a00      	cmp	r2, #0
 800518e:	ddee      	ble.n	800516e <_dtoa_r+0xa36>
 8005190:	9902      	ldr	r1, [sp, #8]
 8005192:	9300      	str	r3, [sp, #0]
 8005194:	2201      	movs	r2, #1
 8005196:	4648      	mov	r0, r9
 8005198:	f000 fba4 	bl	80058e4 <__lshift>
 800519c:	4621      	mov	r1, r4
 800519e:	9002      	str	r0, [sp, #8]
 80051a0:	f000 fc0c 	bl	80059bc <__mcmp>
 80051a4:	2800      	cmp	r0, #0
 80051a6:	9b00      	ldr	r3, [sp, #0]
 80051a8:	dc02      	bgt.n	80051b0 <_dtoa_r+0xa78>
 80051aa:	d1e0      	bne.n	800516e <_dtoa_r+0xa36>
 80051ac:	07da      	lsls	r2, r3, #31
 80051ae:	d5de      	bpl.n	800516e <_dtoa_r+0xa36>
 80051b0:	2b39      	cmp	r3, #57	@ 0x39
 80051b2:	d1da      	bne.n	800516a <_dtoa_r+0xa32>
 80051b4:	2339      	movs	r3, #57	@ 0x39
 80051b6:	f88b 3000 	strb.w	r3, [fp]
 80051ba:	4633      	mov	r3, r6
 80051bc:	461e      	mov	r6, r3
 80051be:	3b01      	subs	r3, #1
 80051c0:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80051c4:	2a39      	cmp	r2, #57	@ 0x39
 80051c6:	d04e      	beq.n	8005266 <_dtoa_r+0xb2e>
 80051c8:	3201      	adds	r2, #1
 80051ca:	701a      	strb	r2, [r3, #0]
 80051cc:	e501      	b.n	8004bd2 <_dtoa_r+0x49a>
 80051ce:	2a00      	cmp	r2, #0
 80051d0:	dd03      	ble.n	80051da <_dtoa_r+0xaa2>
 80051d2:	2b39      	cmp	r3, #57	@ 0x39
 80051d4:	d0ee      	beq.n	80051b4 <_dtoa_r+0xa7c>
 80051d6:	3301      	adds	r3, #1
 80051d8:	e7c9      	b.n	800516e <_dtoa_r+0xa36>
 80051da:	9a00      	ldr	r2, [sp, #0]
 80051dc:	9908      	ldr	r1, [sp, #32]
 80051de:	f802 3c01 	strb.w	r3, [r2, #-1]
 80051e2:	428a      	cmp	r2, r1
 80051e4:	d028      	beq.n	8005238 <_dtoa_r+0xb00>
 80051e6:	9902      	ldr	r1, [sp, #8]
 80051e8:	2300      	movs	r3, #0
 80051ea:	220a      	movs	r2, #10
 80051ec:	4648      	mov	r0, r9
 80051ee:	f000 f9d5 	bl	800559c <__multadd>
 80051f2:	42af      	cmp	r7, r5
 80051f4:	9002      	str	r0, [sp, #8]
 80051f6:	f04f 0300 	mov.w	r3, #0
 80051fa:	f04f 020a 	mov.w	r2, #10
 80051fe:	4639      	mov	r1, r7
 8005200:	4648      	mov	r0, r9
 8005202:	d107      	bne.n	8005214 <_dtoa_r+0xadc>
 8005204:	f000 f9ca 	bl	800559c <__multadd>
 8005208:	4607      	mov	r7, r0
 800520a:	4605      	mov	r5, r0
 800520c:	9b00      	ldr	r3, [sp, #0]
 800520e:	3301      	adds	r3, #1
 8005210:	9300      	str	r3, [sp, #0]
 8005212:	e777      	b.n	8005104 <_dtoa_r+0x9cc>
 8005214:	f000 f9c2 	bl	800559c <__multadd>
 8005218:	4629      	mov	r1, r5
 800521a:	4607      	mov	r7, r0
 800521c:	2300      	movs	r3, #0
 800521e:	220a      	movs	r2, #10
 8005220:	4648      	mov	r0, r9
 8005222:	f000 f9bb 	bl	800559c <__multadd>
 8005226:	4605      	mov	r5, r0
 8005228:	e7f0      	b.n	800520c <_dtoa_r+0xad4>
 800522a:	f1bb 0f00 	cmp.w	fp, #0
 800522e:	bfcc      	ite	gt
 8005230:	465e      	movgt	r6, fp
 8005232:	2601      	movle	r6, #1
 8005234:	4456      	add	r6, sl
 8005236:	2700      	movs	r7, #0
 8005238:	9902      	ldr	r1, [sp, #8]
 800523a:	9300      	str	r3, [sp, #0]
 800523c:	2201      	movs	r2, #1
 800523e:	4648      	mov	r0, r9
 8005240:	f000 fb50 	bl	80058e4 <__lshift>
 8005244:	4621      	mov	r1, r4
 8005246:	9002      	str	r0, [sp, #8]
 8005248:	f000 fbb8 	bl	80059bc <__mcmp>
 800524c:	2800      	cmp	r0, #0
 800524e:	dcb4      	bgt.n	80051ba <_dtoa_r+0xa82>
 8005250:	d102      	bne.n	8005258 <_dtoa_r+0xb20>
 8005252:	9b00      	ldr	r3, [sp, #0]
 8005254:	07db      	lsls	r3, r3, #31
 8005256:	d4b0      	bmi.n	80051ba <_dtoa_r+0xa82>
 8005258:	4633      	mov	r3, r6
 800525a:	461e      	mov	r6, r3
 800525c:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005260:	2a30      	cmp	r2, #48	@ 0x30
 8005262:	d0fa      	beq.n	800525a <_dtoa_r+0xb22>
 8005264:	e4b5      	b.n	8004bd2 <_dtoa_r+0x49a>
 8005266:	459a      	cmp	sl, r3
 8005268:	d1a8      	bne.n	80051bc <_dtoa_r+0xa84>
 800526a:	2331      	movs	r3, #49	@ 0x31
 800526c:	f108 0801 	add.w	r8, r8, #1
 8005270:	f88a 3000 	strb.w	r3, [sl]
 8005274:	e4ad      	b.n	8004bd2 <_dtoa_r+0x49a>
 8005276:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8005278:	f8df a058 	ldr.w	sl, [pc, #88]	@ 80052d4 <_dtoa_r+0xb9c>
 800527c:	b11b      	cbz	r3, 8005286 <_dtoa_r+0xb4e>
 800527e:	f10a 0308 	add.w	r3, sl, #8
 8005282:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8005284:	6013      	str	r3, [r2, #0]
 8005286:	4650      	mov	r0, sl
 8005288:	b017      	add	sp, #92	@ 0x5c
 800528a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800528e:	9b07      	ldr	r3, [sp, #28]
 8005290:	2b01      	cmp	r3, #1
 8005292:	f77f ae2e 	ble.w	8004ef2 <_dtoa_r+0x7ba>
 8005296:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005298:	9308      	str	r3, [sp, #32]
 800529a:	2001      	movs	r0, #1
 800529c:	e64d      	b.n	8004f3a <_dtoa_r+0x802>
 800529e:	f1bb 0f00 	cmp.w	fp, #0
 80052a2:	f77f aed9 	ble.w	8005058 <_dtoa_r+0x920>
 80052a6:	4656      	mov	r6, sl
 80052a8:	9802      	ldr	r0, [sp, #8]
 80052aa:	4621      	mov	r1, r4
 80052ac:	f7ff f9b9 	bl	8004622 <quorem>
 80052b0:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 80052b4:	f806 3b01 	strb.w	r3, [r6], #1
 80052b8:	eba6 020a 	sub.w	r2, r6, sl
 80052bc:	4593      	cmp	fp, r2
 80052be:	ddb4      	ble.n	800522a <_dtoa_r+0xaf2>
 80052c0:	9902      	ldr	r1, [sp, #8]
 80052c2:	2300      	movs	r3, #0
 80052c4:	220a      	movs	r2, #10
 80052c6:	4648      	mov	r0, r9
 80052c8:	f000 f968 	bl	800559c <__multadd>
 80052cc:	9002      	str	r0, [sp, #8]
 80052ce:	e7eb      	b.n	80052a8 <_dtoa_r+0xb70>
 80052d0:	08006410 	.word	0x08006410
 80052d4:	08006394 	.word	0x08006394

080052d8 <_free_r>:
 80052d8:	b538      	push	{r3, r4, r5, lr}
 80052da:	4605      	mov	r5, r0
 80052dc:	2900      	cmp	r1, #0
 80052de:	d041      	beq.n	8005364 <_free_r+0x8c>
 80052e0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80052e4:	1f0c      	subs	r4, r1, #4
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	bfb8      	it	lt
 80052ea:	18e4      	addlt	r4, r4, r3
 80052ec:	f000 f8e8 	bl	80054c0 <__malloc_lock>
 80052f0:	4a1d      	ldr	r2, [pc, #116]	@ (8005368 <_free_r+0x90>)
 80052f2:	6813      	ldr	r3, [r2, #0]
 80052f4:	b933      	cbnz	r3, 8005304 <_free_r+0x2c>
 80052f6:	6063      	str	r3, [r4, #4]
 80052f8:	6014      	str	r4, [r2, #0]
 80052fa:	4628      	mov	r0, r5
 80052fc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005300:	f000 b8e4 	b.w	80054cc <__malloc_unlock>
 8005304:	42a3      	cmp	r3, r4
 8005306:	d908      	bls.n	800531a <_free_r+0x42>
 8005308:	6820      	ldr	r0, [r4, #0]
 800530a:	1821      	adds	r1, r4, r0
 800530c:	428b      	cmp	r3, r1
 800530e:	bf01      	itttt	eq
 8005310:	6819      	ldreq	r1, [r3, #0]
 8005312:	685b      	ldreq	r3, [r3, #4]
 8005314:	1809      	addeq	r1, r1, r0
 8005316:	6021      	streq	r1, [r4, #0]
 8005318:	e7ed      	b.n	80052f6 <_free_r+0x1e>
 800531a:	461a      	mov	r2, r3
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	b10b      	cbz	r3, 8005324 <_free_r+0x4c>
 8005320:	42a3      	cmp	r3, r4
 8005322:	d9fa      	bls.n	800531a <_free_r+0x42>
 8005324:	6811      	ldr	r1, [r2, #0]
 8005326:	1850      	adds	r0, r2, r1
 8005328:	42a0      	cmp	r0, r4
 800532a:	d10b      	bne.n	8005344 <_free_r+0x6c>
 800532c:	6820      	ldr	r0, [r4, #0]
 800532e:	4401      	add	r1, r0
 8005330:	1850      	adds	r0, r2, r1
 8005332:	4283      	cmp	r3, r0
 8005334:	6011      	str	r1, [r2, #0]
 8005336:	d1e0      	bne.n	80052fa <_free_r+0x22>
 8005338:	6818      	ldr	r0, [r3, #0]
 800533a:	685b      	ldr	r3, [r3, #4]
 800533c:	6053      	str	r3, [r2, #4]
 800533e:	4408      	add	r0, r1
 8005340:	6010      	str	r0, [r2, #0]
 8005342:	e7da      	b.n	80052fa <_free_r+0x22>
 8005344:	d902      	bls.n	800534c <_free_r+0x74>
 8005346:	230c      	movs	r3, #12
 8005348:	602b      	str	r3, [r5, #0]
 800534a:	e7d6      	b.n	80052fa <_free_r+0x22>
 800534c:	6820      	ldr	r0, [r4, #0]
 800534e:	1821      	adds	r1, r4, r0
 8005350:	428b      	cmp	r3, r1
 8005352:	bf04      	itt	eq
 8005354:	6819      	ldreq	r1, [r3, #0]
 8005356:	685b      	ldreq	r3, [r3, #4]
 8005358:	6063      	str	r3, [r4, #4]
 800535a:	bf04      	itt	eq
 800535c:	1809      	addeq	r1, r1, r0
 800535e:	6021      	streq	r1, [r4, #0]
 8005360:	6054      	str	r4, [r2, #4]
 8005362:	e7ca      	b.n	80052fa <_free_r+0x22>
 8005364:	bd38      	pop	{r3, r4, r5, pc}
 8005366:	bf00      	nop
 8005368:	200003a4 	.word	0x200003a4

0800536c <malloc>:
 800536c:	4b02      	ldr	r3, [pc, #8]	@ (8005378 <malloc+0xc>)
 800536e:	4601      	mov	r1, r0
 8005370:	6818      	ldr	r0, [r3, #0]
 8005372:	f000 b825 	b.w	80053c0 <_malloc_r>
 8005376:	bf00      	nop
 8005378:	20000018 	.word	0x20000018

0800537c <sbrk_aligned>:
 800537c:	b570      	push	{r4, r5, r6, lr}
 800537e:	4e0f      	ldr	r6, [pc, #60]	@ (80053bc <sbrk_aligned+0x40>)
 8005380:	460c      	mov	r4, r1
 8005382:	6831      	ldr	r1, [r6, #0]
 8005384:	4605      	mov	r5, r0
 8005386:	b911      	cbnz	r1, 800538e <sbrk_aligned+0x12>
 8005388:	f000 fe92 	bl	80060b0 <_sbrk_r>
 800538c:	6030      	str	r0, [r6, #0]
 800538e:	4621      	mov	r1, r4
 8005390:	4628      	mov	r0, r5
 8005392:	f000 fe8d 	bl	80060b0 <_sbrk_r>
 8005396:	1c43      	adds	r3, r0, #1
 8005398:	d103      	bne.n	80053a2 <sbrk_aligned+0x26>
 800539a:	f04f 34ff 	mov.w	r4, #4294967295
 800539e:	4620      	mov	r0, r4
 80053a0:	bd70      	pop	{r4, r5, r6, pc}
 80053a2:	1cc4      	adds	r4, r0, #3
 80053a4:	f024 0403 	bic.w	r4, r4, #3
 80053a8:	42a0      	cmp	r0, r4
 80053aa:	d0f8      	beq.n	800539e <sbrk_aligned+0x22>
 80053ac:	1a21      	subs	r1, r4, r0
 80053ae:	4628      	mov	r0, r5
 80053b0:	f000 fe7e 	bl	80060b0 <_sbrk_r>
 80053b4:	3001      	adds	r0, #1
 80053b6:	d1f2      	bne.n	800539e <sbrk_aligned+0x22>
 80053b8:	e7ef      	b.n	800539a <sbrk_aligned+0x1e>
 80053ba:	bf00      	nop
 80053bc:	200003a0 	.word	0x200003a0

080053c0 <_malloc_r>:
 80053c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80053c4:	1ccd      	adds	r5, r1, #3
 80053c6:	f025 0503 	bic.w	r5, r5, #3
 80053ca:	3508      	adds	r5, #8
 80053cc:	2d0c      	cmp	r5, #12
 80053ce:	bf38      	it	cc
 80053d0:	250c      	movcc	r5, #12
 80053d2:	2d00      	cmp	r5, #0
 80053d4:	4606      	mov	r6, r0
 80053d6:	db01      	blt.n	80053dc <_malloc_r+0x1c>
 80053d8:	42a9      	cmp	r1, r5
 80053da:	d904      	bls.n	80053e6 <_malloc_r+0x26>
 80053dc:	230c      	movs	r3, #12
 80053de:	6033      	str	r3, [r6, #0]
 80053e0:	2000      	movs	r0, #0
 80053e2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80053e6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80054bc <_malloc_r+0xfc>
 80053ea:	f000 f869 	bl	80054c0 <__malloc_lock>
 80053ee:	f8d8 3000 	ldr.w	r3, [r8]
 80053f2:	461c      	mov	r4, r3
 80053f4:	bb44      	cbnz	r4, 8005448 <_malloc_r+0x88>
 80053f6:	4629      	mov	r1, r5
 80053f8:	4630      	mov	r0, r6
 80053fa:	f7ff ffbf 	bl	800537c <sbrk_aligned>
 80053fe:	1c43      	adds	r3, r0, #1
 8005400:	4604      	mov	r4, r0
 8005402:	d158      	bne.n	80054b6 <_malloc_r+0xf6>
 8005404:	f8d8 4000 	ldr.w	r4, [r8]
 8005408:	4627      	mov	r7, r4
 800540a:	2f00      	cmp	r7, #0
 800540c:	d143      	bne.n	8005496 <_malloc_r+0xd6>
 800540e:	2c00      	cmp	r4, #0
 8005410:	d04b      	beq.n	80054aa <_malloc_r+0xea>
 8005412:	6823      	ldr	r3, [r4, #0]
 8005414:	4639      	mov	r1, r7
 8005416:	4630      	mov	r0, r6
 8005418:	eb04 0903 	add.w	r9, r4, r3
 800541c:	f000 fe48 	bl	80060b0 <_sbrk_r>
 8005420:	4581      	cmp	r9, r0
 8005422:	d142      	bne.n	80054aa <_malloc_r+0xea>
 8005424:	6821      	ldr	r1, [r4, #0]
 8005426:	1a6d      	subs	r5, r5, r1
 8005428:	4629      	mov	r1, r5
 800542a:	4630      	mov	r0, r6
 800542c:	f7ff ffa6 	bl	800537c <sbrk_aligned>
 8005430:	3001      	adds	r0, #1
 8005432:	d03a      	beq.n	80054aa <_malloc_r+0xea>
 8005434:	6823      	ldr	r3, [r4, #0]
 8005436:	442b      	add	r3, r5
 8005438:	6023      	str	r3, [r4, #0]
 800543a:	f8d8 3000 	ldr.w	r3, [r8]
 800543e:	685a      	ldr	r2, [r3, #4]
 8005440:	bb62      	cbnz	r2, 800549c <_malloc_r+0xdc>
 8005442:	f8c8 7000 	str.w	r7, [r8]
 8005446:	e00f      	b.n	8005468 <_malloc_r+0xa8>
 8005448:	6822      	ldr	r2, [r4, #0]
 800544a:	1b52      	subs	r2, r2, r5
 800544c:	d420      	bmi.n	8005490 <_malloc_r+0xd0>
 800544e:	2a0b      	cmp	r2, #11
 8005450:	d917      	bls.n	8005482 <_malloc_r+0xc2>
 8005452:	1961      	adds	r1, r4, r5
 8005454:	42a3      	cmp	r3, r4
 8005456:	6025      	str	r5, [r4, #0]
 8005458:	bf18      	it	ne
 800545a:	6059      	strne	r1, [r3, #4]
 800545c:	6863      	ldr	r3, [r4, #4]
 800545e:	bf08      	it	eq
 8005460:	f8c8 1000 	streq.w	r1, [r8]
 8005464:	5162      	str	r2, [r4, r5]
 8005466:	604b      	str	r3, [r1, #4]
 8005468:	4630      	mov	r0, r6
 800546a:	f000 f82f 	bl	80054cc <__malloc_unlock>
 800546e:	f104 000b 	add.w	r0, r4, #11
 8005472:	1d23      	adds	r3, r4, #4
 8005474:	f020 0007 	bic.w	r0, r0, #7
 8005478:	1ac2      	subs	r2, r0, r3
 800547a:	bf1c      	itt	ne
 800547c:	1a1b      	subne	r3, r3, r0
 800547e:	50a3      	strne	r3, [r4, r2]
 8005480:	e7af      	b.n	80053e2 <_malloc_r+0x22>
 8005482:	6862      	ldr	r2, [r4, #4]
 8005484:	42a3      	cmp	r3, r4
 8005486:	bf0c      	ite	eq
 8005488:	f8c8 2000 	streq.w	r2, [r8]
 800548c:	605a      	strne	r2, [r3, #4]
 800548e:	e7eb      	b.n	8005468 <_malloc_r+0xa8>
 8005490:	4623      	mov	r3, r4
 8005492:	6864      	ldr	r4, [r4, #4]
 8005494:	e7ae      	b.n	80053f4 <_malloc_r+0x34>
 8005496:	463c      	mov	r4, r7
 8005498:	687f      	ldr	r7, [r7, #4]
 800549a:	e7b6      	b.n	800540a <_malloc_r+0x4a>
 800549c:	461a      	mov	r2, r3
 800549e:	685b      	ldr	r3, [r3, #4]
 80054a0:	42a3      	cmp	r3, r4
 80054a2:	d1fb      	bne.n	800549c <_malloc_r+0xdc>
 80054a4:	2300      	movs	r3, #0
 80054a6:	6053      	str	r3, [r2, #4]
 80054a8:	e7de      	b.n	8005468 <_malloc_r+0xa8>
 80054aa:	230c      	movs	r3, #12
 80054ac:	6033      	str	r3, [r6, #0]
 80054ae:	4630      	mov	r0, r6
 80054b0:	f000 f80c 	bl	80054cc <__malloc_unlock>
 80054b4:	e794      	b.n	80053e0 <_malloc_r+0x20>
 80054b6:	6005      	str	r5, [r0, #0]
 80054b8:	e7d6      	b.n	8005468 <_malloc_r+0xa8>
 80054ba:	bf00      	nop
 80054bc:	200003a4 	.word	0x200003a4

080054c0 <__malloc_lock>:
 80054c0:	4801      	ldr	r0, [pc, #4]	@ (80054c8 <__malloc_lock+0x8>)
 80054c2:	f7ff b8ac 	b.w	800461e <__retarget_lock_acquire_recursive>
 80054c6:	bf00      	nop
 80054c8:	2000039c 	.word	0x2000039c

080054cc <__malloc_unlock>:
 80054cc:	4801      	ldr	r0, [pc, #4]	@ (80054d4 <__malloc_unlock+0x8>)
 80054ce:	f7ff b8a7 	b.w	8004620 <__retarget_lock_release_recursive>
 80054d2:	bf00      	nop
 80054d4:	2000039c 	.word	0x2000039c

080054d8 <_Balloc>:
 80054d8:	b570      	push	{r4, r5, r6, lr}
 80054da:	69c6      	ldr	r6, [r0, #28]
 80054dc:	4604      	mov	r4, r0
 80054de:	460d      	mov	r5, r1
 80054e0:	b976      	cbnz	r6, 8005500 <_Balloc+0x28>
 80054e2:	2010      	movs	r0, #16
 80054e4:	f7ff ff42 	bl	800536c <malloc>
 80054e8:	4602      	mov	r2, r0
 80054ea:	61e0      	str	r0, [r4, #28]
 80054ec:	b920      	cbnz	r0, 80054f8 <_Balloc+0x20>
 80054ee:	4b18      	ldr	r3, [pc, #96]	@ (8005550 <_Balloc+0x78>)
 80054f0:	4818      	ldr	r0, [pc, #96]	@ (8005554 <_Balloc+0x7c>)
 80054f2:	216b      	movs	r1, #107	@ 0x6b
 80054f4:	f000 fdfa 	bl	80060ec <__assert_func>
 80054f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80054fc:	6006      	str	r6, [r0, #0]
 80054fe:	60c6      	str	r6, [r0, #12]
 8005500:	69e6      	ldr	r6, [r4, #28]
 8005502:	68f3      	ldr	r3, [r6, #12]
 8005504:	b183      	cbz	r3, 8005528 <_Balloc+0x50>
 8005506:	69e3      	ldr	r3, [r4, #28]
 8005508:	68db      	ldr	r3, [r3, #12]
 800550a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800550e:	b9b8      	cbnz	r0, 8005540 <_Balloc+0x68>
 8005510:	2101      	movs	r1, #1
 8005512:	fa01 f605 	lsl.w	r6, r1, r5
 8005516:	1d72      	adds	r2, r6, #5
 8005518:	0092      	lsls	r2, r2, #2
 800551a:	4620      	mov	r0, r4
 800551c:	f000 fe04 	bl	8006128 <_calloc_r>
 8005520:	b160      	cbz	r0, 800553c <_Balloc+0x64>
 8005522:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8005526:	e00e      	b.n	8005546 <_Balloc+0x6e>
 8005528:	2221      	movs	r2, #33	@ 0x21
 800552a:	2104      	movs	r1, #4
 800552c:	4620      	mov	r0, r4
 800552e:	f000 fdfb 	bl	8006128 <_calloc_r>
 8005532:	69e3      	ldr	r3, [r4, #28]
 8005534:	60f0      	str	r0, [r6, #12]
 8005536:	68db      	ldr	r3, [r3, #12]
 8005538:	2b00      	cmp	r3, #0
 800553a:	d1e4      	bne.n	8005506 <_Balloc+0x2e>
 800553c:	2000      	movs	r0, #0
 800553e:	bd70      	pop	{r4, r5, r6, pc}
 8005540:	6802      	ldr	r2, [r0, #0]
 8005542:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005546:	2300      	movs	r3, #0
 8005548:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800554c:	e7f7      	b.n	800553e <_Balloc+0x66>
 800554e:	bf00      	nop
 8005550:	080063a1 	.word	0x080063a1
 8005554:	08006421 	.word	0x08006421

08005558 <_Bfree>:
 8005558:	b570      	push	{r4, r5, r6, lr}
 800555a:	69c6      	ldr	r6, [r0, #28]
 800555c:	4605      	mov	r5, r0
 800555e:	460c      	mov	r4, r1
 8005560:	b976      	cbnz	r6, 8005580 <_Bfree+0x28>
 8005562:	2010      	movs	r0, #16
 8005564:	f7ff ff02 	bl	800536c <malloc>
 8005568:	4602      	mov	r2, r0
 800556a:	61e8      	str	r0, [r5, #28]
 800556c:	b920      	cbnz	r0, 8005578 <_Bfree+0x20>
 800556e:	4b09      	ldr	r3, [pc, #36]	@ (8005594 <_Bfree+0x3c>)
 8005570:	4809      	ldr	r0, [pc, #36]	@ (8005598 <_Bfree+0x40>)
 8005572:	218f      	movs	r1, #143	@ 0x8f
 8005574:	f000 fdba 	bl	80060ec <__assert_func>
 8005578:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800557c:	6006      	str	r6, [r0, #0]
 800557e:	60c6      	str	r6, [r0, #12]
 8005580:	b13c      	cbz	r4, 8005592 <_Bfree+0x3a>
 8005582:	69eb      	ldr	r3, [r5, #28]
 8005584:	6862      	ldr	r2, [r4, #4]
 8005586:	68db      	ldr	r3, [r3, #12]
 8005588:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800558c:	6021      	str	r1, [r4, #0]
 800558e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005592:	bd70      	pop	{r4, r5, r6, pc}
 8005594:	080063a1 	.word	0x080063a1
 8005598:	08006421 	.word	0x08006421

0800559c <__multadd>:
 800559c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80055a0:	690d      	ldr	r5, [r1, #16]
 80055a2:	4607      	mov	r7, r0
 80055a4:	460c      	mov	r4, r1
 80055a6:	461e      	mov	r6, r3
 80055a8:	f101 0c14 	add.w	ip, r1, #20
 80055ac:	2000      	movs	r0, #0
 80055ae:	f8dc 3000 	ldr.w	r3, [ip]
 80055b2:	b299      	uxth	r1, r3
 80055b4:	fb02 6101 	mla	r1, r2, r1, r6
 80055b8:	0c1e      	lsrs	r6, r3, #16
 80055ba:	0c0b      	lsrs	r3, r1, #16
 80055bc:	fb02 3306 	mla	r3, r2, r6, r3
 80055c0:	b289      	uxth	r1, r1
 80055c2:	3001      	adds	r0, #1
 80055c4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80055c8:	4285      	cmp	r5, r0
 80055ca:	f84c 1b04 	str.w	r1, [ip], #4
 80055ce:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80055d2:	dcec      	bgt.n	80055ae <__multadd+0x12>
 80055d4:	b30e      	cbz	r6, 800561a <__multadd+0x7e>
 80055d6:	68a3      	ldr	r3, [r4, #8]
 80055d8:	42ab      	cmp	r3, r5
 80055da:	dc19      	bgt.n	8005610 <__multadd+0x74>
 80055dc:	6861      	ldr	r1, [r4, #4]
 80055de:	4638      	mov	r0, r7
 80055e0:	3101      	adds	r1, #1
 80055e2:	f7ff ff79 	bl	80054d8 <_Balloc>
 80055e6:	4680      	mov	r8, r0
 80055e8:	b928      	cbnz	r0, 80055f6 <__multadd+0x5a>
 80055ea:	4602      	mov	r2, r0
 80055ec:	4b0c      	ldr	r3, [pc, #48]	@ (8005620 <__multadd+0x84>)
 80055ee:	480d      	ldr	r0, [pc, #52]	@ (8005624 <__multadd+0x88>)
 80055f0:	21ba      	movs	r1, #186	@ 0xba
 80055f2:	f000 fd7b 	bl	80060ec <__assert_func>
 80055f6:	6922      	ldr	r2, [r4, #16]
 80055f8:	3202      	adds	r2, #2
 80055fa:	f104 010c 	add.w	r1, r4, #12
 80055fe:	0092      	lsls	r2, r2, #2
 8005600:	300c      	adds	r0, #12
 8005602:	f000 fd65 	bl	80060d0 <memcpy>
 8005606:	4621      	mov	r1, r4
 8005608:	4638      	mov	r0, r7
 800560a:	f7ff ffa5 	bl	8005558 <_Bfree>
 800560e:	4644      	mov	r4, r8
 8005610:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8005614:	3501      	adds	r5, #1
 8005616:	615e      	str	r6, [r3, #20]
 8005618:	6125      	str	r5, [r4, #16]
 800561a:	4620      	mov	r0, r4
 800561c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005620:	08006410 	.word	0x08006410
 8005624:	08006421 	.word	0x08006421

08005628 <__hi0bits>:
 8005628:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800562c:	4603      	mov	r3, r0
 800562e:	bf36      	itet	cc
 8005630:	0403      	lslcc	r3, r0, #16
 8005632:	2000      	movcs	r0, #0
 8005634:	2010      	movcc	r0, #16
 8005636:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800563a:	bf3c      	itt	cc
 800563c:	021b      	lslcc	r3, r3, #8
 800563e:	3008      	addcc	r0, #8
 8005640:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8005644:	bf3c      	itt	cc
 8005646:	011b      	lslcc	r3, r3, #4
 8005648:	3004      	addcc	r0, #4
 800564a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800564e:	bf3c      	itt	cc
 8005650:	009b      	lslcc	r3, r3, #2
 8005652:	3002      	addcc	r0, #2
 8005654:	2b00      	cmp	r3, #0
 8005656:	db05      	blt.n	8005664 <__hi0bits+0x3c>
 8005658:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800565c:	f100 0001 	add.w	r0, r0, #1
 8005660:	bf08      	it	eq
 8005662:	2020      	moveq	r0, #32
 8005664:	4770      	bx	lr

08005666 <__lo0bits>:
 8005666:	6803      	ldr	r3, [r0, #0]
 8005668:	4602      	mov	r2, r0
 800566a:	f013 0007 	ands.w	r0, r3, #7
 800566e:	d00b      	beq.n	8005688 <__lo0bits+0x22>
 8005670:	07d9      	lsls	r1, r3, #31
 8005672:	d421      	bmi.n	80056b8 <__lo0bits+0x52>
 8005674:	0798      	lsls	r0, r3, #30
 8005676:	bf49      	itett	mi
 8005678:	085b      	lsrmi	r3, r3, #1
 800567a:	089b      	lsrpl	r3, r3, #2
 800567c:	2001      	movmi	r0, #1
 800567e:	6013      	strmi	r3, [r2, #0]
 8005680:	bf5c      	itt	pl
 8005682:	6013      	strpl	r3, [r2, #0]
 8005684:	2002      	movpl	r0, #2
 8005686:	4770      	bx	lr
 8005688:	b299      	uxth	r1, r3
 800568a:	b909      	cbnz	r1, 8005690 <__lo0bits+0x2a>
 800568c:	0c1b      	lsrs	r3, r3, #16
 800568e:	2010      	movs	r0, #16
 8005690:	b2d9      	uxtb	r1, r3
 8005692:	b909      	cbnz	r1, 8005698 <__lo0bits+0x32>
 8005694:	3008      	adds	r0, #8
 8005696:	0a1b      	lsrs	r3, r3, #8
 8005698:	0719      	lsls	r1, r3, #28
 800569a:	bf04      	itt	eq
 800569c:	091b      	lsreq	r3, r3, #4
 800569e:	3004      	addeq	r0, #4
 80056a0:	0799      	lsls	r1, r3, #30
 80056a2:	bf04      	itt	eq
 80056a4:	089b      	lsreq	r3, r3, #2
 80056a6:	3002      	addeq	r0, #2
 80056a8:	07d9      	lsls	r1, r3, #31
 80056aa:	d403      	bmi.n	80056b4 <__lo0bits+0x4e>
 80056ac:	085b      	lsrs	r3, r3, #1
 80056ae:	f100 0001 	add.w	r0, r0, #1
 80056b2:	d003      	beq.n	80056bc <__lo0bits+0x56>
 80056b4:	6013      	str	r3, [r2, #0]
 80056b6:	4770      	bx	lr
 80056b8:	2000      	movs	r0, #0
 80056ba:	4770      	bx	lr
 80056bc:	2020      	movs	r0, #32
 80056be:	4770      	bx	lr

080056c0 <__i2b>:
 80056c0:	b510      	push	{r4, lr}
 80056c2:	460c      	mov	r4, r1
 80056c4:	2101      	movs	r1, #1
 80056c6:	f7ff ff07 	bl	80054d8 <_Balloc>
 80056ca:	4602      	mov	r2, r0
 80056cc:	b928      	cbnz	r0, 80056da <__i2b+0x1a>
 80056ce:	4b05      	ldr	r3, [pc, #20]	@ (80056e4 <__i2b+0x24>)
 80056d0:	4805      	ldr	r0, [pc, #20]	@ (80056e8 <__i2b+0x28>)
 80056d2:	f240 1145 	movw	r1, #325	@ 0x145
 80056d6:	f000 fd09 	bl	80060ec <__assert_func>
 80056da:	2301      	movs	r3, #1
 80056dc:	6144      	str	r4, [r0, #20]
 80056de:	6103      	str	r3, [r0, #16]
 80056e0:	bd10      	pop	{r4, pc}
 80056e2:	bf00      	nop
 80056e4:	08006410 	.word	0x08006410
 80056e8:	08006421 	.word	0x08006421

080056ec <__multiply>:
 80056ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056f0:	4617      	mov	r7, r2
 80056f2:	690a      	ldr	r2, [r1, #16]
 80056f4:	693b      	ldr	r3, [r7, #16]
 80056f6:	429a      	cmp	r2, r3
 80056f8:	bfa8      	it	ge
 80056fa:	463b      	movge	r3, r7
 80056fc:	4689      	mov	r9, r1
 80056fe:	bfa4      	itt	ge
 8005700:	460f      	movge	r7, r1
 8005702:	4699      	movge	r9, r3
 8005704:	693d      	ldr	r5, [r7, #16]
 8005706:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800570a:	68bb      	ldr	r3, [r7, #8]
 800570c:	6879      	ldr	r1, [r7, #4]
 800570e:	eb05 060a 	add.w	r6, r5, sl
 8005712:	42b3      	cmp	r3, r6
 8005714:	b085      	sub	sp, #20
 8005716:	bfb8      	it	lt
 8005718:	3101      	addlt	r1, #1
 800571a:	f7ff fedd 	bl	80054d8 <_Balloc>
 800571e:	b930      	cbnz	r0, 800572e <__multiply+0x42>
 8005720:	4602      	mov	r2, r0
 8005722:	4b41      	ldr	r3, [pc, #260]	@ (8005828 <__multiply+0x13c>)
 8005724:	4841      	ldr	r0, [pc, #260]	@ (800582c <__multiply+0x140>)
 8005726:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800572a:	f000 fcdf 	bl	80060ec <__assert_func>
 800572e:	f100 0414 	add.w	r4, r0, #20
 8005732:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8005736:	4623      	mov	r3, r4
 8005738:	2200      	movs	r2, #0
 800573a:	4573      	cmp	r3, lr
 800573c:	d320      	bcc.n	8005780 <__multiply+0x94>
 800573e:	f107 0814 	add.w	r8, r7, #20
 8005742:	f109 0114 	add.w	r1, r9, #20
 8005746:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800574a:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800574e:	9302      	str	r3, [sp, #8]
 8005750:	1beb      	subs	r3, r5, r7
 8005752:	3b15      	subs	r3, #21
 8005754:	f023 0303 	bic.w	r3, r3, #3
 8005758:	3304      	adds	r3, #4
 800575a:	3715      	adds	r7, #21
 800575c:	42bd      	cmp	r5, r7
 800575e:	bf38      	it	cc
 8005760:	2304      	movcc	r3, #4
 8005762:	9301      	str	r3, [sp, #4]
 8005764:	9b02      	ldr	r3, [sp, #8]
 8005766:	9103      	str	r1, [sp, #12]
 8005768:	428b      	cmp	r3, r1
 800576a:	d80c      	bhi.n	8005786 <__multiply+0x9a>
 800576c:	2e00      	cmp	r6, #0
 800576e:	dd03      	ble.n	8005778 <__multiply+0x8c>
 8005770:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8005774:	2b00      	cmp	r3, #0
 8005776:	d055      	beq.n	8005824 <__multiply+0x138>
 8005778:	6106      	str	r6, [r0, #16]
 800577a:	b005      	add	sp, #20
 800577c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005780:	f843 2b04 	str.w	r2, [r3], #4
 8005784:	e7d9      	b.n	800573a <__multiply+0x4e>
 8005786:	f8b1 a000 	ldrh.w	sl, [r1]
 800578a:	f1ba 0f00 	cmp.w	sl, #0
 800578e:	d01f      	beq.n	80057d0 <__multiply+0xe4>
 8005790:	46c4      	mov	ip, r8
 8005792:	46a1      	mov	r9, r4
 8005794:	2700      	movs	r7, #0
 8005796:	f85c 2b04 	ldr.w	r2, [ip], #4
 800579a:	f8d9 3000 	ldr.w	r3, [r9]
 800579e:	fa1f fb82 	uxth.w	fp, r2
 80057a2:	b29b      	uxth	r3, r3
 80057a4:	fb0a 330b 	mla	r3, sl, fp, r3
 80057a8:	443b      	add	r3, r7
 80057aa:	f8d9 7000 	ldr.w	r7, [r9]
 80057ae:	0c12      	lsrs	r2, r2, #16
 80057b0:	0c3f      	lsrs	r7, r7, #16
 80057b2:	fb0a 7202 	mla	r2, sl, r2, r7
 80057b6:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80057ba:	b29b      	uxth	r3, r3
 80057bc:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057c0:	4565      	cmp	r5, ip
 80057c2:	f849 3b04 	str.w	r3, [r9], #4
 80057c6:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80057ca:	d8e4      	bhi.n	8005796 <__multiply+0xaa>
 80057cc:	9b01      	ldr	r3, [sp, #4]
 80057ce:	50e7      	str	r7, [r4, r3]
 80057d0:	9b03      	ldr	r3, [sp, #12]
 80057d2:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80057d6:	3104      	adds	r1, #4
 80057d8:	f1b9 0f00 	cmp.w	r9, #0
 80057dc:	d020      	beq.n	8005820 <__multiply+0x134>
 80057de:	6823      	ldr	r3, [r4, #0]
 80057e0:	4647      	mov	r7, r8
 80057e2:	46a4      	mov	ip, r4
 80057e4:	f04f 0a00 	mov.w	sl, #0
 80057e8:	f8b7 b000 	ldrh.w	fp, [r7]
 80057ec:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80057f0:	fb09 220b 	mla	r2, r9, fp, r2
 80057f4:	4452      	add	r2, sl
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80057fc:	f84c 3b04 	str.w	r3, [ip], #4
 8005800:	f857 3b04 	ldr.w	r3, [r7], #4
 8005804:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8005808:	f8bc 3000 	ldrh.w	r3, [ip]
 800580c:	fb09 330a 	mla	r3, r9, sl, r3
 8005810:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8005814:	42bd      	cmp	r5, r7
 8005816:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800581a:	d8e5      	bhi.n	80057e8 <__multiply+0xfc>
 800581c:	9a01      	ldr	r2, [sp, #4]
 800581e:	50a3      	str	r3, [r4, r2]
 8005820:	3404      	adds	r4, #4
 8005822:	e79f      	b.n	8005764 <__multiply+0x78>
 8005824:	3e01      	subs	r6, #1
 8005826:	e7a1      	b.n	800576c <__multiply+0x80>
 8005828:	08006410 	.word	0x08006410
 800582c:	08006421 	.word	0x08006421

08005830 <__pow5mult>:
 8005830:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005834:	4615      	mov	r5, r2
 8005836:	f012 0203 	ands.w	r2, r2, #3
 800583a:	4607      	mov	r7, r0
 800583c:	460e      	mov	r6, r1
 800583e:	d007      	beq.n	8005850 <__pow5mult+0x20>
 8005840:	4c25      	ldr	r4, [pc, #148]	@ (80058d8 <__pow5mult+0xa8>)
 8005842:	3a01      	subs	r2, #1
 8005844:	2300      	movs	r3, #0
 8005846:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800584a:	f7ff fea7 	bl	800559c <__multadd>
 800584e:	4606      	mov	r6, r0
 8005850:	10ad      	asrs	r5, r5, #2
 8005852:	d03d      	beq.n	80058d0 <__pow5mult+0xa0>
 8005854:	69fc      	ldr	r4, [r7, #28]
 8005856:	b97c      	cbnz	r4, 8005878 <__pow5mult+0x48>
 8005858:	2010      	movs	r0, #16
 800585a:	f7ff fd87 	bl	800536c <malloc>
 800585e:	4602      	mov	r2, r0
 8005860:	61f8      	str	r0, [r7, #28]
 8005862:	b928      	cbnz	r0, 8005870 <__pow5mult+0x40>
 8005864:	4b1d      	ldr	r3, [pc, #116]	@ (80058dc <__pow5mult+0xac>)
 8005866:	481e      	ldr	r0, [pc, #120]	@ (80058e0 <__pow5mult+0xb0>)
 8005868:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800586c:	f000 fc3e 	bl	80060ec <__assert_func>
 8005870:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005874:	6004      	str	r4, [r0, #0]
 8005876:	60c4      	str	r4, [r0, #12]
 8005878:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800587c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005880:	b94c      	cbnz	r4, 8005896 <__pow5mult+0x66>
 8005882:	f240 2171 	movw	r1, #625	@ 0x271
 8005886:	4638      	mov	r0, r7
 8005888:	f7ff ff1a 	bl	80056c0 <__i2b>
 800588c:	2300      	movs	r3, #0
 800588e:	f8c8 0008 	str.w	r0, [r8, #8]
 8005892:	4604      	mov	r4, r0
 8005894:	6003      	str	r3, [r0, #0]
 8005896:	f04f 0900 	mov.w	r9, #0
 800589a:	07eb      	lsls	r3, r5, #31
 800589c:	d50a      	bpl.n	80058b4 <__pow5mult+0x84>
 800589e:	4631      	mov	r1, r6
 80058a0:	4622      	mov	r2, r4
 80058a2:	4638      	mov	r0, r7
 80058a4:	f7ff ff22 	bl	80056ec <__multiply>
 80058a8:	4631      	mov	r1, r6
 80058aa:	4680      	mov	r8, r0
 80058ac:	4638      	mov	r0, r7
 80058ae:	f7ff fe53 	bl	8005558 <_Bfree>
 80058b2:	4646      	mov	r6, r8
 80058b4:	106d      	asrs	r5, r5, #1
 80058b6:	d00b      	beq.n	80058d0 <__pow5mult+0xa0>
 80058b8:	6820      	ldr	r0, [r4, #0]
 80058ba:	b938      	cbnz	r0, 80058cc <__pow5mult+0x9c>
 80058bc:	4622      	mov	r2, r4
 80058be:	4621      	mov	r1, r4
 80058c0:	4638      	mov	r0, r7
 80058c2:	f7ff ff13 	bl	80056ec <__multiply>
 80058c6:	6020      	str	r0, [r4, #0]
 80058c8:	f8c0 9000 	str.w	r9, [r0]
 80058cc:	4604      	mov	r4, r0
 80058ce:	e7e4      	b.n	800589a <__pow5mult+0x6a>
 80058d0:	4630      	mov	r0, r6
 80058d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80058d6:	bf00      	nop
 80058d8:	080064d4 	.word	0x080064d4
 80058dc:	080063a1 	.word	0x080063a1
 80058e0:	08006421 	.word	0x08006421

080058e4 <__lshift>:
 80058e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80058e8:	460c      	mov	r4, r1
 80058ea:	6849      	ldr	r1, [r1, #4]
 80058ec:	6923      	ldr	r3, [r4, #16]
 80058ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80058f2:	68a3      	ldr	r3, [r4, #8]
 80058f4:	4607      	mov	r7, r0
 80058f6:	4691      	mov	r9, r2
 80058f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80058fc:	f108 0601 	add.w	r6, r8, #1
 8005900:	42b3      	cmp	r3, r6
 8005902:	db0b      	blt.n	800591c <__lshift+0x38>
 8005904:	4638      	mov	r0, r7
 8005906:	f7ff fde7 	bl	80054d8 <_Balloc>
 800590a:	4605      	mov	r5, r0
 800590c:	b948      	cbnz	r0, 8005922 <__lshift+0x3e>
 800590e:	4602      	mov	r2, r0
 8005910:	4b28      	ldr	r3, [pc, #160]	@ (80059b4 <__lshift+0xd0>)
 8005912:	4829      	ldr	r0, [pc, #164]	@ (80059b8 <__lshift+0xd4>)
 8005914:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8005918:	f000 fbe8 	bl	80060ec <__assert_func>
 800591c:	3101      	adds	r1, #1
 800591e:	005b      	lsls	r3, r3, #1
 8005920:	e7ee      	b.n	8005900 <__lshift+0x1c>
 8005922:	2300      	movs	r3, #0
 8005924:	f100 0114 	add.w	r1, r0, #20
 8005928:	f100 0210 	add.w	r2, r0, #16
 800592c:	4618      	mov	r0, r3
 800592e:	4553      	cmp	r3, sl
 8005930:	db33      	blt.n	800599a <__lshift+0xb6>
 8005932:	6920      	ldr	r0, [r4, #16]
 8005934:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005938:	f104 0314 	add.w	r3, r4, #20
 800593c:	f019 091f 	ands.w	r9, r9, #31
 8005940:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005944:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005948:	d02b      	beq.n	80059a2 <__lshift+0xbe>
 800594a:	f1c9 0e20 	rsb	lr, r9, #32
 800594e:	468a      	mov	sl, r1
 8005950:	2200      	movs	r2, #0
 8005952:	6818      	ldr	r0, [r3, #0]
 8005954:	fa00 f009 	lsl.w	r0, r0, r9
 8005958:	4310      	orrs	r0, r2
 800595a:	f84a 0b04 	str.w	r0, [sl], #4
 800595e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005962:	459c      	cmp	ip, r3
 8005964:	fa22 f20e 	lsr.w	r2, r2, lr
 8005968:	d8f3      	bhi.n	8005952 <__lshift+0x6e>
 800596a:	ebac 0304 	sub.w	r3, ip, r4
 800596e:	3b15      	subs	r3, #21
 8005970:	f023 0303 	bic.w	r3, r3, #3
 8005974:	3304      	adds	r3, #4
 8005976:	f104 0015 	add.w	r0, r4, #21
 800597a:	4560      	cmp	r0, ip
 800597c:	bf88      	it	hi
 800597e:	2304      	movhi	r3, #4
 8005980:	50ca      	str	r2, [r1, r3]
 8005982:	b10a      	cbz	r2, 8005988 <__lshift+0xa4>
 8005984:	f108 0602 	add.w	r6, r8, #2
 8005988:	3e01      	subs	r6, #1
 800598a:	4638      	mov	r0, r7
 800598c:	612e      	str	r6, [r5, #16]
 800598e:	4621      	mov	r1, r4
 8005990:	f7ff fde2 	bl	8005558 <_Bfree>
 8005994:	4628      	mov	r0, r5
 8005996:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800599a:	f842 0f04 	str.w	r0, [r2, #4]!
 800599e:	3301      	adds	r3, #1
 80059a0:	e7c5      	b.n	800592e <__lshift+0x4a>
 80059a2:	3904      	subs	r1, #4
 80059a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80059a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80059ac:	459c      	cmp	ip, r3
 80059ae:	d8f9      	bhi.n	80059a4 <__lshift+0xc0>
 80059b0:	e7ea      	b.n	8005988 <__lshift+0xa4>
 80059b2:	bf00      	nop
 80059b4:	08006410 	.word	0x08006410
 80059b8:	08006421 	.word	0x08006421

080059bc <__mcmp>:
 80059bc:	690a      	ldr	r2, [r1, #16]
 80059be:	4603      	mov	r3, r0
 80059c0:	6900      	ldr	r0, [r0, #16]
 80059c2:	1a80      	subs	r0, r0, r2
 80059c4:	b530      	push	{r4, r5, lr}
 80059c6:	d10e      	bne.n	80059e6 <__mcmp+0x2a>
 80059c8:	3314      	adds	r3, #20
 80059ca:	3114      	adds	r1, #20
 80059cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80059d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80059d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80059d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80059dc:	4295      	cmp	r5, r2
 80059de:	d003      	beq.n	80059e8 <__mcmp+0x2c>
 80059e0:	d205      	bcs.n	80059ee <__mcmp+0x32>
 80059e2:	f04f 30ff 	mov.w	r0, #4294967295
 80059e6:	bd30      	pop	{r4, r5, pc}
 80059e8:	42a3      	cmp	r3, r4
 80059ea:	d3f3      	bcc.n	80059d4 <__mcmp+0x18>
 80059ec:	e7fb      	b.n	80059e6 <__mcmp+0x2a>
 80059ee:	2001      	movs	r0, #1
 80059f0:	e7f9      	b.n	80059e6 <__mcmp+0x2a>
	...

080059f4 <__mdiff>:
 80059f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80059f8:	4689      	mov	r9, r1
 80059fa:	4606      	mov	r6, r0
 80059fc:	4611      	mov	r1, r2
 80059fe:	4648      	mov	r0, r9
 8005a00:	4614      	mov	r4, r2
 8005a02:	f7ff ffdb 	bl	80059bc <__mcmp>
 8005a06:	1e05      	subs	r5, r0, #0
 8005a08:	d112      	bne.n	8005a30 <__mdiff+0x3c>
 8005a0a:	4629      	mov	r1, r5
 8005a0c:	4630      	mov	r0, r6
 8005a0e:	f7ff fd63 	bl	80054d8 <_Balloc>
 8005a12:	4602      	mov	r2, r0
 8005a14:	b928      	cbnz	r0, 8005a22 <__mdiff+0x2e>
 8005a16:	4b3f      	ldr	r3, [pc, #252]	@ (8005b14 <__mdiff+0x120>)
 8005a18:	f240 2137 	movw	r1, #567	@ 0x237
 8005a1c:	483e      	ldr	r0, [pc, #248]	@ (8005b18 <__mdiff+0x124>)
 8005a1e:	f000 fb65 	bl	80060ec <__assert_func>
 8005a22:	2301      	movs	r3, #1
 8005a24:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005a28:	4610      	mov	r0, r2
 8005a2a:	b003      	add	sp, #12
 8005a2c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005a30:	bfbc      	itt	lt
 8005a32:	464b      	movlt	r3, r9
 8005a34:	46a1      	movlt	r9, r4
 8005a36:	4630      	mov	r0, r6
 8005a38:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8005a3c:	bfba      	itte	lt
 8005a3e:	461c      	movlt	r4, r3
 8005a40:	2501      	movlt	r5, #1
 8005a42:	2500      	movge	r5, #0
 8005a44:	f7ff fd48 	bl	80054d8 <_Balloc>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	b918      	cbnz	r0, 8005a54 <__mdiff+0x60>
 8005a4c:	4b31      	ldr	r3, [pc, #196]	@ (8005b14 <__mdiff+0x120>)
 8005a4e:	f240 2145 	movw	r1, #581	@ 0x245
 8005a52:	e7e3      	b.n	8005a1c <__mdiff+0x28>
 8005a54:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8005a58:	6926      	ldr	r6, [r4, #16]
 8005a5a:	60c5      	str	r5, [r0, #12]
 8005a5c:	f109 0310 	add.w	r3, r9, #16
 8005a60:	f109 0514 	add.w	r5, r9, #20
 8005a64:	f104 0e14 	add.w	lr, r4, #20
 8005a68:	f100 0b14 	add.w	fp, r0, #20
 8005a6c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8005a70:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8005a74:	9301      	str	r3, [sp, #4]
 8005a76:	46d9      	mov	r9, fp
 8005a78:	f04f 0c00 	mov.w	ip, #0
 8005a7c:	9b01      	ldr	r3, [sp, #4]
 8005a7e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8005a82:	f853 af04 	ldr.w	sl, [r3, #4]!
 8005a86:	9301      	str	r3, [sp, #4]
 8005a88:	fa1f f38a 	uxth.w	r3, sl
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	b283      	uxth	r3, r0
 8005a90:	1acb      	subs	r3, r1, r3
 8005a92:	0c00      	lsrs	r0, r0, #16
 8005a94:	4463      	add	r3, ip
 8005a96:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8005a9a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8005a9e:	b29b      	uxth	r3, r3
 8005aa0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8005aa4:	4576      	cmp	r6, lr
 8005aa6:	f849 3b04 	str.w	r3, [r9], #4
 8005aaa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005aae:	d8e5      	bhi.n	8005a7c <__mdiff+0x88>
 8005ab0:	1b33      	subs	r3, r6, r4
 8005ab2:	3b15      	subs	r3, #21
 8005ab4:	f023 0303 	bic.w	r3, r3, #3
 8005ab8:	3415      	adds	r4, #21
 8005aba:	3304      	adds	r3, #4
 8005abc:	42a6      	cmp	r6, r4
 8005abe:	bf38      	it	cc
 8005ac0:	2304      	movcc	r3, #4
 8005ac2:	441d      	add	r5, r3
 8005ac4:	445b      	add	r3, fp
 8005ac6:	461e      	mov	r6, r3
 8005ac8:	462c      	mov	r4, r5
 8005aca:	4544      	cmp	r4, r8
 8005acc:	d30e      	bcc.n	8005aec <__mdiff+0xf8>
 8005ace:	f108 0103 	add.w	r1, r8, #3
 8005ad2:	1b49      	subs	r1, r1, r5
 8005ad4:	f021 0103 	bic.w	r1, r1, #3
 8005ad8:	3d03      	subs	r5, #3
 8005ada:	45a8      	cmp	r8, r5
 8005adc:	bf38      	it	cc
 8005ade:	2100      	movcc	r1, #0
 8005ae0:	440b      	add	r3, r1
 8005ae2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8005ae6:	b191      	cbz	r1, 8005b0e <__mdiff+0x11a>
 8005ae8:	6117      	str	r7, [r2, #16]
 8005aea:	e79d      	b.n	8005a28 <__mdiff+0x34>
 8005aec:	f854 1b04 	ldr.w	r1, [r4], #4
 8005af0:	46e6      	mov	lr, ip
 8005af2:	0c08      	lsrs	r0, r1, #16
 8005af4:	fa1c fc81 	uxtah	ip, ip, r1
 8005af8:	4471      	add	r1, lr
 8005afa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8005afe:	b289      	uxth	r1, r1
 8005b00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005b04:	f846 1b04 	str.w	r1, [r6], #4
 8005b08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005b0c:	e7dd      	b.n	8005aca <__mdiff+0xd6>
 8005b0e:	3f01      	subs	r7, #1
 8005b10:	e7e7      	b.n	8005ae2 <__mdiff+0xee>
 8005b12:	bf00      	nop
 8005b14:	08006410 	.word	0x08006410
 8005b18:	08006421 	.word	0x08006421

08005b1c <__d2b>:
 8005b1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8005b20:	460f      	mov	r7, r1
 8005b22:	2101      	movs	r1, #1
 8005b24:	ec59 8b10 	vmov	r8, r9, d0
 8005b28:	4616      	mov	r6, r2
 8005b2a:	f7ff fcd5 	bl	80054d8 <_Balloc>
 8005b2e:	4604      	mov	r4, r0
 8005b30:	b930      	cbnz	r0, 8005b40 <__d2b+0x24>
 8005b32:	4602      	mov	r2, r0
 8005b34:	4b23      	ldr	r3, [pc, #140]	@ (8005bc4 <__d2b+0xa8>)
 8005b36:	4824      	ldr	r0, [pc, #144]	@ (8005bc8 <__d2b+0xac>)
 8005b38:	f240 310f 	movw	r1, #783	@ 0x30f
 8005b3c:	f000 fad6 	bl	80060ec <__assert_func>
 8005b40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8005b44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8005b48:	b10d      	cbz	r5, 8005b4e <__d2b+0x32>
 8005b4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005b4e:	9301      	str	r3, [sp, #4]
 8005b50:	f1b8 0300 	subs.w	r3, r8, #0
 8005b54:	d023      	beq.n	8005b9e <__d2b+0x82>
 8005b56:	4668      	mov	r0, sp
 8005b58:	9300      	str	r3, [sp, #0]
 8005b5a:	f7ff fd84 	bl	8005666 <__lo0bits>
 8005b5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8005b62:	b1d0      	cbz	r0, 8005b9a <__d2b+0x7e>
 8005b64:	f1c0 0320 	rsb	r3, r0, #32
 8005b68:	fa02 f303 	lsl.w	r3, r2, r3
 8005b6c:	430b      	orrs	r3, r1
 8005b6e:	40c2      	lsrs	r2, r0
 8005b70:	6163      	str	r3, [r4, #20]
 8005b72:	9201      	str	r2, [sp, #4]
 8005b74:	9b01      	ldr	r3, [sp, #4]
 8005b76:	61a3      	str	r3, [r4, #24]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	bf0c      	ite	eq
 8005b7c:	2201      	moveq	r2, #1
 8005b7e:	2202      	movne	r2, #2
 8005b80:	6122      	str	r2, [r4, #16]
 8005b82:	b1a5      	cbz	r5, 8005bae <__d2b+0x92>
 8005b84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8005b88:	4405      	add	r5, r0
 8005b8a:	603d      	str	r5, [r7, #0]
 8005b8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8005b90:	6030      	str	r0, [r6, #0]
 8005b92:	4620      	mov	r0, r4
 8005b94:	b003      	add	sp, #12
 8005b96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8005b9a:	6161      	str	r1, [r4, #20]
 8005b9c:	e7ea      	b.n	8005b74 <__d2b+0x58>
 8005b9e:	a801      	add	r0, sp, #4
 8005ba0:	f7ff fd61 	bl	8005666 <__lo0bits>
 8005ba4:	9b01      	ldr	r3, [sp, #4]
 8005ba6:	6163      	str	r3, [r4, #20]
 8005ba8:	3020      	adds	r0, #32
 8005baa:	2201      	movs	r2, #1
 8005bac:	e7e8      	b.n	8005b80 <__d2b+0x64>
 8005bae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8005bb2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8005bb6:	6038      	str	r0, [r7, #0]
 8005bb8:	6918      	ldr	r0, [r3, #16]
 8005bba:	f7ff fd35 	bl	8005628 <__hi0bits>
 8005bbe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8005bc2:	e7e5      	b.n	8005b90 <__d2b+0x74>
 8005bc4:	08006410 	.word	0x08006410
 8005bc8:	08006421 	.word	0x08006421

08005bcc <__sfputc_r>:
 8005bcc:	6893      	ldr	r3, [r2, #8]
 8005bce:	3b01      	subs	r3, #1
 8005bd0:	2b00      	cmp	r3, #0
 8005bd2:	b410      	push	{r4}
 8005bd4:	6093      	str	r3, [r2, #8]
 8005bd6:	da08      	bge.n	8005bea <__sfputc_r+0x1e>
 8005bd8:	6994      	ldr	r4, [r2, #24]
 8005bda:	42a3      	cmp	r3, r4
 8005bdc:	db01      	blt.n	8005be2 <__sfputc_r+0x16>
 8005bde:	290a      	cmp	r1, #10
 8005be0:	d103      	bne.n	8005bea <__sfputc_r+0x1e>
 8005be2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005be6:	f7fe bc08 	b.w	80043fa <__swbuf_r>
 8005bea:	6813      	ldr	r3, [r2, #0]
 8005bec:	1c58      	adds	r0, r3, #1
 8005bee:	6010      	str	r0, [r2, #0]
 8005bf0:	7019      	strb	r1, [r3, #0]
 8005bf2:	4608      	mov	r0, r1
 8005bf4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005bf8:	4770      	bx	lr

08005bfa <__sfputs_r>:
 8005bfa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005bfc:	4606      	mov	r6, r0
 8005bfe:	460f      	mov	r7, r1
 8005c00:	4614      	mov	r4, r2
 8005c02:	18d5      	adds	r5, r2, r3
 8005c04:	42ac      	cmp	r4, r5
 8005c06:	d101      	bne.n	8005c0c <__sfputs_r+0x12>
 8005c08:	2000      	movs	r0, #0
 8005c0a:	e007      	b.n	8005c1c <__sfputs_r+0x22>
 8005c0c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005c10:	463a      	mov	r2, r7
 8005c12:	4630      	mov	r0, r6
 8005c14:	f7ff ffda 	bl	8005bcc <__sfputc_r>
 8005c18:	1c43      	adds	r3, r0, #1
 8005c1a:	d1f3      	bne.n	8005c04 <__sfputs_r+0xa>
 8005c1c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005c20 <_vfiprintf_r>:
 8005c20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c24:	460d      	mov	r5, r1
 8005c26:	b09d      	sub	sp, #116	@ 0x74
 8005c28:	4614      	mov	r4, r2
 8005c2a:	4698      	mov	r8, r3
 8005c2c:	4606      	mov	r6, r0
 8005c2e:	b118      	cbz	r0, 8005c38 <_vfiprintf_r+0x18>
 8005c30:	6a03      	ldr	r3, [r0, #32]
 8005c32:	b90b      	cbnz	r3, 8005c38 <_vfiprintf_r+0x18>
 8005c34:	f7fe faf8 	bl	8004228 <__sinit>
 8005c38:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c3a:	07d9      	lsls	r1, r3, #31
 8005c3c:	d405      	bmi.n	8005c4a <_vfiprintf_r+0x2a>
 8005c3e:	89ab      	ldrh	r3, [r5, #12]
 8005c40:	059a      	lsls	r2, r3, #22
 8005c42:	d402      	bmi.n	8005c4a <_vfiprintf_r+0x2a>
 8005c44:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c46:	f7fe fcea 	bl	800461e <__retarget_lock_acquire_recursive>
 8005c4a:	89ab      	ldrh	r3, [r5, #12]
 8005c4c:	071b      	lsls	r3, r3, #28
 8005c4e:	d501      	bpl.n	8005c54 <_vfiprintf_r+0x34>
 8005c50:	692b      	ldr	r3, [r5, #16]
 8005c52:	b99b      	cbnz	r3, 8005c7c <_vfiprintf_r+0x5c>
 8005c54:	4629      	mov	r1, r5
 8005c56:	4630      	mov	r0, r6
 8005c58:	f7fe fc0e 	bl	8004478 <__swsetup_r>
 8005c5c:	b170      	cbz	r0, 8005c7c <_vfiprintf_r+0x5c>
 8005c5e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005c60:	07dc      	lsls	r4, r3, #31
 8005c62:	d504      	bpl.n	8005c6e <_vfiprintf_r+0x4e>
 8005c64:	f04f 30ff 	mov.w	r0, #4294967295
 8005c68:	b01d      	add	sp, #116	@ 0x74
 8005c6a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c6e:	89ab      	ldrh	r3, [r5, #12]
 8005c70:	0598      	lsls	r0, r3, #22
 8005c72:	d4f7      	bmi.n	8005c64 <_vfiprintf_r+0x44>
 8005c74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005c76:	f7fe fcd3 	bl	8004620 <__retarget_lock_release_recursive>
 8005c7a:	e7f3      	b.n	8005c64 <_vfiprintf_r+0x44>
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8005c80:	2320      	movs	r3, #32
 8005c82:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8005c86:	f8cd 800c 	str.w	r8, [sp, #12]
 8005c8a:	2330      	movs	r3, #48	@ 0x30
 8005c8c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8005e3c <_vfiprintf_r+0x21c>
 8005c90:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8005c94:	f04f 0901 	mov.w	r9, #1
 8005c98:	4623      	mov	r3, r4
 8005c9a:	469a      	mov	sl, r3
 8005c9c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005ca0:	b10a      	cbz	r2, 8005ca6 <_vfiprintf_r+0x86>
 8005ca2:	2a25      	cmp	r2, #37	@ 0x25
 8005ca4:	d1f9      	bne.n	8005c9a <_vfiprintf_r+0x7a>
 8005ca6:	ebba 0b04 	subs.w	fp, sl, r4
 8005caa:	d00b      	beq.n	8005cc4 <_vfiprintf_r+0xa4>
 8005cac:	465b      	mov	r3, fp
 8005cae:	4622      	mov	r2, r4
 8005cb0:	4629      	mov	r1, r5
 8005cb2:	4630      	mov	r0, r6
 8005cb4:	f7ff ffa1 	bl	8005bfa <__sfputs_r>
 8005cb8:	3001      	adds	r0, #1
 8005cba:	f000 80a7 	beq.w	8005e0c <_vfiprintf_r+0x1ec>
 8005cbe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8005cc0:	445a      	add	r2, fp
 8005cc2:	9209      	str	r2, [sp, #36]	@ 0x24
 8005cc4:	f89a 3000 	ldrb.w	r3, [sl]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 809f 	beq.w	8005e0c <_vfiprintf_r+0x1ec>
 8005cce:	2300      	movs	r3, #0
 8005cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8005cd4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005cd8:	f10a 0a01 	add.w	sl, sl, #1
 8005cdc:	9304      	str	r3, [sp, #16]
 8005cde:	9307      	str	r3, [sp, #28]
 8005ce0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8005ce4:	931a      	str	r3, [sp, #104]	@ 0x68
 8005ce6:	4654      	mov	r4, sl
 8005ce8:	2205      	movs	r2, #5
 8005cea:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005cee:	4853      	ldr	r0, [pc, #332]	@ (8005e3c <_vfiprintf_r+0x21c>)
 8005cf0:	f7fa fa7e 	bl	80001f0 <memchr>
 8005cf4:	9a04      	ldr	r2, [sp, #16]
 8005cf6:	b9d8      	cbnz	r0, 8005d30 <_vfiprintf_r+0x110>
 8005cf8:	06d1      	lsls	r1, r2, #27
 8005cfa:	bf44      	itt	mi
 8005cfc:	2320      	movmi	r3, #32
 8005cfe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d02:	0713      	lsls	r3, r2, #28
 8005d04:	bf44      	itt	mi
 8005d06:	232b      	movmi	r3, #43	@ 0x2b
 8005d08:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8005d0c:	f89a 3000 	ldrb.w	r3, [sl]
 8005d10:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d12:	d015      	beq.n	8005d40 <_vfiprintf_r+0x120>
 8005d14:	9a07      	ldr	r2, [sp, #28]
 8005d16:	4654      	mov	r4, sl
 8005d18:	2000      	movs	r0, #0
 8005d1a:	f04f 0c0a 	mov.w	ip, #10
 8005d1e:	4621      	mov	r1, r4
 8005d20:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005d24:	3b30      	subs	r3, #48	@ 0x30
 8005d26:	2b09      	cmp	r3, #9
 8005d28:	d94b      	bls.n	8005dc2 <_vfiprintf_r+0x1a2>
 8005d2a:	b1b0      	cbz	r0, 8005d5a <_vfiprintf_r+0x13a>
 8005d2c:	9207      	str	r2, [sp, #28]
 8005d2e:	e014      	b.n	8005d5a <_vfiprintf_r+0x13a>
 8005d30:	eba0 0308 	sub.w	r3, r0, r8
 8005d34:	fa09 f303 	lsl.w	r3, r9, r3
 8005d38:	4313      	orrs	r3, r2
 8005d3a:	9304      	str	r3, [sp, #16]
 8005d3c:	46a2      	mov	sl, r4
 8005d3e:	e7d2      	b.n	8005ce6 <_vfiprintf_r+0xc6>
 8005d40:	9b03      	ldr	r3, [sp, #12]
 8005d42:	1d19      	adds	r1, r3, #4
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	9103      	str	r1, [sp, #12]
 8005d48:	2b00      	cmp	r3, #0
 8005d4a:	bfbb      	ittet	lt
 8005d4c:	425b      	neglt	r3, r3
 8005d4e:	f042 0202 	orrlt.w	r2, r2, #2
 8005d52:	9307      	strge	r3, [sp, #28]
 8005d54:	9307      	strlt	r3, [sp, #28]
 8005d56:	bfb8      	it	lt
 8005d58:	9204      	strlt	r2, [sp, #16]
 8005d5a:	7823      	ldrb	r3, [r4, #0]
 8005d5c:	2b2e      	cmp	r3, #46	@ 0x2e
 8005d5e:	d10a      	bne.n	8005d76 <_vfiprintf_r+0x156>
 8005d60:	7863      	ldrb	r3, [r4, #1]
 8005d62:	2b2a      	cmp	r3, #42	@ 0x2a
 8005d64:	d132      	bne.n	8005dcc <_vfiprintf_r+0x1ac>
 8005d66:	9b03      	ldr	r3, [sp, #12]
 8005d68:	1d1a      	adds	r2, r3, #4
 8005d6a:	681b      	ldr	r3, [r3, #0]
 8005d6c:	9203      	str	r2, [sp, #12]
 8005d6e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8005d72:	3402      	adds	r4, #2
 8005d74:	9305      	str	r3, [sp, #20]
 8005d76:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8005e4c <_vfiprintf_r+0x22c>
 8005d7a:	7821      	ldrb	r1, [r4, #0]
 8005d7c:	2203      	movs	r2, #3
 8005d7e:	4650      	mov	r0, sl
 8005d80:	f7fa fa36 	bl	80001f0 <memchr>
 8005d84:	b138      	cbz	r0, 8005d96 <_vfiprintf_r+0x176>
 8005d86:	9b04      	ldr	r3, [sp, #16]
 8005d88:	eba0 000a 	sub.w	r0, r0, sl
 8005d8c:	2240      	movs	r2, #64	@ 0x40
 8005d8e:	4082      	lsls	r2, r0
 8005d90:	4313      	orrs	r3, r2
 8005d92:	3401      	adds	r4, #1
 8005d94:	9304      	str	r3, [sp, #16]
 8005d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005d9a:	4829      	ldr	r0, [pc, #164]	@ (8005e40 <_vfiprintf_r+0x220>)
 8005d9c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8005da0:	2206      	movs	r2, #6
 8005da2:	f7fa fa25 	bl	80001f0 <memchr>
 8005da6:	2800      	cmp	r0, #0
 8005da8:	d03f      	beq.n	8005e2a <_vfiprintf_r+0x20a>
 8005daa:	4b26      	ldr	r3, [pc, #152]	@ (8005e44 <_vfiprintf_r+0x224>)
 8005dac:	bb1b      	cbnz	r3, 8005df6 <_vfiprintf_r+0x1d6>
 8005dae:	9b03      	ldr	r3, [sp, #12]
 8005db0:	3307      	adds	r3, #7
 8005db2:	f023 0307 	bic.w	r3, r3, #7
 8005db6:	3308      	adds	r3, #8
 8005db8:	9303      	str	r3, [sp, #12]
 8005dba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005dbc:	443b      	add	r3, r7
 8005dbe:	9309      	str	r3, [sp, #36]	@ 0x24
 8005dc0:	e76a      	b.n	8005c98 <_vfiprintf_r+0x78>
 8005dc2:	fb0c 3202 	mla	r2, ip, r2, r3
 8005dc6:	460c      	mov	r4, r1
 8005dc8:	2001      	movs	r0, #1
 8005dca:	e7a8      	b.n	8005d1e <_vfiprintf_r+0xfe>
 8005dcc:	2300      	movs	r3, #0
 8005dce:	3401      	adds	r4, #1
 8005dd0:	9305      	str	r3, [sp, #20]
 8005dd2:	4619      	mov	r1, r3
 8005dd4:	f04f 0c0a 	mov.w	ip, #10
 8005dd8:	4620      	mov	r0, r4
 8005dda:	f810 2b01 	ldrb.w	r2, [r0], #1
 8005dde:	3a30      	subs	r2, #48	@ 0x30
 8005de0:	2a09      	cmp	r2, #9
 8005de2:	d903      	bls.n	8005dec <_vfiprintf_r+0x1cc>
 8005de4:	2b00      	cmp	r3, #0
 8005de6:	d0c6      	beq.n	8005d76 <_vfiprintf_r+0x156>
 8005de8:	9105      	str	r1, [sp, #20]
 8005dea:	e7c4      	b.n	8005d76 <_vfiprintf_r+0x156>
 8005dec:	fb0c 2101 	mla	r1, ip, r1, r2
 8005df0:	4604      	mov	r4, r0
 8005df2:	2301      	movs	r3, #1
 8005df4:	e7f0      	b.n	8005dd8 <_vfiprintf_r+0x1b8>
 8005df6:	ab03      	add	r3, sp, #12
 8005df8:	9300      	str	r3, [sp, #0]
 8005dfa:	462a      	mov	r2, r5
 8005dfc:	4b12      	ldr	r3, [pc, #72]	@ (8005e48 <_vfiprintf_r+0x228>)
 8005dfe:	a904      	add	r1, sp, #16
 8005e00:	4630      	mov	r0, r6
 8005e02:	f7fd fdcf 	bl	80039a4 <_printf_float>
 8005e06:	4607      	mov	r7, r0
 8005e08:	1c78      	adds	r0, r7, #1
 8005e0a:	d1d6      	bne.n	8005dba <_vfiprintf_r+0x19a>
 8005e0c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005e0e:	07d9      	lsls	r1, r3, #31
 8005e10:	d405      	bmi.n	8005e1e <_vfiprintf_r+0x1fe>
 8005e12:	89ab      	ldrh	r3, [r5, #12]
 8005e14:	059a      	lsls	r2, r3, #22
 8005e16:	d402      	bmi.n	8005e1e <_vfiprintf_r+0x1fe>
 8005e18:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005e1a:	f7fe fc01 	bl	8004620 <__retarget_lock_release_recursive>
 8005e1e:	89ab      	ldrh	r3, [r5, #12]
 8005e20:	065b      	lsls	r3, r3, #25
 8005e22:	f53f af1f 	bmi.w	8005c64 <_vfiprintf_r+0x44>
 8005e26:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005e28:	e71e      	b.n	8005c68 <_vfiprintf_r+0x48>
 8005e2a:	ab03      	add	r3, sp, #12
 8005e2c:	9300      	str	r3, [sp, #0]
 8005e2e:	462a      	mov	r2, r5
 8005e30:	4b05      	ldr	r3, [pc, #20]	@ (8005e48 <_vfiprintf_r+0x228>)
 8005e32:	a904      	add	r1, sp, #16
 8005e34:	4630      	mov	r0, r6
 8005e36:	f7fe f84d 	bl	8003ed4 <_printf_i>
 8005e3a:	e7e4      	b.n	8005e06 <_vfiprintf_r+0x1e6>
 8005e3c:	0800647a 	.word	0x0800647a
 8005e40:	08006484 	.word	0x08006484
 8005e44:	080039a5 	.word	0x080039a5
 8005e48:	08005bfb 	.word	0x08005bfb
 8005e4c:	08006480 	.word	0x08006480

08005e50 <__sflush_r>:
 8005e50:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8005e54:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e58:	0716      	lsls	r6, r2, #28
 8005e5a:	4605      	mov	r5, r0
 8005e5c:	460c      	mov	r4, r1
 8005e5e:	d454      	bmi.n	8005f0a <__sflush_r+0xba>
 8005e60:	684b      	ldr	r3, [r1, #4]
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	dc02      	bgt.n	8005e6c <__sflush_r+0x1c>
 8005e66:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8005e68:	2b00      	cmp	r3, #0
 8005e6a:	dd48      	ble.n	8005efe <__sflush_r+0xae>
 8005e6c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e6e:	2e00      	cmp	r6, #0
 8005e70:	d045      	beq.n	8005efe <__sflush_r+0xae>
 8005e72:	2300      	movs	r3, #0
 8005e74:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8005e78:	682f      	ldr	r7, [r5, #0]
 8005e7a:	6a21      	ldr	r1, [r4, #32]
 8005e7c:	602b      	str	r3, [r5, #0]
 8005e7e:	d030      	beq.n	8005ee2 <__sflush_r+0x92>
 8005e80:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8005e82:	89a3      	ldrh	r3, [r4, #12]
 8005e84:	0759      	lsls	r1, r3, #29
 8005e86:	d505      	bpl.n	8005e94 <__sflush_r+0x44>
 8005e88:	6863      	ldr	r3, [r4, #4]
 8005e8a:	1ad2      	subs	r2, r2, r3
 8005e8c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8005e8e:	b10b      	cbz	r3, 8005e94 <__sflush_r+0x44>
 8005e90:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8005e92:	1ad2      	subs	r2, r2, r3
 8005e94:	2300      	movs	r3, #0
 8005e96:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8005e98:	6a21      	ldr	r1, [r4, #32]
 8005e9a:	4628      	mov	r0, r5
 8005e9c:	47b0      	blx	r6
 8005e9e:	1c43      	adds	r3, r0, #1
 8005ea0:	89a3      	ldrh	r3, [r4, #12]
 8005ea2:	d106      	bne.n	8005eb2 <__sflush_r+0x62>
 8005ea4:	6829      	ldr	r1, [r5, #0]
 8005ea6:	291d      	cmp	r1, #29
 8005ea8:	d82b      	bhi.n	8005f02 <__sflush_r+0xb2>
 8005eaa:	4a2a      	ldr	r2, [pc, #168]	@ (8005f54 <__sflush_r+0x104>)
 8005eac:	40ca      	lsrs	r2, r1
 8005eae:	07d6      	lsls	r6, r2, #31
 8005eb0:	d527      	bpl.n	8005f02 <__sflush_r+0xb2>
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	6062      	str	r2, [r4, #4]
 8005eb6:	04d9      	lsls	r1, r3, #19
 8005eb8:	6922      	ldr	r2, [r4, #16]
 8005eba:	6022      	str	r2, [r4, #0]
 8005ebc:	d504      	bpl.n	8005ec8 <__sflush_r+0x78>
 8005ebe:	1c42      	adds	r2, r0, #1
 8005ec0:	d101      	bne.n	8005ec6 <__sflush_r+0x76>
 8005ec2:	682b      	ldr	r3, [r5, #0]
 8005ec4:	b903      	cbnz	r3, 8005ec8 <__sflush_r+0x78>
 8005ec6:	6560      	str	r0, [r4, #84]	@ 0x54
 8005ec8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8005eca:	602f      	str	r7, [r5, #0]
 8005ecc:	b1b9      	cbz	r1, 8005efe <__sflush_r+0xae>
 8005ece:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005ed2:	4299      	cmp	r1, r3
 8005ed4:	d002      	beq.n	8005edc <__sflush_r+0x8c>
 8005ed6:	4628      	mov	r0, r5
 8005ed8:	f7ff f9fe 	bl	80052d8 <_free_r>
 8005edc:	2300      	movs	r3, #0
 8005ede:	6363      	str	r3, [r4, #52]	@ 0x34
 8005ee0:	e00d      	b.n	8005efe <__sflush_r+0xae>
 8005ee2:	2301      	movs	r3, #1
 8005ee4:	4628      	mov	r0, r5
 8005ee6:	47b0      	blx	r6
 8005ee8:	4602      	mov	r2, r0
 8005eea:	1c50      	adds	r0, r2, #1
 8005eec:	d1c9      	bne.n	8005e82 <__sflush_r+0x32>
 8005eee:	682b      	ldr	r3, [r5, #0]
 8005ef0:	2b00      	cmp	r3, #0
 8005ef2:	d0c6      	beq.n	8005e82 <__sflush_r+0x32>
 8005ef4:	2b1d      	cmp	r3, #29
 8005ef6:	d001      	beq.n	8005efc <__sflush_r+0xac>
 8005ef8:	2b16      	cmp	r3, #22
 8005efa:	d11e      	bne.n	8005f3a <__sflush_r+0xea>
 8005efc:	602f      	str	r7, [r5, #0]
 8005efe:	2000      	movs	r0, #0
 8005f00:	e022      	b.n	8005f48 <__sflush_r+0xf8>
 8005f02:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f06:	b21b      	sxth	r3, r3
 8005f08:	e01b      	b.n	8005f42 <__sflush_r+0xf2>
 8005f0a:	690f      	ldr	r7, [r1, #16]
 8005f0c:	2f00      	cmp	r7, #0
 8005f0e:	d0f6      	beq.n	8005efe <__sflush_r+0xae>
 8005f10:	0793      	lsls	r3, r2, #30
 8005f12:	680e      	ldr	r6, [r1, #0]
 8005f14:	bf08      	it	eq
 8005f16:	694b      	ldreq	r3, [r1, #20]
 8005f18:	600f      	str	r7, [r1, #0]
 8005f1a:	bf18      	it	ne
 8005f1c:	2300      	movne	r3, #0
 8005f1e:	eba6 0807 	sub.w	r8, r6, r7
 8005f22:	608b      	str	r3, [r1, #8]
 8005f24:	f1b8 0f00 	cmp.w	r8, #0
 8005f28:	dde9      	ble.n	8005efe <__sflush_r+0xae>
 8005f2a:	6a21      	ldr	r1, [r4, #32]
 8005f2c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8005f2e:	4643      	mov	r3, r8
 8005f30:	463a      	mov	r2, r7
 8005f32:	4628      	mov	r0, r5
 8005f34:	47b0      	blx	r6
 8005f36:	2800      	cmp	r0, #0
 8005f38:	dc08      	bgt.n	8005f4c <__sflush_r+0xfc>
 8005f3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f3e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005f42:	81a3      	strh	r3, [r4, #12]
 8005f44:	f04f 30ff 	mov.w	r0, #4294967295
 8005f48:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f4c:	4407      	add	r7, r0
 8005f4e:	eba8 0800 	sub.w	r8, r8, r0
 8005f52:	e7e7      	b.n	8005f24 <__sflush_r+0xd4>
 8005f54:	20400001 	.word	0x20400001

08005f58 <_fflush_r>:
 8005f58:	b538      	push	{r3, r4, r5, lr}
 8005f5a:	690b      	ldr	r3, [r1, #16]
 8005f5c:	4605      	mov	r5, r0
 8005f5e:	460c      	mov	r4, r1
 8005f60:	b913      	cbnz	r3, 8005f68 <_fflush_r+0x10>
 8005f62:	2500      	movs	r5, #0
 8005f64:	4628      	mov	r0, r5
 8005f66:	bd38      	pop	{r3, r4, r5, pc}
 8005f68:	b118      	cbz	r0, 8005f72 <_fflush_r+0x1a>
 8005f6a:	6a03      	ldr	r3, [r0, #32]
 8005f6c:	b90b      	cbnz	r3, 8005f72 <_fflush_r+0x1a>
 8005f6e:	f7fe f95b 	bl	8004228 <__sinit>
 8005f72:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d0f3      	beq.n	8005f62 <_fflush_r+0xa>
 8005f7a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8005f7c:	07d0      	lsls	r0, r2, #31
 8005f7e:	d404      	bmi.n	8005f8a <_fflush_r+0x32>
 8005f80:	0599      	lsls	r1, r3, #22
 8005f82:	d402      	bmi.n	8005f8a <_fflush_r+0x32>
 8005f84:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005f86:	f7fe fb4a 	bl	800461e <__retarget_lock_acquire_recursive>
 8005f8a:	4628      	mov	r0, r5
 8005f8c:	4621      	mov	r1, r4
 8005f8e:	f7ff ff5f 	bl	8005e50 <__sflush_r>
 8005f92:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8005f94:	07da      	lsls	r2, r3, #31
 8005f96:	4605      	mov	r5, r0
 8005f98:	d4e4      	bmi.n	8005f64 <_fflush_r+0xc>
 8005f9a:	89a3      	ldrh	r3, [r4, #12]
 8005f9c:	059b      	lsls	r3, r3, #22
 8005f9e:	d4e1      	bmi.n	8005f64 <_fflush_r+0xc>
 8005fa0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8005fa2:	f7fe fb3d 	bl	8004620 <__retarget_lock_release_recursive>
 8005fa6:	e7dd      	b.n	8005f64 <_fflush_r+0xc>

08005fa8 <__swhatbuf_r>:
 8005fa8:	b570      	push	{r4, r5, r6, lr}
 8005faa:	460c      	mov	r4, r1
 8005fac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005fb0:	2900      	cmp	r1, #0
 8005fb2:	b096      	sub	sp, #88	@ 0x58
 8005fb4:	4615      	mov	r5, r2
 8005fb6:	461e      	mov	r6, r3
 8005fb8:	da0d      	bge.n	8005fd6 <__swhatbuf_r+0x2e>
 8005fba:	89a3      	ldrh	r3, [r4, #12]
 8005fbc:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005fc0:	f04f 0100 	mov.w	r1, #0
 8005fc4:	bf14      	ite	ne
 8005fc6:	2340      	movne	r3, #64	@ 0x40
 8005fc8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8005fcc:	2000      	movs	r0, #0
 8005fce:	6031      	str	r1, [r6, #0]
 8005fd0:	602b      	str	r3, [r5, #0]
 8005fd2:	b016      	add	sp, #88	@ 0x58
 8005fd4:	bd70      	pop	{r4, r5, r6, pc}
 8005fd6:	466a      	mov	r2, sp
 8005fd8:	f000 f848 	bl	800606c <_fstat_r>
 8005fdc:	2800      	cmp	r0, #0
 8005fde:	dbec      	blt.n	8005fba <__swhatbuf_r+0x12>
 8005fe0:	9901      	ldr	r1, [sp, #4]
 8005fe2:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005fe6:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005fea:	4259      	negs	r1, r3
 8005fec:	4159      	adcs	r1, r3
 8005fee:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005ff2:	e7eb      	b.n	8005fcc <__swhatbuf_r+0x24>

08005ff4 <__smakebuf_r>:
 8005ff4:	898b      	ldrh	r3, [r1, #12]
 8005ff6:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005ff8:	079d      	lsls	r5, r3, #30
 8005ffa:	4606      	mov	r6, r0
 8005ffc:	460c      	mov	r4, r1
 8005ffe:	d507      	bpl.n	8006010 <__smakebuf_r+0x1c>
 8006000:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8006004:	6023      	str	r3, [r4, #0]
 8006006:	6123      	str	r3, [r4, #16]
 8006008:	2301      	movs	r3, #1
 800600a:	6163      	str	r3, [r4, #20]
 800600c:	b003      	add	sp, #12
 800600e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006010:	ab01      	add	r3, sp, #4
 8006012:	466a      	mov	r2, sp
 8006014:	f7ff ffc8 	bl	8005fa8 <__swhatbuf_r>
 8006018:	9f00      	ldr	r7, [sp, #0]
 800601a:	4605      	mov	r5, r0
 800601c:	4639      	mov	r1, r7
 800601e:	4630      	mov	r0, r6
 8006020:	f7ff f9ce 	bl	80053c0 <_malloc_r>
 8006024:	b948      	cbnz	r0, 800603a <__smakebuf_r+0x46>
 8006026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800602a:	059a      	lsls	r2, r3, #22
 800602c:	d4ee      	bmi.n	800600c <__smakebuf_r+0x18>
 800602e:	f023 0303 	bic.w	r3, r3, #3
 8006032:	f043 0302 	orr.w	r3, r3, #2
 8006036:	81a3      	strh	r3, [r4, #12]
 8006038:	e7e2      	b.n	8006000 <__smakebuf_r+0xc>
 800603a:	89a3      	ldrh	r3, [r4, #12]
 800603c:	6020      	str	r0, [r4, #0]
 800603e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8006042:	81a3      	strh	r3, [r4, #12]
 8006044:	9b01      	ldr	r3, [sp, #4]
 8006046:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800604a:	b15b      	cbz	r3, 8006064 <__smakebuf_r+0x70>
 800604c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006050:	4630      	mov	r0, r6
 8006052:	f000 f81d 	bl	8006090 <_isatty_r>
 8006056:	b128      	cbz	r0, 8006064 <__smakebuf_r+0x70>
 8006058:	89a3      	ldrh	r3, [r4, #12]
 800605a:	f023 0303 	bic.w	r3, r3, #3
 800605e:	f043 0301 	orr.w	r3, r3, #1
 8006062:	81a3      	strh	r3, [r4, #12]
 8006064:	89a3      	ldrh	r3, [r4, #12]
 8006066:	431d      	orrs	r5, r3
 8006068:	81a5      	strh	r5, [r4, #12]
 800606a:	e7cf      	b.n	800600c <__smakebuf_r+0x18>

0800606c <_fstat_r>:
 800606c:	b538      	push	{r3, r4, r5, lr}
 800606e:	4d07      	ldr	r5, [pc, #28]	@ (800608c <_fstat_r+0x20>)
 8006070:	2300      	movs	r3, #0
 8006072:	4604      	mov	r4, r0
 8006074:	4608      	mov	r0, r1
 8006076:	4611      	mov	r1, r2
 8006078:	602b      	str	r3, [r5, #0]
 800607a:	f7fb fd57 	bl	8001b2c <_fstat>
 800607e:	1c43      	adds	r3, r0, #1
 8006080:	d102      	bne.n	8006088 <_fstat_r+0x1c>
 8006082:	682b      	ldr	r3, [r5, #0]
 8006084:	b103      	cbz	r3, 8006088 <_fstat_r+0x1c>
 8006086:	6023      	str	r3, [r4, #0]
 8006088:	bd38      	pop	{r3, r4, r5, pc}
 800608a:	bf00      	nop
 800608c:	20000398 	.word	0x20000398

08006090 <_isatty_r>:
 8006090:	b538      	push	{r3, r4, r5, lr}
 8006092:	4d06      	ldr	r5, [pc, #24]	@ (80060ac <_isatty_r+0x1c>)
 8006094:	2300      	movs	r3, #0
 8006096:	4604      	mov	r4, r0
 8006098:	4608      	mov	r0, r1
 800609a:	602b      	str	r3, [r5, #0]
 800609c:	f7fb fd56 	bl	8001b4c <_isatty>
 80060a0:	1c43      	adds	r3, r0, #1
 80060a2:	d102      	bne.n	80060aa <_isatty_r+0x1a>
 80060a4:	682b      	ldr	r3, [r5, #0]
 80060a6:	b103      	cbz	r3, 80060aa <_isatty_r+0x1a>
 80060a8:	6023      	str	r3, [r4, #0]
 80060aa:	bd38      	pop	{r3, r4, r5, pc}
 80060ac:	20000398 	.word	0x20000398

080060b0 <_sbrk_r>:
 80060b0:	b538      	push	{r3, r4, r5, lr}
 80060b2:	4d06      	ldr	r5, [pc, #24]	@ (80060cc <_sbrk_r+0x1c>)
 80060b4:	2300      	movs	r3, #0
 80060b6:	4604      	mov	r4, r0
 80060b8:	4608      	mov	r0, r1
 80060ba:	602b      	str	r3, [r5, #0]
 80060bc:	f7fb fd5e 	bl	8001b7c <_sbrk>
 80060c0:	1c43      	adds	r3, r0, #1
 80060c2:	d102      	bne.n	80060ca <_sbrk_r+0x1a>
 80060c4:	682b      	ldr	r3, [r5, #0]
 80060c6:	b103      	cbz	r3, 80060ca <_sbrk_r+0x1a>
 80060c8:	6023      	str	r3, [r4, #0]
 80060ca:	bd38      	pop	{r3, r4, r5, pc}
 80060cc:	20000398 	.word	0x20000398

080060d0 <memcpy>:
 80060d0:	440a      	add	r2, r1
 80060d2:	4291      	cmp	r1, r2
 80060d4:	f100 33ff 	add.w	r3, r0, #4294967295
 80060d8:	d100      	bne.n	80060dc <memcpy+0xc>
 80060da:	4770      	bx	lr
 80060dc:	b510      	push	{r4, lr}
 80060de:	f811 4b01 	ldrb.w	r4, [r1], #1
 80060e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 80060e6:	4291      	cmp	r1, r2
 80060e8:	d1f9      	bne.n	80060de <memcpy+0xe>
 80060ea:	bd10      	pop	{r4, pc}

080060ec <__assert_func>:
 80060ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80060ee:	4614      	mov	r4, r2
 80060f0:	461a      	mov	r2, r3
 80060f2:	4b09      	ldr	r3, [pc, #36]	@ (8006118 <__assert_func+0x2c>)
 80060f4:	681b      	ldr	r3, [r3, #0]
 80060f6:	4605      	mov	r5, r0
 80060f8:	68d8      	ldr	r0, [r3, #12]
 80060fa:	b14c      	cbz	r4, 8006110 <__assert_func+0x24>
 80060fc:	4b07      	ldr	r3, [pc, #28]	@ (800611c <__assert_func+0x30>)
 80060fe:	9100      	str	r1, [sp, #0]
 8006100:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006104:	4906      	ldr	r1, [pc, #24]	@ (8006120 <__assert_func+0x34>)
 8006106:	462b      	mov	r3, r5
 8006108:	f000 f842 	bl	8006190 <fiprintf>
 800610c:	f000 f852 	bl	80061b4 <abort>
 8006110:	4b04      	ldr	r3, [pc, #16]	@ (8006124 <__assert_func+0x38>)
 8006112:	461c      	mov	r4, r3
 8006114:	e7f3      	b.n	80060fe <__assert_func+0x12>
 8006116:	bf00      	nop
 8006118:	20000018 	.word	0x20000018
 800611c:	08006495 	.word	0x08006495
 8006120:	080064a2 	.word	0x080064a2
 8006124:	080064d0 	.word	0x080064d0

08006128 <_calloc_r>:
 8006128:	b570      	push	{r4, r5, r6, lr}
 800612a:	fba1 5402 	umull	r5, r4, r1, r2
 800612e:	b934      	cbnz	r4, 800613e <_calloc_r+0x16>
 8006130:	4629      	mov	r1, r5
 8006132:	f7ff f945 	bl	80053c0 <_malloc_r>
 8006136:	4606      	mov	r6, r0
 8006138:	b928      	cbnz	r0, 8006146 <_calloc_r+0x1e>
 800613a:	4630      	mov	r0, r6
 800613c:	bd70      	pop	{r4, r5, r6, pc}
 800613e:	220c      	movs	r2, #12
 8006140:	6002      	str	r2, [r0, #0]
 8006142:	2600      	movs	r6, #0
 8006144:	e7f9      	b.n	800613a <_calloc_r+0x12>
 8006146:	462a      	mov	r2, r5
 8006148:	4621      	mov	r1, r4
 800614a:	f7fe f9eb 	bl	8004524 <memset>
 800614e:	e7f4      	b.n	800613a <_calloc_r+0x12>

08006150 <__ascii_mbtowc>:
 8006150:	b082      	sub	sp, #8
 8006152:	b901      	cbnz	r1, 8006156 <__ascii_mbtowc+0x6>
 8006154:	a901      	add	r1, sp, #4
 8006156:	b142      	cbz	r2, 800616a <__ascii_mbtowc+0x1a>
 8006158:	b14b      	cbz	r3, 800616e <__ascii_mbtowc+0x1e>
 800615a:	7813      	ldrb	r3, [r2, #0]
 800615c:	600b      	str	r3, [r1, #0]
 800615e:	7812      	ldrb	r2, [r2, #0]
 8006160:	1e10      	subs	r0, r2, #0
 8006162:	bf18      	it	ne
 8006164:	2001      	movne	r0, #1
 8006166:	b002      	add	sp, #8
 8006168:	4770      	bx	lr
 800616a:	4610      	mov	r0, r2
 800616c:	e7fb      	b.n	8006166 <__ascii_mbtowc+0x16>
 800616e:	f06f 0001 	mvn.w	r0, #1
 8006172:	e7f8      	b.n	8006166 <__ascii_mbtowc+0x16>

08006174 <__ascii_wctomb>:
 8006174:	4603      	mov	r3, r0
 8006176:	4608      	mov	r0, r1
 8006178:	b141      	cbz	r1, 800618c <__ascii_wctomb+0x18>
 800617a:	2aff      	cmp	r2, #255	@ 0xff
 800617c:	d904      	bls.n	8006188 <__ascii_wctomb+0x14>
 800617e:	228a      	movs	r2, #138	@ 0x8a
 8006180:	601a      	str	r2, [r3, #0]
 8006182:	f04f 30ff 	mov.w	r0, #4294967295
 8006186:	4770      	bx	lr
 8006188:	700a      	strb	r2, [r1, #0]
 800618a:	2001      	movs	r0, #1
 800618c:	4770      	bx	lr
	...

08006190 <fiprintf>:
 8006190:	b40e      	push	{r1, r2, r3}
 8006192:	b503      	push	{r0, r1, lr}
 8006194:	4601      	mov	r1, r0
 8006196:	ab03      	add	r3, sp, #12
 8006198:	4805      	ldr	r0, [pc, #20]	@ (80061b0 <fiprintf+0x20>)
 800619a:	f853 2b04 	ldr.w	r2, [r3], #4
 800619e:	6800      	ldr	r0, [r0, #0]
 80061a0:	9301      	str	r3, [sp, #4]
 80061a2:	f7ff fd3d 	bl	8005c20 <_vfiprintf_r>
 80061a6:	b002      	add	sp, #8
 80061a8:	f85d eb04 	ldr.w	lr, [sp], #4
 80061ac:	b003      	add	sp, #12
 80061ae:	4770      	bx	lr
 80061b0:	20000018 	.word	0x20000018

080061b4 <abort>:
 80061b4:	b508      	push	{r3, lr}
 80061b6:	2006      	movs	r0, #6
 80061b8:	f000 f82c 	bl	8006214 <raise>
 80061bc:	2001      	movs	r0, #1
 80061be:	f7fb fc65 	bl	8001a8c <_exit>

080061c2 <_raise_r>:
 80061c2:	291f      	cmp	r1, #31
 80061c4:	b538      	push	{r3, r4, r5, lr}
 80061c6:	4605      	mov	r5, r0
 80061c8:	460c      	mov	r4, r1
 80061ca:	d904      	bls.n	80061d6 <_raise_r+0x14>
 80061cc:	2316      	movs	r3, #22
 80061ce:	6003      	str	r3, [r0, #0]
 80061d0:	f04f 30ff 	mov.w	r0, #4294967295
 80061d4:	bd38      	pop	{r3, r4, r5, pc}
 80061d6:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80061d8:	b112      	cbz	r2, 80061e0 <_raise_r+0x1e>
 80061da:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80061de:	b94b      	cbnz	r3, 80061f4 <_raise_r+0x32>
 80061e0:	4628      	mov	r0, r5
 80061e2:	f000 f831 	bl	8006248 <_getpid_r>
 80061e6:	4622      	mov	r2, r4
 80061e8:	4601      	mov	r1, r0
 80061ea:	4628      	mov	r0, r5
 80061ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80061f0:	f000 b818 	b.w	8006224 <_kill_r>
 80061f4:	2b01      	cmp	r3, #1
 80061f6:	d00a      	beq.n	800620e <_raise_r+0x4c>
 80061f8:	1c59      	adds	r1, r3, #1
 80061fa:	d103      	bne.n	8006204 <_raise_r+0x42>
 80061fc:	2316      	movs	r3, #22
 80061fe:	6003      	str	r3, [r0, #0]
 8006200:	2001      	movs	r0, #1
 8006202:	e7e7      	b.n	80061d4 <_raise_r+0x12>
 8006204:	2100      	movs	r1, #0
 8006206:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800620a:	4620      	mov	r0, r4
 800620c:	4798      	blx	r3
 800620e:	2000      	movs	r0, #0
 8006210:	e7e0      	b.n	80061d4 <_raise_r+0x12>
	...

08006214 <raise>:
 8006214:	4b02      	ldr	r3, [pc, #8]	@ (8006220 <raise+0xc>)
 8006216:	4601      	mov	r1, r0
 8006218:	6818      	ldr	r0, [r3, #0]
 800621a:	f7ff bfd2 	b.w	80061c2 <_raise_r>
 800621e:	bf00      	nop
 8006220:	20000018 	.word	0x20000018

08006224 <_kill_r>:
 8006224:	b538      	push	{r3, r4, r5, lr}
 8006226:	4d07      	ldr	r5, [pc, #28]	@ (8006244 <_kill_r+0x20>)
 8006228:	2300      	movs	r3, #0
 800622a:	4604      	mov	r4, r0
 800622c:	4608      	mov	r0, r1
 800622e:	4611      	mov	r1, r2
 8006230:	602b      	str	r3, [r5, #0]
 8006232:	f7fb fc1b 	bl	8001a6c <_kill>
 8006236:	1c43      	adds	r3, r0, #1
 8006238:	d102      	bne.n	8006240 <_kill_r+0x1c>
 800623a:	682b      	ldr	r3, [r5, #0]
 800623c:	b103      	cbz	r3, 8006240 <_kill_r+0x1c>
 800623e:	6023      	str	r3, [r4, #0]
 8006240:	bd38      	pop	{r3, r4, r5, pc}
 8006242:	bf00      	nop
 8006244:	20000398 	.word	0x20000398

08006248 <_getpid_r>:
 8006248:	f7fb bc08 	b.w	8001a5c <_getpid>

0800624c <_init>:
 800624c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800624e:	bf00      	nop
 8006250:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006252:	bc08      	pop	{r3}
 8006254:	469e      	mov	lr, r3
 8006256:	4770      	bx	lr

08006258 <_fini>:
 8006258:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800625a:	bf00      	nop
 800625c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800625e:	bc08      	pop	{r3}
 8006260:	469e      	mov	lr, r3
 8006262:	4770      	bx	lr

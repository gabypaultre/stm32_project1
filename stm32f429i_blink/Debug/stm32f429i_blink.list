
stm32f429i_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002678  080001ac  080001ac  000011ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000064  08002824  08002824  00003824  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002888  08002888  00004068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08002888  08002888  00003888  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002890  08002890  00004068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002890  08002890  00003890  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002894  08002894  00003894  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08002898  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00004068  2**0
                  CONTENTS
 10 .bss          00000170  20000068  20000068  00004068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200001d8  200001d8  00004068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00004068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00004999  00000000  00000000  00004098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001325  00000000  00000000  00008a31  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000558  00000000  00000000  00009d58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000003d5  00000000  00000000  0000a2b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023692  00000000  00000000  0000a685  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000699d  00000000  00000000  0002dd17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d1e98  00000000  00000000  000346b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010654c  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000019b0  00000000  00000000  00106590  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00107f40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001ac <__do_global_dtors_aux>:
 80001ac:	b510      	push	{r4, lr}
 80001ae:	4c05      	ldr	r4, [pc, #20]	@ (80001c4 <__do_global_dtors_aux+0x18>)
 80001b0:	7823      	ldrb	r3, [r4, #0]
 80001b2:	b933      	cbnz	r3, 80001c2 <__do_global_dtors_aux+0x16>
 80001b4:	4b04      	ldr	r3, [pc, #16]	@ (80001c8 <__do_global_dtors_aux+0x1c>)
 80001b6:	b113      	cbz	r3, 80001be <__do_global_dtors_aux+0x12>
 80001b8:	4804      	ldr	r0, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x20>)
 80001ba:	f3af 8000 	nop.w
 80001be:	2301      	movs	r3, #1
 80001c0:	7023      	strb	r3, [r4, #0]
 80001c2:	bd10      	pop	{r4, pc}
 80001c4:	20000068 	.word	0x20000068
 80001c8:	00000000 	.word	0x00000000
 80001cc:	0800280c 	.word	0x0800280c

080001d0 <frame_dummy>:
 80001d0:	b508      	push	{r3, lr}
 80001d2:	4b03      	ldr	r3, [pc, #12]	@ (80001e0 <frame_dummy+0x10>)
 80001d4:	b11b      	cbz	r3, 80001de <frame_dummy+0xe>
 80001d6:	4903      	ldr	r1, [pc, #12]	@ (80001e4 <frame_dummy+0x14>)
 80001d8:	4803      	ldr	r0, [pc, #12]	@ (80001e8 <frame_dummy+0x18>)
 80001da:	f3af 8000 	nop.w
 80001de:	bd08      	pop	{r3, pc}
 80001e0:	00000000 	.word	0x00000000
 80001e4:	2000006c 	.word	0x2000006c
 80001e8:	0800280c 	.word	0x0800280c

080001ec <__aeabi_uldivmod>:
 80001ec:	b953      	cbnz	r3, 8000204 <__aeabi_uldivmod+0x18>
 80001ee:	b94a      	cbnz	r2, 8000204 <__aeabi_uldivmod+0x18>
 80001f0:	2900      	cmp	r1, #0
 80001f2:	bf08      	it	eq
 80001f4:	2800      	cmpeq	r0, #0
 80001f6:	bf1c      	itt	ne
 80001f8:	f04f 31ff 	movne.w	r1, #4294967295
 80001fc:	f04f 30ff 	movne.w	r0, #4294967295
 8000200:	f000 b988 	b.w	8000514 <__aeabi_idiv0>
 8000204:	f1ad 0c08 	sub.w	ip, sp, #8
 8000208:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800020c:	f000 f806 	bl	800021c <__udivmoddi4>
 8000210:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000214:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000218:	b004      	add	sp, #16
 800021a:	4770      	bx	lr

0800021c <__udivmoddi4>:
 800021c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000220:	9d08      	ldr	r5, [sp, #32]
 8000222:	468e      	mov	lr, r1
 8000224:	4604      	mov	r4, r0
 8000226:	4688      	mov	r8, r1
 8000228:	2b00      	cmp	r3, #0
 800022a:	d14a      	bne.n	80002c2 <__udivmoddi4+0xa6>
 800022c:	428a      	cmp	r2, r1
 800022e:	4617      	mov	r7, r2
 8000230:	d962      	bls.n	80002f8 <__udivmoddi4+0xdc>
 8000232:	fab2 f682 	clz	r6, r2
 8000236:	b14e      	cbz	r6, 800024c <__udivmoddi4+0x30>
 8000238:	f1c6 0320 	rsb	r3, r6, #32
 800023c:	fa01 f806 	lsl.w	r8, r1, r6
 8000240:	fa20 f303 	lsr.w	r3, r0, r3
 8000244:	40b7      	lsls	r7, r6
 8000246:	ea43 0808 	orr.w	r8, r3, r8
 800024a:	40b4      	lsls	r4, r6
 800024c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000250:	fa1f fc87 	uxth.w	ip, r7
 8000254:	fbb8 f1fe 	udiv	r1, r8, lr
 8000258:	0c23      	lsrs	r3, r4, #16
 800025a:	fb0e 8811 	mls	r8, lr, r1, r8
 800025e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000262:	fb01 f20c 	mul.w	r2, r1, ip
 8000266:	429a      	cmp	r2, r3
 8000268:	d909      	bls.n	800027e <__udivmoddi4+0x62>
 800026a:	18fb      	adds	r3, r7, r3
 800026c:	f101 30ff 	add.w	r0, r1, #4294967295
 8000270:	f080 80ea 	bcs.w	8000448 <__udivmoddi4+0x22c>
 8000274:	429a      	cmp	r2, r3
 8000276:	f240 80e7 	bls.w	8000448 <__udivmoddi4+0x22c>
 800027a:	3902      	subs	r1, #2
 800027c:	443b      	add	r3, r7
 800027e:	1a9a      	subs	r2, r3, r2
 8000280:	b2a3      	uxth	r3, r4
 8000282:	fbb2 f0fe 	udiv	r0, r2, lr
 8000286:	fb0e 2210 	mls	r2, lr, r0, r2
 800028a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800028e:	fb00 fc0c 	mul.w	ip, r0, ip
 8000292:	459c      	cmp	ip, r3
 8000294:	d909      	bls.n	80002aa <__udivmoddi4+0x8e>
 8000296:	18fb      	adds	r3, r7, r3
 8000298:	f100 32ff 	add.w	r2, r0, #4294967295
 800029c:	f080 80d6 	bcs.w	800044c <__udivmoddi4+0x230>
 80002a0:	459c      	cmp	ip, r3
 80002a2:	f240 80d3 	bls.w	800044c <__udivmoddi4+0x230>
 80002a6:	443b      	add	r3, r7
 80002a8:	3802      	subs	r0, #2
 80002aa:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002ae:	eba3 030c 	sub.w	r3, r3, ip
 80002b2:	2100      	movs	r1, #0
 80002b4:	b11d      	cbz	r5, 80002be <__udivmoddi4+0xa2>
 80002b6:	40f3      	lsrs	r3, r6
 80002b8:	2200      	movs	r2, #0
 80002ba:	e9c5 3200 	strd	r3, r2, [r5]
 80002be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d905      	bls.n	80002d2 <__udivmoddi4+0xb6>
 80002c6:	b10d      	cbz	r5, 80002cc <__udivmoddi4+0xb0>
 80002c8:	e9c5 0100 	strd	r0, r1, [r5]
 80002cc:	2100      	movs	r1, #0
 80002ce:	4608      	mov	r0, r1
 80002d0:	e7f5      	b.n	80002be <__udivmoddi4+0xa2>
 80002d2:	fab3 f183 	clz	r1, r3
 80002d6:	2900      	cmp	r1, #0
 80002d8:	d146      	bne.n	8000368 <__udivmoddi4+0x14c>
 80002da:	4573      	cmp	r3, lr
 80002dc:	d302      	bcc.n	80002e4 <__udivmoddi4+0xc8>
 80002de:	4282      	cmp	r2, r0
 80002e0:	f200 8105 	bhi.w	80004ee <__udivmoddi4+0x2d2>
 80002e4:	1a84      	subs	r4, r0, r2
 80002e6:	eb6e 0203 	sbc.w	r2, lr, r3
 80002ea:	2001      	movs	r0, #1
 80002ec:	4690      	mov	r8, r2
 80002ee:	2d00      	cmp	r5, #0
 80002f0:	d0e5      	beq.n	80002be <__udivmoddi4+0xa2>
 80002f2:	e9c5 4800 	strd	r4, r8, [r5]
 80002f6:	e7e2      	b.n	80002be <__udivmoddi4+0xa2>
 80002f8:	2a00      	cmp	r2, #0
 80002fa:	f000 8090 	beq.w	800041e <__udivmoddi4+0x202>
 80002fe:	fab2 f682 	clz	r6, r2
 8000302:	2e00      	cmp	r6, #0
 8000304:	f040 80a4 	bne.w	8000450 <__udivmoddi4+0x234>
 8000308:	1a8a      	subs	r2, r1, r2
 800030a:	0c03      	lsrs	r3, r0, #16
 800030c:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000310:	b280      	uxth	r0, r0
 8000312:	b2bc      	uxth	r4, r7
 8000314:	2101      	movs	r1, #1
 8000316:	fbb2 fcfe 	udiv	ip, r2, lr
 800031a:	fb0e 221c 	mls	r2, lr, ip, r2
 800031e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000322:	fb04 f20c 	mul.w	r2, r4, ip
 8000326:	429a      	cmp	r2, r3
 8000328:	d907      	bls.n	800033a <__udivmoddi4+0x11e>
 800032a:	18fb      	adds	r3, r7, r3
 800032c:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000330:	d202      	bcs.n	8000338 <__udivmoddi4+0x11c>
 8000332:	429a      	cmp	r2, r3
 8000334:	f200 80e0 	bhi.w	80004f8 <__udivmoddi4+0x2dc>
 8000338:	46c4      	mov	ip, r8
 800033a:	1a9b      	subs	r3, r3, r2
 800033c:	fbb3 f2fe 	udiv	r2, r3, lr
 8000340:	fb0e 3312 	mls	r3, lr, r2, r3
 8000344:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000348:	fb02 f404 	mul.w	r4, r2, r4
 800034c:	429c      	cmp	r4, r3
 800034e:	d907      	bls.n	8000360 <__udivmoddi4+0x144>
 8000350:	18fb      	adds	r3, r7, r3
 8000352:	f102 30ff 	add.w	r0, r2, #4294967295
 8000356:	d202      	bcs.n	800035e <__udivmoddi4+0x142>
 8000358:	429c      	cmp	r4, r3
 800035a:	f200 80ca 	bhi.w	80004f2 <__udivmoddi4+0x2d6>
 800035e:	4602      	mov	r2, r0
 8000360:	1b1b      	subs	r3, r3, r4
 8000362:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000366:	e7a5      	b.n	80002b4 <__udivmoddi4+0x98>
 8000368:	f1c1 0620 	rsb	r6, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 f706 	lsr.w	r7, r2, r6
 8000372:	431f      	orrs	r7, r3
 8000374:	fa0e f401 	lsl.w	r4, lr, r1
 8000378:	fa20 f306 	lsr.w	r3, r0, r6
 800037c:	fa2e fe06 	lsr.w	lr, lr, r6
 8000380:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fa00 f801 	lsl.w	r8, r0, r1
 800038a:	fa1f fc87 	uxth.w	ip, r7
 800038e:	fbbe f0f9 	udiv	r0, lr, r9
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	fb09 ee10 	mls	lr, r9, r0, lr
 8000398:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 800039c:	fb00 fe0c 	mul.w	lr, r0, ip
 80003a0:	45a6      	cmp	lr, r4
 80003a2:	fa02 f201 	lsl.w	r2, r2, r1
 80003a6:	d909      	bls.n	80003bc <__udivmoddi4+0x1a0>
 80003a8:	193c      	adds	r4, r7, r4
 80003aa:	f100 3aff 	add.w	sl, r0, #4294967295
 80003ae:	f080 809c 	bcs.w	80004ea <__udivmoddi4+0x2ce>
 80003b2:	45a6      	cmp	lr, r4
 80003b4:	f240 8099 	bls.w	80004ea <__udivmoddi4+0x2ce>
 80003b8:	3802      	subs	r0, #2
 80003ba:	443c      	add	r4, r7
 80003bc:	eba4 040e 	sub.w	r4, r4, lr
 80003c0:	fa1f fe83 	uxth.w	lr, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 80003d0:	fb03 fc0c 	mul.w	ip, r3, ip
 80003d4:	45a4      	cmp	ip, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1ce>
 80003d8:	193c      	adds	r4, r7, r4
 80003da:	f103 3eff 	add.w	lr, r3, #4294967295
 80003de:	f080 8082 	bcs.w	80004e6 <__udivmoddi4+0x2ca>
 80003e2:	45a4      	cmp	ip, r4
 80003e4:	d97f      	bls.n	80004e6 <__udivmoddi4+0x2ca>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	443c      	add	r4, r7
 80003ea:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 80003ee:	eba4 040c 	sub.w	r4, r4, ip
 80003f2:	fba0 ec02 	umull	lr, ip, r0, r2
 80003f6:	4564      	cmp	r4, ip
 80003f8:	4673      	mov	r3, lr
 80003fa:	46e1      	mov	r9, ip
 80003fc:	d362      	bcc.n	80004c4 <__udivmoddi4+0x2a8>
 80003fe:	d05f      	beq.n	80004c0 <__udivmoddi4+0x2a4>
 8000400:	b15d      	cbz	r5, 800041a <__udivmoddi4+0x1fe>
 8000402:	ebb8 0203 	subs.w	r2, r8, r3
 8000406:	eb64 0409 	sbc.w	r4, r4, r9
 800040a:	fa04 f606 	lsl.w	r6, r4, r6
 800040e:	fa22 f301 	lsr.w	r3, r2, r1
 8000412:	431e      	orrs	r6, r3
 8000414:	40cc      	lsrs	r4, r1
 8000416:	e9c5 6400 	strd	r6, r4, [r5]
 800041a:	2100      	movs	r1, #0
 800041c:	e74f      	b.n	80002be <__udivmoddi4+0xa2>
 800041e:	fbb1 fcf2 	udiv	ip, r1, r2
 8000422:	0c01      	lsrs	r1, r0, #16
 8000424:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000428:	b280      	uxth	r0, r0
 800042a:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 800042e:	463b      	mov	r3, r7
 8000430:	4638      	mov	r0, r7
 8000432:	463c      	mov	r4, r7
 8000434:	46b8      	mov	r8, r7
 8000436:	46be      	mov	lr, r7
 8000438:	2620      	movs	r6, #32
 800043a:	fbb1 f1f7 	udiv	r1, r1, r7
 800043e:	eba2 0208 	sub.w	r2, r2, r8
 8000442:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000446:	e766      	b.n	8000316 <__udivmoddi4+0xfa>
 8000448:	4601      	mov	r1, r0
 800044a:	e718      	b.n	800027e <__udivmoddi4+0x62>
 800044c:	4610      	mov	r0, r2
 800044e:	e72c      	b.n	80002aa <__udivmoddi4+0x8e>
 8000450:	f1c6 0220 	rsb	r2, r6, #32
 8000454:	fa2e f302 	lsr.w	r3, lr, r2
 8000458:	40b7      	lsls	r7, r6
 800045a:	40b1      	lsls	r1, r6
 800045c:	fa20 f202 	lsr.w	r2, r0, r2
 8000460:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000464:	430a      	orrs	r2, r1
 8000466:	fbb3 f8fe 	udiv	r8, r3, lr
 800046a:	b2bc      	uxth	r4, r7
 800046c:	fb0e 3318 	mls	r3, lr, r8, r3
 8000470:	0c11      	lsrs	r1, r2, #16
 8000472:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000476:	fb08 f904 	mul.w	r9, r8, r4
 800047a:	40b0      	lsls	r0, r6
 800047c:	4589      	cmp	r9, r1
 800047e:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000482:	b280      	uxth	r0, r0
 8000484:	d93e      	bls.n	8000504 <__udivmoddi4+0x2e8>
 8000486:	1879      	adds	r1, r7, r1
 8000488:	f108 3cff 	add.w	ip, r8, #4294967295
 800048c:	d201      	bcs.n	8000492 <__udivmoddi4+0x276>
 800048e:	4589      	cmp	r9, r1
 8000490:	d81f      	bhi.n	80004d2 <__udivmoddi4+0x2b6>
 8000492:	eba1 0109 	sub.w	r1, r1, r9
 8000496:	fbb1 f9fe 	udiv	r9, r1, lr
 800049a:	fb09 f804 	mul.w	r8, r9, r4
 800049e:	fb0e 1119 	mls	r1, lr, r9, r1
 80004a2:	b292      	uxth	r2, r2
 80004a4:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 80004a8:	4542      	cmp	r2, r8
 80004aa:	d229      	bcs.n	8000500 <__udivmoddi4+0x2e4>
 80004ac:	18ba      	adds	r2, r7, r2
 80004ae:	f109 31ff 	add.w	r1, r9, #4294967295
 80004b2:	d2c4      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b4:	4542      	cmp	r2, r8
 80004b6:	d2c2      	bcs.n	800043e <__udivmoddi4+0x222>
 80004b8:	f1a9 0102 	sub.w	r1, r9, #2
 80004bc:	443a      	add	r2, r7
 80004be:	e7be      	b.n	800043e <__udivmoddi4+0x222>
 80004c0:	45f0      	cmp	r8, lr
 80004c2:	d29d      	bcs.n	8000400 <__udivmoddi4+0x1e4>
 80004c4:	ebbe 0302 	subs.w	r3, lr, r2
 80004c8:	eb6c 0c07 	sbc.w	ip, ip, r7
 80004cc:	3801      	subs	r0, #1
 80004ce:	46e1      	mov	r9, ip
 80004d0:	e796      	b.n	8000400 <__udivmoddi4+0x1e4>
 80004d2:	eba7 0909 	sub.w	r9, r7, r9
 80004d6:	4449      	add	r1, r9
 80004d8:	f1a8 0c02 	sub.w	ip, r8, #2
 80004dc:	fbb1 f9fe 	udiv	r9, r1, lr
 80004e0:	fb09 f804 	mul.w	r8, r9, r4
 80004e4:	e7db      	b.n	800049e <__udivmoddi4+0x282>
 80004e6:	4673      	mov	r3, lr
 80004e8:	e77f      	b.n	80003ea <__udivmoddi4+0x1ce>
 80004ea:	4650      	mov	r0, sl
 80004ec:	e766      	b.n	80003bc <__udivmoddi4+0x1a0>
 80004ee:	4608      	mov	r0, r1
 80004f0:	e6fd      	b.n	80002ee <__udivmoddi4+0xd2>
 80004f2:	443b      	add	r3, r7
 80004f4:	3a02      	subs	r2, #2
 80004f6:	e733      	b.n	8000360 <__udivmoddi4+0x144>
 80004f8:	f1ac 0c02 	sub.w	ip, ip, #2
 80004fc:	443b      	add	r3, r7
 80004fe:	e71c      	b.n	800033a <__udivmoddi4+0x11e>
 8000500:	4649      	mov	r1, r9
 8000502:	e79c      	b.n	800043e <__udivmoddi4+0x222>
 8000504:	eba1 0109 	sub.w	r1, r1, r9
 8000508:	46c4      	mov	ip, r8
 800050a:	fbb1 f9fe 	udiv	r9, r1, lr
 800050e:	fb09 f804 	mul.w	r8, r9, r4
 8000512:	e7c4      	b.n	800049e <__udivmoddi4+0x282>

08000514 <__aeabi_idiv0>:
 8000514:	4770      	bx	lr
 8000516:	bf00      	nop

08000518 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000518:	b580      	push	{r7, lr}
 800051a:	b082      	sub	sp, #8
 800051c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800051e:	f000 fc99 	bl	8000e54 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000522:	f000 f823 	bl	800056c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000526:	f000 f891 	bl	800064c <MX_GPIO_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello depuis STM32 via ITM/SWO !\n");
 800052a:	480d      	ldr	r0, [pc, #52]	@ (8000560 <main+0x48>)
 800052c:	f001 fdda 	bl	80020e4 <puts>

  uint32_t now = 0;
 8000530:	2300      	movs	r3, #0
 8000532:	603b      	str	r3, [r7, #0]
  uint32_t last = 0;
 8000534:	2300      	movs	r3, #0
 8000536:	607b      	str	r3, [r7, #4]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    now = HAL_GetTick();
 8000538:	f000 fcf2 	bl	8000f20 <HAL_GetTick>
 800053c:	6038      	str	r0, [r7, #0]
    if (now - last >= 1000) // Toggle every second
 800053e:	683a      	ldr	r2, [r7, #0]
 8000540:	687b      	ldr	r3, [r7, #4]
 8000542:	1ad3      	subs	r3, r2, r3
 8000544:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000548:	d3f6      	bcc.n	8000538 <main+0x20>
    {
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800054a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800054e:	4805      	ldr	r0, [pc, #20]	@ (8000564 <main+0x4c>)
 8000550:	f000 ffc9 	bl	80014e6 <HAL_GPIO_TogglePin>
      last = now;
 8000554:	683b      	ldr	r3, [r7, #0]
 8000556:	607b      	str	r3, [r7, #4]
      printf("Toggled LD4!\n");
 8000558:	4803      	ldr	r0, [pc, #12]	@ (8000568 <main+0x50>)
 800055a:	f001 fdc3 	bl	80020e4 <puts>
    now = HAL_GetTick();
 800055e:	e7eb      	b.n	8000538 <main+0x20>
 8000560:	08002824 	.word	0x08002824
 8000564:	40021800 	.word	0x40021800
 8000568:	08002848 	.word	0x08002848

0800056c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b094      	sub	sp, #80	@ 0x50
 8000570:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000572:	f107 0320 	add.w	r3, r7, #32
 8000576:	2230      	movs	r2, #48	@ 0x30
 8000578:	2100      	movs	r1, #0
 800057a:	4618      	mov	r0, r3
 800057c:	f001 fe92 	bl	80022a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000580:	f107 030c 	add.w	r3, r7, #12
 8000584:	2200      	movs	r2, #0
 8000586:	601a      	str	r2, [r3, #0]
 8000588:	605a      	str	r2, [r3, #4]
 800058a:	609a      	str	r2, [r3, #8]
 800058c:	60da      	str	r2, [r3, #12]
 800058e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000590:	2300      	movs	r3, #0
 8000592:	60bb      	str	r3, [r7, #8]
 8000594:	4b2b      	ldr	r3, [pc, #172]	@ (8000644 <SystemClock_Config+0xd8>)
 8000596:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000598:	4a2a      	ldr	r2, [pc, #168]	@ (8000644 <SystemClock_Config+0xd8>)
 800059a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800059e:	6413      	str	r3, [r2, #64]	@ 0x40
 80005a0:	4b28      	ldr	r3, [pc, #160]	@ (8000644 <SystemClock_Config+0xd8>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80005a4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80005a8:	60bb      	str	r3, [r7, #8]
 80005aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005ac:	2300      	movs	r3, #0
 80005ae:	607b      	str	r3, [r7, #4]
 80005b0:	4b25      	ldr	r3, [pc, #148]	@ (8000648 <SystemClock_Config+0xdc>)
 80005b2:	681b      	ldr	r3, [r3, #0]
 80005b4:	4a24      	ldr	r2, [pc, #144]	@ (8000648 <SystemClock_Config+0xdc>)
 80005b6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80005ba:	6013      	str	r3, [r2, #0]
 80005bc:	4b22      	ldr	r3, [pc, #136]	@ (8000648 <SystemClock_Config+0xdc>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80005c4:	607b      	str	r3, [r7, #4]
 80005c6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005c8:	2302      	movs	r3, #2
 80005ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005cc:	2301      	movs	r3, #1
 80005ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005d0:	2310      	movs	r3, #16
 80005d2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005d4:	2302      	movs	r3, #2
 80005d6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005d8:	2300      	movs	r3, #0
 80005da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80005dc:	2308      	movs	r3, #8
 80005de:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80005e0:	23b4      	movs	r3, #180	@ 0xb4
 80005e2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005e4:	2302      	movs	r3, #2
 80005e6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005e8:	2307      	movs	r3, #7
 80005ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ec:	f107 0320 	add.w	r3, r7, #32
 80005f0:	4618      	mov	r0, r3
 80005f2:	f000 fffb 	bl	80015ec <HAL_RCC_OscConfig>
 80005f6:	4603      	mov	r3, r0
 80005f8:	2b00      	cmp	r3, #0
 80005fa:	d001      	beq.n	8000600 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80005fc:	f000 fabe 	bl	8000b7c <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000600:	f000 ffa4 	bl	800154c <HAL_PWREx_EnableOverDrive>
 8000604:	4603      	mov	r3, r0
 8000606:	2b00      	cmp	r3, #0
 8000608:	d001      	beq.n	800060e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800060a:	f000 fab7 	bl	8000b7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800060e:	230f      	movs	r3, #15
 8000610:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000612:	2302      	movs	r3, #2
 8000614:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000616:	2300      	movs	r3, #0
 8000618:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800061a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000620:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000624:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000626:	f107 030c 	add.w	r3, r7, #12
 800062a:	2105      	movs	r1, #5
 800062c:	4618      	mov	r0, r3
 800062e:	f001 fa55 	bl	8001adc <HAL_RCC_ClockConfig>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000638:	f000 faa0 	bl	8000b7c <Error_Handler>
  }
}
 800063c:	bf00      	nop
 800063e:	3750      	adds	r7, #80	@ 0x50
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	b08e      	sub	sp, #56	@ 0x38
 8000650:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000652:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000656:	2200      	movs	r2, #0
 8000658:	601a      	str	r2, [r3, #0]
 800065a:	605a      	str	r2, [r3, #4]
 800065c:	609a      	str	r2, [r3, #8]
 800065e:	60da      	str	r2, [r3, #12]
 8000660:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000662:	2300      	movs	r3, #0
 8000664:	623b      	str	r3, [r7, #32]
 8000666:	4bb2      	ldr	r3, [pc, #712]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000668:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800066a:	4ab1      	ldr	r2, [pc, #708]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 800066c:	f043 0304 	orr.w	r3, r3, #4
 8000670:	6313      	str	r3, [r2, #48]	@ 0x30
 8000672:	4baf      	ldr	r3, [pc, #700]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000676:	f003 0304 	and.w	r3, r3, #4
 800067a:	623b      	str	r3, [r7, #32]
 800067c:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 800067e:	2300      	movs	r3, #0
 8000680:	61fb      	str	r3, [r7, #28]
 8000682:	4bab      	ldr	r3, [pc, #684]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000684:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000686:	4aaa      	ldr	r2, [pc, #680]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000688:	f043 0320 	orr.w	r3, r3, #32
 800068c:	6313      	str	r3, [r2, #48]	@ 0x30
 800068e:	4ba8      	ldr	r3, [pc, #672]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000690:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000692:	f003 0320 	and.w	r3, r3, #32
 8000696:	61fb      	str	r3, [r7, #28]
 8000698:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800069a:	2300      	movs	r3, #0
 800069c:	61bb      	str	r3, [r7, #24]
 800069e:	4ba4      	ldr	r3, [pc, #656]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006a2:	4aa3      	ldr	r2, [pc, #652]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006a4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80006a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80006aa:	4ba1      	ldr	r3, [pc, #644]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ae:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80006b2:	61bb      	str	r3, [r7, #24]
 80006b4:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006b6:	2300      	movs	r3, #0
 80006b8:	617b      	str	r3, [r7, #20]
 80006ba:	4b9d      	ldr	r3, [pc, #628]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006be:	4a9c      	ldr	r2, [pc, #624]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006c0:	f043 0301 	orr.w	r3, r3, #1
 80006c4:	6313      	str	r3, [r2, #48]	@ 0x30
 80006c6:	4b9a      	ldr	r3, [pc, #616]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006ca:	f003 0301 	and.w	r3, r3, #1
 80006ce:	617b      	str	r3, [r7, #20]
 80006d0:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	4b96      	ldr	r3, [pc, #600]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006da:	4a95      	ldr	r2, [pc, #596]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006dc:	f043 0302 	orr.w	r3, r3, #2
 80006e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80006e2:	4b93      	ldr	r3, [pc, #588]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006e6:	f003 0302 	and.w	r3, r3, #2
 80006ea:	613b      	str	r3, [r7, #16]
 80006ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80006ee:	2300      	movs	r3, #0
 80006f0:	60fb      	str	r3, [r7, #12]
 80006f2:	4b8f      	ldr	r3, [pc, #572]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80006f6:	4a8e      	ldr	r2, [pc, #568]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 80006f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80006fc:	6313      	str	r3, [r2, #48]	@ 0x30
 80006fe:	4b8c      	ldr	r3, [pc, #560]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000700:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000706:	60fb      	str	r3, [r7, #12]
 8000708:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800070a:	2300      	movs	r3, #0
 800070c:	60bb      	str	r3, [r7, #8]
 800070e:	4b88      	ldr	r3, [pc, #544]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000710:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000712:	4a87      	ldr	r2, [pc, #540]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000714:	f043 0310 	orr.w	r3, r3, #16
 8000718:	6313      	str	r3, [r2, #48]	@ 0x30
 800071a:	4b85      	ldr	r3, [pc, #532]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 800071c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800071e:	f003 0310 	and.w	r3, r3, #16
 8000722:	60bb      	str	r3, [r7, #8]
 8000724:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000726:	2300      	movs	r3, #0
 8000728:	607b      	str	r3, [r7, #4]
 800072a:	4b81      	ldr	r3, [pc, #516]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 800072c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800072e:	4a80      	ldr	r2, [pc, #512]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000730:	f043 0308 	orr.w	r3, r3, #8
 8000734:	6313      	str	r3, [r2, #48]	@ 0x30
 8000736:	4b7e      	ldr	r3, [pc, #504]	@ (8000930 <MX_GPIO_Init+0x2e4>)
 8000738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800073a:	f003 0308 	and.w	r3, r3, #8
 800073e:	607b      	str	r3, [r7, #4]
 8000740:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 8000742:	2200      	movs	r2, #0
 8000744:	2116      	movs	r1, #22
 8000746:	487b      	ldr	r0, [pc, #492]	@ (8000934 <MX_GPIO_Init+0x2e8>)
 8000748:	f000 feb4 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 800074c:	2200      	movs	r2, #0
 800074e:	2180      	movs	r1, #128	@ 0x80
 8000750:	4879      	ldr	r0, [pc, #484]	@ (8000938 <MX_GPIO_Init+0x2ec>)
 8000752:	f000 feaf 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 8000756:	2200      	movs	r2, #0
 8000758:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 800075c:	4877      	ldr	r0, [pc, #476]	@ (800093c <MX_GPIO_Init+0x2f0>)
 800075e:	f000 fea9 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 8000762:	2200      	movs	r2, #0
 8000764:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 8000768:	4875      	ldr	r0, [pc, #468]	@ (8000940 <MX_GPIO_Init+0x2f4>)
 800076a:	f000 fea3 	bl	80014b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 800076e:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 8000772:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000774:	2302      	movs	r3, #2
 8000776:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000778:	2300      	movs	r3, #0
 800077a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800077c:	2303      	movs	r3, #3
 800077e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000780:	230c      	movs	r3, #12
 8000782:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000784:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000788:	4619      	mov	r1, r3
 800078a:	486e      	ldr	r0, [pc, #440]	@ (8000944 <MX_GPIO_Init+0x2f8>)
 800078c:	f000 fce6 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : SPI5_SCK_Pin SPI5_MISO_Pin SPI5_MOSI_Pin */
  GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000790:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000794:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000796:	2302      	movs	r3, #2
 8000798:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800079a:	2300      	movs	r3, #0
 800079c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800079e:	2300      	movs	r3, #0
 80007a0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 80007a2:	2305      	movs	r3, #5
 80007a4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80007a6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007aa:	4619      	mov	r1, r3
 80007ac:	4865      	ldr	r0, [pc, #404]	@ (8000944 <MX_GPIO_Init+0x2f8>)
 80007ae:	f000 fcd5 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 80007b2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007b6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007b8:	2302      	movs	r3, #2
 80007ba:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007bc:	2300      	movs	r3, #0
 80007be:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80007c0:	2300      	movs	r3, #0
 80007c2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80007c4:	230e      	movs	r3, #14
 80007c6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 80007c8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007cc:	4619      	mov	r1, r3
 80007ce:	485d      	ldr	r0, [pc, #372]	@ (8000944 <MX_GPIO_Init+0x2f8>)
 80007d0:	f000 fcc4 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 80007d4:	2301      	movs	r3, #1
 80007d6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007d8:	2302      	movs	r3, #2
 80007da:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007dc:	2300      	movs	r3, #0
 80007de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007e0:	2303      	movs	r3, #3
 80007e2:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80007e4:	230c      	movs	r3, #12
 80007e6:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 80007e8:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007ec:	4619      	mov	r1, r3
 80007ee:	4851      	ldr	r0, [pc, #324]	@ (8000934 <MX_GPIO_Init+0x2e8>)
 80007f0:	f000 fcb4 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 80007f4:	2316      	movs	r3, #22
 80007f6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80007f8:	2301      	movs	r3, #1
 80007fa:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007fc:	2300      	movs	r3, #0
 80007fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000800:	2300      	movs	r3, #0
 8000802:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000804:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000808:	4619      	mov	r1, r3
 800080a:	484a      	ldr	r0, [pc, #296]	@ (8000934 <MX_GPIO_Init+0x2e8>)
 800080c:	f000 fca6 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000810:	2301      	movs	r3, #1
 8000812:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000814:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000818:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 800081a:	2302      	movs	r3, #2
 800081c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800081e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000822:	4619      	mov	r1, r3
 8000824:	4844      	ldr	r0, [pc, #272]	@ (8000938 <MX_GPIO_Init+0x2ec>)
 8000826:	f000 fc99 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 800082a:	f248 0306 	movw	r3, #32774	@ 0x8006
 800082e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000830:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 8000834:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000836:	2300      	movs	r3, #0
 8000838:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800083a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800083e:	4619      	mov	r1, r3
 8000840:	483d      	ldr	r0, [pc, #244]	@ (8000938 <MX_GPIO_Init+0x2ec>)
 8000842:	f000 fc8b 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 8000846:	f641 0358 	movw	r3, #6232	@ 0x1858
 800084a:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800084c:	2302      	movs	r3, #2
 800084e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000850:	2300      	movs	r3, #0
 8000852:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000854:	2300      	movs	r3, #0
 8000856:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000858:	230e      	movs	r3, #14
 800085a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800085c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000860:	4619      	mov	r1, r3
 8000862:	4835      	ldr	r0, [pc, #212]	@ (8000938 <MX_GPIO_Init+0x2ec>)
 8000864:	f000 fc7a 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 8000868:	2380      	movs	r3, #128	@ 0x80
 800086a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800086c:	2301      	movs	r3, #1
 800086e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000870:	2300      	movs	r3, #0
 8000872:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000874:	2300      	movs	r3, #0
 8000876:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 8000878:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800087c:	4619      	mov	r1, r3
 800087e:	482e      	ldr	r0, [pc, #184]	@ (8000938 <MX_GPIO_Init+0x2ec>)
 8000880:	f000 fc6c 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 8000884:	2320      	movs	r3, #32
 8000886:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000888:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800088c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800088e:	2300      	movs	r3, #0
 8000890:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 8000892:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000896:	4619      	mov	r1, r3
 8000898:	4826      	ldr	r0, [pc, #152]	@ (8000934 <MX_GPIO_Init+0x2e8>)
 800089a:	f000 fc5f 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 800089e:	2303      	movs	r3, #3
 80008a0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008a2:	2302      	movs	r3, #2
 80008a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a6:	2300      	movs	r3, #0
 80008a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008aa:	2300      	movs	r3, #0
 80008ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 80008ae:	2309      	movs	r3, #9
 80008b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008b6:	4619      	mov	r1, r3
 80008b8:	4823      	ldr	r0, [pc, #140]	@ (8000948 <MX_GPIO_Init+0x2fc>)
 80008ba:	f000 fc4f 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 80008be:	2304      	movs	r3, #4
 80008c0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008c2:	2300      	movs	r3, #0
 80008c4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008ce:	4619      	mov	r1, r3
 80008d0:	481d      	ldr	r0, [pc, #116]	@ (8000948 <MX_GPIO_Init+0x2fc>)
 80008d2:	f000 fc43 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 80008d6:	f248 1333 	movw	r3, #33075	@ 0x8133
 80008da:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008dc:	2302      	movs	r3, #2
 80008de:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e0:	2300      	movs	r3, #0
 80008e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008e4:	2303      	movs	r3, #3
 80008e6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008e8:	230c      	movs	r3, #12
 80008ea:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80008ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80008f0:	4619      	mov	r1, r3
 80008f2:	4813      	ldr	r0, [pc, #76]	@ (8000940 <MX_GPIO_Init+0x2f4>)
 80008f4:	f000 fc32 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 80008f8:	f64f 7383 	movw	r3, #65411	@ 0xff83
 80008fc:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008fe:	2302      	movs	r3, #2
 8000900:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000902:	2300      	movs	r3, #0
 8000904:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000906:	2303      	movs	r3, #3
 8000908:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800090a:	230c      	movs	r3, #12
 800090c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800090e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000912:	4619      	mov	r1, r3
 8000914:	480d      	ldr	r0, [pc, #52]	@ (800094c <MX_GPIO_Init+0x300>)
 8000916:	f000 fc21 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 800091a:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 800091e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000920:	2302      	movs	r3, #2
 8000922:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000924:	2300      	movs	r3, #0
 8000926:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000928:	2300      	movs	r3, #0
 800092a:	633b      	str	r3, [r7, #48]	@ 0x30
 800092c:	e010      	b.n	8000950 <MX_GPIO_Init+0x304>
 800092e:	bf00      	nop
 8000930:	40023800 	.word	0x40023800
 8000934:	40020800 	.word	0x40020800
 8000938:	40020000 	.word	0x40020000
 800093c:	40020c00 	.word	0x40020c00
 8000940:	40021800 	.word	0x40021800
 8000944:	40021400 	.word	0x40021400
 8000948:	40020400 	.word	0x40020400
 800094c:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000950:	230e      	movs	r3, #14
 8000952:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000954:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000958:	4619      	mov	r1, r3
 800095a:	4877      	ldr	r0, [pc, #476]	@ (8000b38 <MX_GPIO_Init+0x4ec>)
 800095c:	f000 fbfe 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000960:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000964:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000966:	2302      	movs	r3, #2
 8000968:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096a:	2300      	movs	r3, #0
 800096c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800096e:	2300      	movs	r3, #0
 8000970:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000972:	230c      	movs	r3, #12
 8000974:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000976:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097a:	4619      	mov	r1, r3
 800097c:	486e      	ldr	r0, [pc, #440]	@ (8000b38 <MX_GPIO_Init+0x4ec>)
 800097e:	f000 fbed 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000986:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000988:	2300      	movs	r3, #0
 800098a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800098c:	2300      	movs	r3, #0
 800098e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000990:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000994:	4619      	mov	r1, r3
 8000996:	4868      	ldr	r0, [pc, #416]	@ (8000b38 <MX_GPIO_Init+0x4ec>)
 8000998:	f000 fbe0 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 800099c:	f24c 7303 	movw	r3, #50947	@ 0xc703
 80009a0:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a2:	2302      	movs	r3, #2
 80009a4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009a6:	2300      	movs	r3, #0
 80009a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009aa:	2303      	movs	r3, #3
 80009ac:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80009ae:	230c      	movs	r3, #12
 80009b0:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009b2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009b6:	4619      	mov	r1, r3
 80009b8:	4860      	ldr	r0, [pc, #384]	@ (8000b3c <MX_GPIO_Init+0x4f0>)
 80009ba:	f000 fbcf 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 80009be:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 80009c2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c8:	2300      	movs	r3, #0
 80009ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 80009cc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d0:	4619      	mov	r1, r3
 80009d2:	485a      	ldr	r0, [pc, #360]	@ (8000b3c <MX_GPIO_Init+0x4f0>)
 80009d4:	f000 fbc2 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 80009d8:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 80009dc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ee:	4619      	mov	r1, r3
 80009f0:	4852      	ldr	r0, [pc, #328]	@ (8000b3c <MX_GPIO_Init+0x4f0>)
 80009f2:	f000 fbb3 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 80009f6:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a08:	230e      	movs	r3, #14
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	484b      	ldr	r0, [pc, #300]	@ (8000b40 <MX_GPIO_Init+0x4f4>)
 8000a14:	f000 fba2 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000a18:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000a1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a1e:	2302      	movs	r3, #2
 8000a20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a22:	2300      	movs	r3, #0
 8000a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a26:	2300      	movs	r3, #0
 8000a28:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a2a:	230e      	movs	r3, #14
 8000a2c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a2e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a32:	4619      	mov	r1, r3
 8000a34:	4843      	ldr	r0, [pc, #268]	@ (8000b44 <MX_GPIO_Init+0x4f8>)
 8000a36:	f000 fb91 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000a3a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000a3e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a40:	2312      	movs	r3, #18
 8000a42:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a44:	2300      	movs	r3, #0
 8000a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a48:	2300      	movs	r3, #0
 8000a4a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a4c:	2304      	movs	r3, #4
 8000a4e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a54:	4619      	mov	r1, r3
 8000a56:	483b      	ldr	r0, [pc, #236]	@ (8000b44 <MX_GPIO_Init+0x4f8>)
 8000a58:	f000 fb80 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000a5c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000a60:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000a62:	2312      	movs	r3, #18
 8000a64:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a66:	2300      	movs	r3, #0
 8000a68:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a6a:	2300      	movs	r3, #0
 8000a6c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000a6e:	2304      	movs	r3, #4
 8000a70:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000a72:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a76:	4619      	mov	r1, r3
 8000a78:	4833      	ldr	r0, [pc, #204]	@ (8000b48 <MX_GPIO_Init+0x4fc>)
 8000a7a:	f000 fb6f 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000a7e:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000a82:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a84:	2302      	movs	r3, #2
 8000a86:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a8c:	2303      	movs	r3, #3
 8000a8e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000a90:	2307      	movs	r3, #7
 8000a92:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a98:	4619      	mov	r1, r3
 8000a9a:	482b      	ldr	r0, [pc, #172]	@ (8000b48 <MX_GPIO_Init+0x4fc>)
 8000a9c:	f000 fb5e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000aa0:	2348      	movs	r3, #72	@ 0x48
 8000aa2:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000aa4:	2302      	movs	r3, #2
 8000aa6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa8:	2300      	movs	r3, #0
 8000aaa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aac:	2300      	movs	r3, #0
 8000aae:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000ab0:	230e      	movs	r3, #14
 8000ab2:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000ab4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ab8:	4619      	mov	r1, r3
 8000aba:	4820      	ldr	r0, [pc, #128]	@ (8000b3c <MX_GPIO_Init+0x4f0>)
 8000abc:	f000 fb4e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000ac0:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000ac4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ac6:	2302      	movs	r3, #2
 8000ac8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aca:	2300      	movs	r3, #0
 8000acc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ace:	2300      	movs	r3, #0
 8000ad0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000ad2:	2309      	movs	r3, #9
 8000ad4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ad6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ada:	4619      	mov	r1, r3
 8000adc:	4818      	ldr	r0, [pc, #96]	@ (8000b40 <MX_GPIO_Init+0x4f4>)
 8000ade:	f000 fb3d 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000ae2:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000ae6:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ae8:	2301      	movs	r3, #1
 8000aea:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aec:	2300      	movs	r3, #0
 8000aee:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000af0:	2300      	movs	r3, #0
 8000af2:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000af4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000af8:	4619      	mov	r1, r3
 8000afa:	4811      	ldr	r0, [pc, #68]	@ (8000b40 <MX_GPIO_Init+0x4f4>)
 8000afc:	f000 fb2e 	bl	800115c <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000b00:	2360      	movs	r3, #96	@ 0x60
 8000b02:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b04:	2302      	movs	r3, #2
 8000b06:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b0c:	2303      	movs	r3, #3
 8000b0e:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b10:	230c      	movs	r3, #12
 8000b12:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b18:	4619      	mov	r1, r3
 8000b1a:	4807      	ldr	r0, [pc, #28]	@ (8000b38 <MX_GPIO_Init+0x4ec>)
 8000b1c:	f000 fb1e 	bl	800115c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000b20:	2200      	movs	r2, #0
 8000b22:	2100      	movs	r1, #0
 8000b24:	2006      	movs	r0, #6
 8000b26:	f000 fae2 	bl	80010ee <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000b2a:	2006      	movs	r0, #6
 8000b2c:	f000 fafb 	bl	8001126 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000b30:	bf00      	nop
 8000b32:	3738      	adds	r7, #56	@ 0x38
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bd80      	pop	{r7, pc}
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	40020c00 	.word	0x40020c00
 8000b40:	40021800 	.word	0x40021800
 8000b44:	40020800 	.word	0x40020800
 8000b48:	40020000 	.word	0x40020000

08000b4c <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000b4c:	b580      	push	{r7, lr}
 8000b4e:	b082      	sub	sp, #8
 8000b50:	af00      	add	r7, sp, #0
 8000b52:	4603      	mov	r3, r0
 8000b54:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8000b56:	88fb      	ldrh	r3, [r7, #6]
 8000b58:	2b01      	cmp	r3, #1
 8000b5a:	d107      	bne.n	8000b6c <HAL_GPIO_EXTI_Callback+0x20>
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000b5c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000b60:	4804      	ldr	r0, [pc, #16]	@ (8000b74 <HAL_GPIO_EXTI_Callback+0x28>)
 8000b62:	f000 fcc0 	bl	80014e6 <HAL_GPIO_TogglePin>
    printf("Button pressed, toggling LD3!\n");
 8000b66:	4804      	ldr	r0, [pc, #16]	@ (8000b78 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000b68:	f001 fabc 	bl	80020e4 <puts>
  }
}
 8000b6c:	bf00      	nop
 8000b6e:	3708      	adds	r7, #8
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	40021800 	.word	0x40021800
 8000b78:	08002858 	.word	0x08002858

08000b7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b7c:	b480      	push	{r7}
 8000b7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b80:	b672      	cpsid	i
}
 8000b82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b84:	bf00      	nop
 8000b86:	e7fd      	b.n	8000b84 <Error_Handler+0x8>

08000b88 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b88:	b580      	push	{r7, lr}
 8000b8a:	b082      	sub	sp, #8
 8000b8c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b8e:	2300      	movs	r3, #0
 8000b90:	607b      	str	r3, [r7, #4]
 8000b92:	4b10      	ldr	r3, [pc, #64]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000b96:	4a0f      	ldr	r2, [pc, #60]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000b98:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8000b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000ba2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000ba6:	607b      	str	r3, [r7, #4]
 8000ba8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000baa:	2300      	movs	r3, #0
 8000bac:	603b      	str	r3, [r7, #0]
 8000bae:	4b09      	ldr	r3, [pc, #36]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bb2:	4a08      	ldr	r2, [pc, #32]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bb4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000bb8:	6413      	str	r3, [r2, #64]	@ 0x40
 8000bba:	4b06      	ldr	r3, [pc, #24]	@ (8000bd4 <HAL_MspInit+0x4c>)
 8000bbc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000bbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000bc2:	603b      	str	r3, [r7, #0]
 8000bc4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000bc6:	2007      	movs	r0, #7
 8000bc8:	f000 fa86 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bcc:	bf00      	nop
 8000bce:	3708      	adds	r7, #8
 8000bd0:	46bd      	mov	sp, r7
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	40023800 	.word	0x40023800

08000bd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000bd8:	b480      	push	{r7}
 8000bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000bdc:	bf00      	nop
 8000bde:	e7fd      	b.n	8000bdc <NMI_Handler+0x4>

08000be0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000be0:	b480      	push	{r7}
 8000be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000be4:	bf00      	nop
 8000be6:	e7fd      	b.n	8000be4 <HardFault_Handler+0x4>

08000be8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000be8:	b480      	push	{r7}
 8000bea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000bec:	bf00      	nop
 8000bee:	e7fd      	b.n	8000bec <MemManage_Handler+0x4>

08000bf0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000bf0:	b480      	push	{r7}
 8000bf2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000bf4:	bf00      	nop
 8000bf6:	e7fd      	b.n	8000bf4 <BusFault_Handler+0x4>

08000bf8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000bf8:	b480      	push	{r7}
 8000bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000bfc:	bf00      	nop
 8000bfe:	e7fd      	b.n	8000bfc <UsageFault_Handler+0x4>

08000c00 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000c00:	b480      	push	{r7}
 8000c02:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000c04:	bf00      	nop
 8000c06:	46bd      	mov	sp, r7
 8000c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c0c:	4770      	bx	lr

08000c0e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000c0e:	b480      	push	{r7}
 8000c10:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000c12:	bf00      	nop
 8000c14:	46bd      	mov	sp, r7
 8000c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1a:	4770      	bx	lr

08000c1c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000c1c:	b480      	push	{r7}
 8000c1e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000c20:	bf00      	nop
 8000c22:	46bd      	mov	sp, r7
 8000c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c28:	4770      	bx	lr

08000c2a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000c2e:	f000 f963 	bl	8000ef8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000c32:	bf00      	nop
 8000c34:	bd80      	pop	{r7, pc}

08000c36 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000c36:	b580      	push	{r7, lr}
 8000c38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000c3a:	2001      	movs	r0, #1
 8000c3c:	f000 fc6e 	bl	800151c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}

08000c44 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000c44:	b480      	push	{r7}
 8000c46:	b083      	sub	sp, #12
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000c4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000c8c <ITM_SendChar+0x48>)
 8000c50:	681b      	ldr	r3, [r3, #0]
 8000c52:	4a0e      	ldr	r2, [pc, #56]	@ (8000c8c <ITM_SendChar+0x48>)
 8000c54:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000c58:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000c5a:	4b0d      	ldr	r3, [pc, #52]	@ (8000c90 <ITM_SendChar+0x4c>)
 8000c5c:	681b      	ldr	r3, [r3, #0]
 8000c5e:	4a0c      	ldr	r2, [pc, #48]	@ (8000c90 <ITM_SendChar+0x4c>)
 8000c60:	f043 0301 	orr.w	r3, r3, #1
 8000c64:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000c66:	bf00      	nop
 8000c68:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	f003 0301 	and.w	r3, r3, #1
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d0f8      	beq.n	8000c68 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000c76:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000c7a:	79fb      	ldrb	r3, [r7, #7]
 8000c7c:	6013      	str	r3, [r2, #0]
}
 8000c7e:	bf00      	nop
 8000c80:	370c      	adds	r7, #12
 8000c82:	46bd      	mov	sp, r7
 8000c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c88:	4770      	bx	lr
 8000c8a:	bf00      	nop
 8000c8c:	e000edfc 	.word	0xe000edfc
 8000c90:	e0000e00 	.word	0xe0000e00

08000c94 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b086      	sub	sp, #24
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	60f8      	str	r0, [r7, #12]
 8000c9c:	60b9      	str	r1, [r7, #8]
 8000c9e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	617b      	str	r3, [r7, #20]
 8000ca4:	e00a      	b.n	8000cbc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000ca6:	f3af 8000 	nop.w
 8000caa:	4601      	mov	r1, r0
 8000cac:	68bb      	ldr	r3, [r7, #8]
 8000cae:	1c5a      	adds	r2, r3, #1
 8000cb0:	60ba      	str	r2, [r7, #8]
 8000cb2:	b2ca      	uxtb	r2, r1
 8000cb4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cb6:	697b      	ldr	r3, [r7, #20]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	617b      	str	r3, [r7, #20]
 8000cbc:	697a      	ldr	r2, [r7, #20]
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	dbf0      	blt.n	8000ca6 <_read+0x12>
  }

  return len;
 8000cc4:	687b      	ldr	r3, [r7, #4]
}
 8000cc6:	4618      	mov	r0, r3
 8000cc8:	3718      	adds	r7, #24
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}

08000cce <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000cce:	b580      	push	{r7, lr}
 8000cd0:	b086      	sub	sp, #24
 8000cd2:	af00      	add	r7, sp, #0
 8000cd4:	60f8      	str	r0, [r7, #12]
 8000cd6:	60b9      	str	r1, [r7, #8]
 8000cd8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cda:	2300      	movs	r3, #0
 8000cdc:	617b      	str	r3, [r7, #20]
 8000cde:	e009      	b.n	8000cf4 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000ce0:	68bb      	ldr	r3, [r7, #8]
 8000ce2:	1c5a      	adds	r2, r3, #1
 8000ce4:	60ba      	str	r2, [r7, #8]
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	4618      	mov	r0, r3
 8000cea:	f7ff ffab 	bl	8000c44 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000cee:	697b      	ldr	r3, [r7, #20]
 8000cf0:	3301      	adds	r3, #1
 8000cf2:	617b      	str	r3, [r7, #20]
 8000cf4:	697a      	ldr	r2, [r7, #20]
 8000cf6:	687b      	ldr	r3, [r7, #4]
 8000cf8:	429a      	cmp	r2, r3
 8000cfa:	dbf1      	blt.n	8000ce0 <_write+0x12>
  }
  return len;
 8000cfc:	687b      	ldr	r3, [r7, #4]
}
 8000cfe:	4618      	mov	r0, r3
 8000d00:	3718      	adds	r7, #24
 8000d02:	46bd      	mov	sp, r7
 8000d04:	bd80      	pop	{r7, pc}

08000d06 <_close>:

int _close(int file)
{
 8000d06:	b480      	push	{r7}
 8000d08:	b083      	sub	sp, #12
 8000d0a:	af00      	add	r7, sp, #0
 8000d0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000d0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000d12:	4618      	mov	r0, r3
 8000d14:	370c      	adds	r7, #12
 8000d16:	46bd      	mov	sp, r7
 8000d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d1c:	4770      	bx	lr

08000d1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000d1e:	b480      	push	{r7}
 8000d20:	b083      	sub	sp, #12
 8000d22:	af00      	add	r7, sp, #0
 8000d24:	6078      	str	r0, [r7, #4]
 8000d26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000d28:	683b      	ldr	r3, [r7, #0]
 8000d2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000d2e:	605a      	str	r2, [r3, #4]
  return 0;
 8000d30:	2300      	movs	r3, #0
}
 8000d32:	4618      	mov	r0, r3
 8000d34:	370c      	adds	r7, #12
 8000d36:	46bd      	mov	sp, r7
 8000d38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d3c:	4770      	bx	lr

08000d3e <_isatty>:

int _isatty(int file)
{
 8000d3e:	b480      	push	{r7}
 8000d40:	b083      	sub	sp, #12
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000d46:	2301      	movs	r3, #1
}
 8000d48:	4618      	mov	r0, r3
 8000d4a:	370c      	adds	r7, #12
 8000d4c:	46bd      	mov	sp, r7
 8000d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d52:	4770      	bx	lr

08000d54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b085      	sub	sp, #20
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	60f8      	str	r0, [r7, #12]
 8000d5c:	60b9      	str	r1, [r7, #8]
 8000d5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000d60:	2300      	movs	r3, #0
}
 8000d62:	4618      	mov	r0, r3
 8000d64:	3714      	adds	r7, #20
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
	...

08000d70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b086      	sub	sp, #24
 8000d74:	af00      	add	r7, sp, #0
 8000d76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000d78:	4a14      	ldr	r2, [pc, #80]	@ (8000dcc <_sbrk+0x5c>)
 8000d7a:	4b15      	ldr	r3, [pc, #84]	@ (8000dd0 <_sbrk+0x60>)
 8000d7c:	1ad3      	subs	r3, r2, r3
 8000d7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000d80:	697b      	ldr	r3, [r7, #20]
 8000d82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000d84:	4b13      	ldr	r3, [pc, #76]	@ (8000dd4 <_sbrk+0x64>)
 8000d86:	681b      	ldr	r3, [r3, #0]
 8000d88:	2b00      	cmp	r3, #0
 8000d8a:	d102      	bne.n	8000d92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000d8c:	4b11      	ldr	r3, [pc, #68]	@ (8000dd4 <_sbrk+0x64>)
 8000d8e:	4a12      	ldr	r2, [pc, #72]	@ (8000dd8 <_sbrk+0x68>)
 8000d90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000d92:	4b10      	ldr	r3, [pc, #64]	@ (8000dd4 <_sbrk+0x64>)
 8000d94:	681a      	ldr	r2, [r3, #0]
 8000d96:	687b      	ldr	r3, [r7, #4]
 8000d98:	4413      	add	r3, r2
 8000d9a:	693a      	ldr	r2, [r7, #16]
 8000d9c:	429a      	cmp	r2, r3
 8000d9e:	d207      	bcs.n	8000db0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000da0:	f001 face 	bl	8002340 <__errno>
 8000da4:	4603      	mov	r3, r0
 8000da6:	220c      	movs	r2, #12
 8000da8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000daa:	f04f 33ff 	mov.w	r3, #4294967295
 8000dae:	e009      	b.n	8000dc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000db0:	4b08      	ldr	r3, [pc, #32]	@ (8000dd4 <_sbrk+0x64>)
 8000db2:	681b      	ldr	r3, [r3, #0]
 8000db4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000db6:	4b07      	ldr	r3, [pc, #28]	@ (8000dd4 <_sbrk+0x64>)
 8000db8:	681a      	ldr	r2, [r3, #0]
 8000dba:	687b      	ldr	r3, [r7, #4]
 8000dbc:	4413      	add	r3, r2
 8000dbe:	4a05      	ldr	r2, [pc, #20]	@ (8000dd4 <_sbrk+0x64>)
 8000dc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000dc2:	68fb      	ldr	r3, [r7, #12]
}
 8000dc4:	4618      	mov	r0, r3
 8000dc6:	3718      	adds	r7, #24
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	20030000 	.word	0x20030000
 8000dd0:	00000400 	.word	0x00000400
 8000dd4:	20000084 	.word	0x20000084
 8000dd8:	200001d8 	.word	0x200001d8

08000ddc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000de0:	4b06      	ldr	r3, [pc, #24]	@ (8000dfc <SystemInit+0x20>)
 8000de2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000de6:	4a05      	ldr	r2, [pc, #20]	@ (8000dfc <SystemInit+0x20>)
 8000de8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000dec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr
 8000dfa:	bf00      	nop
 8000dfc:	e000ed00 	.word	0xe000ed00

08000e00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000e00:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000e38 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e04:	f7ff ffea 	bl	8000ddc <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000e08:	480c      	ldr	r0, [pc, #48]	@ (8000e3c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e0a:	490d      	ldr	r1, [pc, #52]	@ (8000e40 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e0c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e44 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e10:	e002      	b.n	8000e18 <LoopCopyDataInit>

08000e12 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e12:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e14:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e16:	3304      	adds	r3, #4

08000e18 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e18:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e1a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e1c:	d3f9      	bcc.n	8000e12 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e1e:	4a0a      	ldr	r2, [pc, #40]	@ (8000e48 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e20:	4c0a      	ldr	r4, [pc, #40]	@ (8000e4c <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e22:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e24:	e001      	b.n	8000e2a <LoopFillZerobss>

08000e26 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e26:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e28:	3204      	adds	r2, #4

08000e2a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e2a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e2c:	d3fb      	bcc.n	8000e26 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8000e2e:	f001 fa8d 	bl	800234c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e32:	f7ff fb71 	bl	8000518 <main>
  bx  lr    
 8000e36:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8000e38:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8000e3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e40:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000e44:	08002898 	.word	0x08002898
  ldr r2, =_sbss
 8000e48:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000e4c:	200001d8 	.word	0x200001d8

08000e50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e50:	e7fe      	b.n	8000e50 <ADC_IRQHandler>
	...

08000e54 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e58:	4b0e      	ldr	r3, [pc, #56]	@ (8000e94 <HAL_Init+0x40>)
 8000e5a:	681b      	ldr	r3, [r3, #0]
 8000e5c:	4a0d      	ldr	r2, [pc, #52]	@ (8000e94 <HAL_Init+0x40>)
 8000e5e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000e62:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e64:	4b0b      	ldr	r3, [pc, #44]	@ (8000e94 <HAL_Init+0x40>)
 8000e66:	681b      	ldr	r3, [r3, #0]
 8000e68:	4a0a      	ldr	r2, [pc, #40]	@ (8000e94 <HAL_Init+0x40>)
 8000e6a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000e6e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e70:	4b08      	ldr	r3, [pc, #32]	@ (8000e94 <HAL_Init+0x40>)
 8000e72:	681b      	ldr	r3, [r3, #0]
 8000e74:	4a07      	ldr	r2, [pc, #28]	@ (8000e94 <HAL_Init+0x40>)
 8000e76:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000e7a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e7c:	2003      	movs	r0, #3
 8000e7e:	f000 f92b 	bl	80010d8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e82:	2000      	movs	r0, #0
 8000e84:	f000 f808 	bl	8000e98 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e88:	f7ff fe7e 	bl	8000b88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e8c:	2300      	movs	r3, #0
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	bd80      	pop	{r7, pc}
 8000e92:	bf00      	nop
 8000e94:	40023c00 	.word	0x40023c00

08000e98 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e98:	b580      	push	{r7, lr}
 8000e9a:	b082      	sub	sp, #8
 8000e9c:	af00      	add	r7, sp, #0
 8000e9e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ea0:	4b12      	ldr	r3, [pc, #72]	@ (8000eec <HAL_InitTick+0x54>)
 8000ea2:	681a      	ldr	r2, [r3, #0]
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <HAL_InitTick+0x58>)
 8000ea6:	781b      	ldrb	r3, [r3, #0]
 8000ea8:	4619      	mov	r1, r3
 8000eaa:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000eae:	fbb3 f3f1 	udiv	r3, r3, r1
 8000eb2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000eb6:	4618      	mov	r0, r3
 8000eb8:	f000 f943 	bl	8001142 <HAL_SYSTICK_Config>
 8000ebc:	4603      	mov	r3, r0
 8000ebe:	2b00      	cmp	r3, #0
 8000ec0:	d001      	beq.n	8000ec6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000ec2:	2301      	movs	r3, #1
 8000ec4:	e00e      	b.n	8000ee4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	2b0f      	cmp	r3, #15
 8000eca:	d80a      	bhi.n	8000ee2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ecc:	2200      	movs	r2, #0
 8000ece:	6879      	ldr	r1, [r7, #4]
 8000ed0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ed4:	f000 f90b 	bl	80010ee <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ed8:	4a06      	ldr	r2, [pc, #24]	@ (8000ef4 <HAL_InitTick+0x5c>)
 8000eda:	687b      	ldr	r3, [r7, #4]
 8000edc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ede:	2300      	movs	r3, #0
 8000ee0:	e000      	b.n	8000ee4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ee2:	2301      	movs	r3, #1
}
 8000ee4:	4618      	mov	r0, r3
 8000ee6:	3708      	adds	r7, #8
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bd80      	pop	{r7, pc}
 8000eec:	20000000 	.word	0x20000000
 8000ef0:	20000008 	.word	0x20000008
 8000ef4:	20000004 	.word	0x20000004

08000ef8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ef8:	b480      	push	{r7}
 8000efa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000efc:	4b06      	ldr	r3, [pc, #24]	@ (8000f18 <HAL_IncTick+0x20>)
 8000efe:	781b      	ldrb	r3, [r3, #0]
 8000f00:	461a      	mov	r2, r3
 8000f02:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f04:	681b      	ldr	r3, [r3, #0]
 8000f06:	4413      	add	r3, r2
 8000f08:	4a04      	ldr	r2, [pc, #16]	@ (8000f1c <HAL_IncTick+0x24>)
 8000f0a:	6013      	str	r3, [r2, #0]
}
 8000f0c:	bf00      	nop
 8000f0e:	46bd      	mov	sp, r7
 8000f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f14:	4770      	bx	lr
 8000f16:	bf00      	nop
 8000f18:	20000008 	.word	0x20000008
 8000f1c:	20000088 	.word	0x20000088

08000f20 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f20:	b480      	push	{r7}
 8000f22:	af00      	add	r7, sp, #0
  return uwTick;
 8000f24:	4b03      	ldr	r3, [pc, #12]	@ (8000f34 <HAL_GetTick+0x14>)
 8000f26:	681b      	ldr	r3, [r3, #0]
}
 8000f28:	4618      	mov	r0, r3
 8000f2a:	46bd      	mov	sp, r7
 8000f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f30:	4770      	bx	lr
 8000f32:	bf00      	nop
 8000f34:	20000088 	.word	0x20000088

08000f38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b085      	sub	sp, #20
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f40:	687b      	ldr	r3, [r7, #4]
 8000f42:	f003 0307 	and.w	r3, r3, #7
 8000f46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f48:	4b0c      	ldr	r3, [pc, #48]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f4a:	68db      	ldr	r3, [r3, #12]
 8000f4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f4e:	68ba      	ldr	r2, [r7, #8]
 8000f50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000f54:	4013      	ands	r3, r2
 8000f56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f58:	68fb      	ldr	r3, [r7, #12]
 8000f5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f5c:	68bb      	ldr	r3, [r7, #8]
 8000f5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000f64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000f68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000f6a:	4a04      	ldr	r2, [pc, #16]	@ (8000f7c <__NVIC_SetPriorityGrouping+0x44>)
 8000f6c:	68bb      	ldr	r3, [r7, #8]
 8000f6e:	60d3      	str	r3, [r2, #12]
}
 8000f70:	bf00      	nop
 8000f72:	3714      	adds	r7, #20
 8000f74:	46bd      	mov	sp, r7
 8000f76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f7a:	4770      	bx	lr
 8000f7c:	e000ed00 	.word	0xe000ed00

08000f80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f80:	b480      	push	{r7}
 8000f82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f84:	4b04      	ldr	r3, [pc, #16]	@ (8000f98 <__NVIC_GetPriorityGrouping+0x18>)
 8000f86:	68db      	ldr	r3, [r3, #12]
 8000f88:	0a1b      	lsrs	r3, r3, #8
 8000f8a:	f003 0307 	and.w	r3, r3, #7
}
 8000f8e:	4618      	mov	r0, r3
 8000f90:	46bd      	mov	sp, r7
 8000f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f96:	4770      	bx	lr
 8000f98:	e000ed00 	.word	0xe000ed00

08000f9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	b083      	sub	sp, #12
 8000fa0:	af00      	add	r7, sp, #0
 8000fa2:	4603      	mov	r3, r0
 8000fa4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fa6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000faa:	2b00      	cmp	r3, #0
 8000fac:	db0b      	blt.n	8000fc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000fae:	79fb      	ldrb	r3, [r7, #7]
 8000fb0:	f003 021f 	and.w	r2, r3, #31
 8000fb4:	4907      	ldr	r1, [pc, #28]	@ (8000fd4 <__NVIC_EnableIRQ+0x38>)
 8000fb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fba:	095b      	lsrs	r3, r3, #5
 8000fbc:	2001      	movs	r0, #1
 8000fbe:	fa00 f202 	lsl.w	r2, r0, r2
 8000fc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000fc6:	bf00      	nop
 8000fc8:	370c      	adds	r7, #12
 8000fca:	46bd      	mov	sp, r7
 8000fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd0:	4770      	bx	lr
 8000fd2:	bf00      	nop
 8000fd4:	e000e100 	.word	0xe000e100

08000fd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd8:	b480      	push	{r7}
 8000fda:	b083      	sub	sp, #12
 8000fdc:	af00      	add	r7, sp, #0
 8000fde:	4603      	mov	r3, r0
 8000fe0:	6039      	str	r1, [r7, #0]
 8000fe2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	db0a      	blt.n	8001002 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fec:	683b      	ldr	r3, [r7, #0]
 8000fee:	b2da      	uxtb	r2, r3
 8000ff0:	490c      	ldr	r1, [pc, #48]	@ (8001024 <__NVIC_SetPriority+0x4c>)
 8000ff2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff6:	0112      	lsls	r2, r2, #4
 8000ff8:	b2d2      	uxtb	r2, r2
 8000ffa:	440b      	add	r3, r1
 8000ffc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001000:	e00a      	b.n	8001018 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001002:	683b      	ldr	r3, [r7, #0]
 8001004:	b2da      	uxtb	r2, r3
 8001006:	4908      	ldr	r1, [pc, #32]	@ (8001028 <__NVIC_SetPriority+0x50>)
 8001008:	79fb      	ldrb	r3, [r7, #7]
 800100a:	f003 030f 	and.w	r3, r3, #15
 800100e:	3b04      	subs	r3, #4
 8001010:	0112      	lsls	r2, r2, #4
 8001012:	b2d2      	uxtb	r2, r2
 8001014:	440b      	add	r3, r1
 8001016:	761a      	strb	r2, [r3, #24]
}
 8001018:	bf00      	nop
 800101a:	370c      	adds	r7, #12
 800101c:	46bd      	mov	sp, r7
 800101e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001022:	4770      	bx	lr
 8001024:	e000e100 	.word	0xe000e100
 8001028:	e000ed00 	.word	0xe000ed00

0800102c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800102c:	b480      	push	{r7}
 800102e:	b089      	sub	sp, #36	@ 0x24
 8001030:	af00      	add	r7, sp, #0
 8001032:	60f8      	str	r0, [r7, #12]
 8001034:	60b9      	str	r1, [r7, #8]
 8001036:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001038:	68fb      	ldr	r3, [r7, #12]
 800103a:	f003 0307 	and.w	r3, r3, #7
 800103e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001040:	69fb      	ldr	r3, [r7, #28]
 8001042:	f1c3 0307 	rsb	r3, r3, #7
 8001046:	2b04      	cmp	r3, #4
 8001048:	bf28      	it	cs
 800104a:	2304      	movcs	r3, #4
 800104c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104e:	69fb      	ldr	r3, [r7, #28]
 8001050:	3304      	adds	r3, #4
 8001052:	2b06      	cmp	r3, #6
 8001054:	d902      	bls.n	800105c <NVIC_EncodePriority+0x30>
 8001056:	69fb      	ldr	r3, [r7, #28]
 8001058:	3b03      	subs	r3, #3
 800105a:	e000      	b.n	800105e <NVIC_EncodePriority+0x32>
 800105c:	2300      	movs	r3, #0
 800105e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001060:	f04f 32ff 	mov.w	r2, #4294967295
 8001064:	69bb      	ldr	r3, [r7, #24]
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43da      	mvns	r2, r3
 800106c:	68bb      	ldr	r3, [r7, #8]
 800106e:	401a      	ands	r2, r3
 8001070:	697b      	ldr	r3, [r7, #20]
 8001072:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001074:	f04f 31ff 	mov.w	r1, #4294967295
 8001078:	697b      	ldr	r3, [r7, #20]
 800107a:	fa01 f303 	lsl.w	r3, r1, r3
 800107e:	43d9      	mvns	r1, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001084:	4313      	orrs	r3, r2
         );
}
 8001086:	4618      	mov	r0, r3
 8001088:	3724      	adds	r7, #36	@ 0x24
 800108a:	46bd      	mov	sp, r7
 800108c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001090:	4770      	bx	lr
	...

08001094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001094:	b580      	push	{r7, lr}
 8001096:	b082      	sub	sp, #8
 8001098:	af00      	add	r7, sp, #0
 800109a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800109c:	687b      	ldr	r3, [r7, #4]
 800109e:	3b01      	subs	r3, #1
 80010a0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80010a4:	d301      	bcc.n	80010aa <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a6:	2301      	movs	r3, #1
 80010a8:	e00f      	b.n	80010ca <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010aa:	4a0a      	ldr	r2, [pc, #40]	@ (80010d4 <SysTick_Config+0x40>)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	3b01      	subs	r3, #1
 80010b0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010b2:	210f      	movs	r1, #15
 80010b4:	f04f 30ff 	mov.w	r0, #4294967295
 80010b8:	f7ff ff8e 	bl	8000fd8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010bc:	4b05      	ldr	r3, [pc, #20]	@ (80010d4 <SysTick_Config+0x40>)
 80010be:	2200      	movs	r2, #0
 80010c0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010c2:	4b04      	ldr	r3, [pc, #16]	@ (80010d4 <SysTick_Config+0x40>)
 80010c4:	2207      	movs	r2, #7
 80010c6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c8:	2300      	movs	r3, #0
}
 80010ca:	4618      	mov	r0, r3
 80010cc:	3708      	adds	r7, #8
 80010ce:	46bd      	mov	sp, r7
 80010d0:	bd80      	pop	{r7, pc}
 80010d2:	bf00      	nop
 80010d4:	e000e010 	.word	0xe000e010

080010d8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010e0:	6878      	ldr	r0, [r7, #4]
 80010e2:	f7ff ff29 	bl	8000f38 <__NVIC_SetPriorityGrouping>
}
 80010e6:	bf00      	nop
 80010e8:	3708      	adds	r7, #8
 80010ea:	46bd      	mov	sp, r7
 80010ec:	bd80      	pop	{r7, pc}

080010ee <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ee:	b580      	push	{r7, lr}
 80010f0:	b086      	sub	sp, #24
 80010f2:	af00      	add	r7, sp, #0
 80010f4:	4603      	mov	r3, r0
 80010f6:	60b9      	str	r1, [r7, #8]
 80010f8:	607a      	str	r2, [r7, #4]
 80010fa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010fc:	2300      	movs	r3, #0
 80010fe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001100:	f7ff ff3e 	bl	8000f80 <__NVIC_GetPriorityGrouping>
 8001104:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001106:	687a      	ldr	r2, [r7, #4]
 8001108:	68b9      	ldr	r1, [r7, #8]
 800110a:	6978      	ldr	r0, [r7, #20]
 800110c:	f7ff ff8e 	bl	800102c <NVIC_EncodePriority>
 8001110:	4602      	mov	r2, r0
 8001112:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001116:	4611      	mov	r1, r2
 8001118:	4618      	mov	r0, r3
 800111a:	f7ff ff5d 	bl	8000fd8 <__NVIC_SetPriority>
}
 800111e:	bf00      	nop
 8001120:	3718      	adds	r7, #24
 8001122:	46bd      	mov	sp, r7
 8001124:	bd80      	pop	{r7, pc}

08001126 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001126:	b580      	push	{r7, lr}
 8001128:	b082      	sub	sp, #8
 800112a:	af00      	add	r7, sp, #0
 800112c:	4603      	mov	r3, r0
 800112e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001130:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001134:	4618      	mov	r0, r3
 8001136:	f7ff ff31 	bl	8000f9c <__NVIC_EnableIRQ>
}
 800113a:	bf00      	nop
 800113c:	3708      	adds	r7, #8
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}

08001142 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001142:	b580      	push	{r7, lr}
 8001144:	b082      	sub	sp, #8
 8001146:	af00      	add	r7, sp, #0
 8001148:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800114a:	6878      	ldr	r0, [r7, #4]
 800114c:	f7ff ffa2 	bl	8001094 <SysTick_Config>
 8001150:	4603      	mov	r3, r0
}
 8001152:	4618      	mov	r0, r3
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
	...

0800115c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800115c:	b480      	push	{r7}
 800115e:	b089      	sub	sp, #36	@ 0x24
 8001160:	af00      	add	r7, sp, #0
 8001162:	6078      	str	r0, [r7, #4]
 8001164:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001166:	2300      	movs	r3, #0
 8001168:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800116a:	2300      	movs	r3, #0
 800116c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800116e:	2300      	movs	r3, #0
 8001170:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001172:	2300      	movs	r3, #0
 8001174:	61fb      	str	r3, [r7, #28]
 8001176:	e177      	b.n	8001468 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001178:	2201      	movs	r2, #1
 800117a:	69fb      	ldr	r3, [r7, #28]
 800117c:	fa02 f303 	lsl.w	r3, r2, r3
 8001180:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	681b      	ldr	r3, [r3, #0]
 8001186:	697a      	ldr	r2, [r7, #20]
 8001188:	4013      	ands	r3, r2
 800118a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800118c:	693a      	ldr	r2, [r7, #16]
 800118e:	697b      	ldr	r3, [r7, #20]
 8001190:	429a      	cmp	r2, r3
 8001192:	f040 8166 	bne.w	8001462 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001196:	683b      	ldr	r3, [r7, #0]
 8001198:	685b      	ldr	r3, [r3, #4]
 800119a:	f003 0303 	and.w	r3, r3, #3
 800119e:	2b01      	cmp	r3, #1
 80011a0:	d005      	beq.n	80011ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80011a2:	683b      	ldr	r3, [r7, #0]
 80011a4:	685b      	ldr	r3, [r3, #4]
 80011a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	d130      	bne.n	8001210 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	689b      	ldr	r3, [r3, #8]
 80011b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80011b4:	69fb      	ldr	r3, [r7, #28]
 80011b6:	005b      	lsls	r3, r3, #1
 80011b8:	2203      	movs	r2, #3
 80011ba:	fa02 f303 	lsl.w	r3, r2, r3
 80011be:	43db      	mvns	r3, r3
 80011c0:	69ba      	ldr	r2, [r7, #24]
 80011c2:	4013      	ands	r3, r2
 80011c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011c6:	683b      	ldr	r3, [r7, #0]
 80011c8:	68da      	ldr	r2, [r3, #12]
 80011ca:	69fb      	ldr	r3, [r7, #28]
 80011cc:	005b      	lsls	r3, r3, #1
 80011ce:	fa02 f303 	lsl.w	r3, r2, r3
 80011d2:	69ba      	ldr	r2, [r7, #24]
 80011d4:	4313      	orrs	r3, r2
 80011d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011d8:	687b      	ldr	r3, [r7, #4]
 80011da:	69ba      	ldr	r2, [r7, #24]
 80011dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	685b      	ldr	r3, [r3, #4]
 80011e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011e4:	2201      	movs	r2, #1
 80011e6:	69fb      	ldr	r3, [r7, #28]
 80011e8:	fa02 f303 	lsl.w	r3, r2, r3
 80011ec:	43db      	mvns	r3, r3
 80011ee:	69ba      	ldr	r2, [r7, #24]
 80011f0:	4013      	ands	r3, r2
 80011f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011f4:	683b      	ldr	r3, [r7, #0]
 80011f6:	685b      	ldr	r3, [r3, #4]
 80011f8:	091b      	lsrs	r3, r3, #4
 80011fa:	f003 0201 	and.w	r2, r3, #1
 80011fe:	69fb      	ldr	r3, [r7, #28]
 8001200:	fa02 f303 	lsl.w	r3, r2, r3
 8001204:	69ba      	ldr	r2, [r7, #24]
 8001206:	4313      	orrs	r3, r2
 8001208:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	69ba      	ldr	r2, [r7, #24]
 800120e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001210:	683b      	ldr	r3, [r7, #0]
 8001212:	685b      	ldr	r3, [r3, #4]
 8001214:	f003 0303 	and.w	r3, r3, #3
 8001218:	2b03      	cmp	r3, #3
 800121a:	d017      	beq.n	800124c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	68db      	ldr	r3, [r3, #12]
 8001220:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001222:	69fb      	ldr	r3, [r7, #28]
 8001224:	005b      	lsls	r3, r3, #1
 8001226:	2203      	movs	r2, #3
 8001228:	fa02 f303 	lsl.w	r3, r2, r3
 800122c:	43db      	mvns	r3, r3
 800122e:	69ba      	ldr	r2, [r7, #24]
 8001230:	4013      	ands	r3, r2
 8001232:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001234:	683b      	ldr	r3, [r7, #0]
 8001236:	689a      	ldr	r2, [r3, #8]
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	005b      	lsls	r3, r3, #1
 800123c:	fa02 f303 	lsl.w	r3, r2, r3
 8001240:	69ba      	ldr	r2, [r7, #24]
 8001242:	4313      	orrs	r3, r2
 8001244:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800124c:	683b      	ldr	r3, [r7, #0]
 800124e:	685b      	ldr	r3, [r3, #4]
 8001250:	f003 0303 	and.w	r3, r3, #3
 8001254:	2b02      	cmp	r3, #2
 8001256:	d123      	bne.n	80012a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001258:	69fb      	ldr	r3, [r7, #28]
 800125a:	08da      	lsrs	r2, r3, #3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	3208      	adds	r2, #8
 8001260:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001264:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001266:	69fb      	ldr	r3, [r7, #28]
 8001268:	f003 0307 	and.w	r3, r3, #7
 800126c:	009b      	lsls	r3, r3, #2
 800126e:	220f      	movs	r2, #15
 8001270:	fa02 f303 	lsl.w	r3, r2, r3
 8001274:	43db      	mvns	r3, r3
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	4013      	ands	r3, r2
 800127a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800127c:	683b      	ldr	r3, [r7, #0]
 800127e:	691a      	ldr	r2, [r3, #16]
 8001280:	69fb      	ldr	r3, [r7, #28]
 8001282:	f003 0307 	and.w	r3, r3, #7
 8001286:	009b      	lsls	r3, r3, #2
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	69ba      	ldr	r2, [r7, #24]
 800128e:	4313      	orrs	r3, r2
 8001290:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001292:	69fb      	ldr	r3, [r7, #28]
 8001294:	08da      	lsrs	r2, r3, #3
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	3208      	adds	r2, #8
 800129a:	69b9      	ldr	r1, [r7, #24]
 800129c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80012a6:	69fb      	ldr	r3, [r7, #28]
 80012a8:	005b      	lsls	r3, r3, #1
 80012aa:	2203      	movs	r2, #3
 80012ac:	fa02 f303 	lsl.w	r3, r2, r3
 80012b0:	43db      	mvns	r3, r3
 80012b2:	69ba      	ldr	r2, [r7, #24]
 80012b4:	4013      	ands	r3, r2
 80012b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80012b8:	683b      	ldr	r3, [r7, #0]
 80012ba:	685b      	ldr	r3, [r3, #4]
 80012bc:	f003 0203 	and.w	r2, r3, #3
 80012c0:	69fb      	ldr	r3, [r7, #28]
 80012c2:	005b      	lsls	r3, r3, #1
 80012c4:	fa02 f303 	lsl.w	r3, r2, r3
 80012c8:	69ba      	ldr	r2, [r7, #24]
 80012ca:	4313      	orrs	r3, r2
 80012cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	69ba      	ldr	r2, [r7, #24]
 80012d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012d4:	683b      	ldr	r3, [r7, #0]
 80012d6:	685b      	ldr	r3, [r3, #4]
 80012d8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80012dc:	2b00      	cmp	r3, #0
 80012de:	f000 80c0 	beq.w	8001462 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012e2:	2300      	movs	r3, #0
 80012e4:	60fb      	str	r3, [r7, #12]
 80012e6:	4b66      	ldr	r3, [pc, #408]	@ (8001480 <HAL_GPIO_Init+0x324>)
 80012e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012ea:	4a65      	ldr	r2, [pc, #404]	@ (8001480 <HAL_GPIO_Init+0x324>)
 80012ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80012f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80012f2:	4b63      	ldr	r3, [pc, #396]	@ (8001480 <HAL_GPIO_Init+0x324>)
 80012f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80012f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80012fa:	60fb      	str	r3, [r7, #12]
 80012fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012fe:	4a61      	ldr	r2, [pc, #388]	@ (8001484 <HAL_GPIO_Init+0x328>)
 8001300:	69fb      	ldr	r3, [r7, #28]
 8001302:	089b      	lsrs	r3, r3, #2
 8001304:	3302      	adds	r3, #2
 8001306:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800130a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800130c:	69fb      	ldr	r3, [r7, #28]
 800130e:	f003 0303 	and.w	r3, r3, #3
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	220f      	movs	r2, #15
 8001316:	fa02 f303 	lsl.w	r3, r2, r3
 800131a:	43db      	mvns	r3, r3
 800131c:	69ba      	ldr	r2, [r7, #24]
 800131e:	4013      	ands	r3, r2
 8001320:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a58      	ldr	r2, [pc, #352]	@ (8001488 <HAL_GPIO_Init+0x32c>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d037      	beq.n	800139a <HAL_GPIO_Init+0x23e>
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	4a57      	ldr	r2, [pc, #348]	@ (800148c <HAL_GPIO_Init+0x330>)
 800132e:	4293      	cmp	r3, r2
 8001330:	d031      	beq.n	8001396 <HAL_GPIO_Init+0x23a>
 8001332:	687b      	ldr	r3, [r7, #4]
 8001334:	4a56      	ldr	r2, [pc, #344]	@ (8001490 <HAL_GPIO_Init+0x334>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d02b      	beq.n	8001392 <HAL_GPIO_Init+0x236>
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	4a55      	ldr	r2, [pc, #340]	@ (8001494 <HAL_GPIO_Init+0x338>)
 800133e:	4293      	cmp	r3, r2
 8001340:	d025      	beq.n	800138e <HAL_GPIO_Init+0x232>
 8001342:	687b      	ldr	r3, [r7, #4]
 8001344:	4a54      	ldr	r2, [pc, #336]	@ (8001498 <HAL_GPIO_Init+0x33c>)
 8001346:	4293      	cmp	r3, r2
 8001348:	d01f      	beq.n	800138a <HAL_GPIO_Init+0x22e>
 800134a:	687b      	ldr	r3, [r7, #4]
 800134c:	4a53      	ldr	r2, [pc, #332]	@ (800149c <HAL_GPIO_Init+0x340>)
 800134e:	4293      	cmp	r3, r2
 8001350:	d019      	beq.n	8001386 <HAL_GPIO_Init+0x22a>
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	4a52      	ldr	r2, [pc, #328]	@ (80014a0 <HAL_GPIO_Init+0x344>)
 8001356:	4293      	cmp	r3, r2
 8001358:	d013      	beq.n	8001382 <HAL_GPIO_Init+0x226>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	4a51      	ldr	r2, [pc, #324]	@ (80014a4 <HAL_GPIO_Init+0x348>)
 800135e:	4293      	cmp	r3, r2
 8001360:	d00d      	beq.n	800137e <HAL_GPIO_Init+0x222>
 8001362:	687b      	ldr	r3, [r7, #4]
 8001364:	4a50      	ldr	r2, [pc, #320]	@ (80014a8 <HAL_GPIO_Init+0x34c>)
 8001366:	4293      	cmp	r3, r2
 8001368:	d007      	beq.n	800137a <HAL_GPIO_Init+0x21e>
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	4a4f      	ldr	r2, [pc, #316]	@ (80014ac <HAL_GPIO_Init+0x350>)
 800136e:	4293      	cmp	r3, r2
 8001370:	d101      	bne.n	8001376 <HAL_GPIO_Init+0x21a>
 8001372:	2309      	movs	r3, #9
 8001374:	e012      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001376:	230a      	movs	r3, #10
 8001378:	e010      	b.n	800139c <HAL_GPIO_Init+0x240>
 800137a:	2308      	movs	r3, #8
 800137c:	e00e      	b.n	800139c <HAL_GPIO_Init+0x240>
 800137e:	2307      	movs	r3, #7
 8001380:	e00c      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001382:	2306      	movs	r3, #6
 8001384:	e00a      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001386:	2305      	movs	r3, #5
 8001388:	e008      	b.n	800139c <HAL_GPIO_Init+0x240>
 800138a:	2304      	movs	r3, #4
 800138c:	e006      	b.n	800139c <HAL_GPIO_Init+0x240>
 800138e:	2303      	movs	r3, #3
 8001390:	e004      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001392:	2302      	movs	r3, #2
 8001394:	e002      	b.n	800139c <HAL_GPIO_Init+0x240>
 8001396:	2301      	movs	r3, #1
 8001398:	e000      	b.n	800139c <HAL_GPIO_Init+0x240>
 800139a:	2300      	movs	r3, #0
 800139c:	69fa      	ldr	r2, [r7, #28]
 800139e:	f002 0203 	and.w	r2, r2, #3
 80013a2:	0092      	lsls	r2, r2, #2
 80013a4:	4093      	lsls	r3, r2
 80013a6:	69ba      	ldr	r2, [r7, #24]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80013ac:	4935      	ldr	r1, [pc, #212]	@ (8001484 <HAL_GPIO_Init+0x328>)
 80013ae:	69fb      	ldr	r3, [r7, #28]
 80013b0:	089b      	lsrs	r3, r3, #2
 80013b2:	3302      	adds	r3, #2
 80013b4:	69ba      	ldr	r2, [r7, #24]
 80013b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80013ba:	4b3d      	ldr	r3, [pc, #244]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 80013bc:	689b      	ldr	r3, [r3, #8]
 80013be:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013c0:	693b      	ldr	r3, [r7, #16]
 80013c2:	43db      	mvns	r3, r3
 80013c4:	69ba      	ldr	r2, [r7, #24]
 80013c6:	4013      	ands	r3, r2
 80013c8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80013ca:	683b      	ldr	r3, [r7, #0]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80013d2:	2b00      	cmp	r3, #0
 80013d4:	d003      	beq.n	80013de <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80013d6:	69ba      	ldr	r2, [r7, #24]
 80013d8:	693b      	ldr	r3, [r7, #16]
 80013da:	4313      	orrs	r3, r2
 80013dc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80013de:	4a34      	ldr	r2, [pc, #208]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 80013e0:	69bb      	ldr	r3, [r7, #24]
 80013e2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80013e4:	4b32      	ldr	r3, [pc, #200]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 80013e6:	68db      	ldr	r3, [r3, #12]
 80013e8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013ea:	693b      	ldr	r3, [r7, #16]
 80013ec:	43db      	mvns	r3, r3
 80013ee:	69ba      	ldr	r2, [r7, #24]
 80013f0:	4013      	ands	r3, r2
 80013f2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	685b      	ldr	r3, [r3, #4]
 80013f8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d003      	beq.n	8001408 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001400:	69ba      	ldr	r2, [r7, #24]
 8001402:	693b      	ldr	r3, [r7, #16]
 8001404:	4313      	orrs	r3, r2
 8001406:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001408:	4a29      	ldr	r2, [pc, #164]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 800140a:	69bb      	ldr	r3, [r7, #24]
 800140c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800140e:	4b28      	ldr	r3, [pc, #160]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 8001410:	685b      	ldr	r3, [r3, #4]
 8001412:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001414:	693b      	ldr	r3, [r7, #16]
 8001416:	43db      	mvns	r3, r3
 8001418:	69ba      	ldr	r2, [r7, #24]
 800141a:	4013      	ands	r3, r2
 800141c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800141e:	683b      	ldr	r3, [r7, #0]
 8001420:	685b      	ldr	r3, [r3, #4]
 8001422:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001426:	2b00      	cmp	r3, #0
 8001428:	d003      	beq.n	8001432 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800142a:	69ba      	ldr	r2, [r7, #24]
 800142c:	693b      	ldr	r3, [r7, #16]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001432:	4a1f      	ldr	r2, [pc, #124]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 8001434:	69bb      	ldr	r3, [r7, #24]
 8001436:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001438:	4b1d      	ldr	r3, [pc, #116]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 800143a:	681b      	ldr	r3, [r3, #0]
 800143c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800143e:	693b      	ldr	r3, [r7, #16]
 8001440:	43db      	mvns	r3, r3
 8001442:	69ba      	ldr	r2, [r7, #24]
 8001444:	4013      	ands	r3, r2
 8001446:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001448:	683b      	ldr	r3, [r7, #0]
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	2b00      	cmp	r3, #0
 8001452:	d003      	beq.n	800145c <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001454:	69ba      	ldr	r2, [r7, #24]
 8001456:	693b      	ldr	r3, [r7, #16]
 8001458:	4313      	orrs	r3, r2
 800145a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800145c:	4a14      	ldr	r2, [pc, #80]	@ (80014b0 <HAL_GPIO_Init+0x354>)
 800145e:	69bb      	ldr	r3, [r7, #24]
 8001460:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001462:	69fb      	ldr	r3, [r7, #28]
 8001464:	3301      	adds	r3, #1
 8001466:	61fb      	str	r3, [r7, #28]
 8001468:	69fb      	ldr	r3, [r7, #28]
 800146a:	2b0f      	cmp	r3, #15
 800146c:	f67f ae84 	bls.w	8001178 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001470:	bf00      	nop
 8001472:	bf00      	nop
 8001474:	3724      	adds	r7, #36	@ 0x24
 8001476:	46bd      	mov	sp, r7
 8001478:	f85d 7b04 	ldr.w	r7, [sp], #4
 800147c:	4770      	bx	lr
 800147e:	bf00      	nop
 8001480:	40023800 	.word	0x40023800
 8001484:	40013800 	.word	0x40013800
 8001488:	40020000 	.word	0x40020000
 800148c:	40020400 	.word	0x40020400
 8001490:	40020800 	.word	0x40020800
 8001494:	40020c00 	.word	0x40020c00
 8001498:	40021000 	.word	0x40021000
 800149c:	40021400 	.word	0x40021400
 80014a0:	40021800 	.word	0x40021800
 80014a4:	40021c00 	.word	0x40021c00
 80014a8:	40022000 	.word	0x40022000
 80014ac:	40022400 	.word	0x40022400
 80014b0:	40013c00 	.word	0x40013c00

080014b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80014b4:	b480      	push	{r7}
 80014b6:	b083      	sub	sp, #12
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]
 80014bc:	460b      	mov	r3, r1
 80014be:	807b      	strh	r3, [r7, #2]
 80014c0:	4613      	mov	r3, r2
 80014c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80014c4:	787b      	ldrb	r3, [r7, #1]
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d003      	beq.n	80014d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80014ca:	887a      	ldrh	r2, [r7, #2]
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80014d0:	e003      	b.n	80014da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80014d2:	887b      	ldrh	r3, [r7, #2]
 80014d4:	041a      	lsls	r2, r3, #16
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	619a      	str	r2, [r3, #24]
}
 80014da:	bf00      	nop
 80014dc:	370c      	adds	r7, #12
 80014de:	46bd      	mov	sp, r7
 80014e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014e4:	4770      	bx	lr

080014e6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80014e6:	b480      	push	{r7}
 80014e8:	b085      	sub	sp, #20
 80014ea:	af00      	add	r7, sp, #0
 80014ec:	6078      	str	r0, [r7, #4]
 80014ee:	460b      	mov	r3, r1
 80014f0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	695b      	ldr	r3, [r3, #20]
 80014f6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80014f8:	887a      	ldrh	r2, [r7, #2]
 80014fa:	68fb      	ldr	r3, [r7, #12]
 80014fc:	4013      	ands	r3, r2
 80014fe:	041a      	lsls	r2, r3, #16
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	43d9      	mvns	r1, r3
 8001504:	887b      	ldrh	r3, [r7, #2]
 8001506:	400b      	ands	r3, r1
 8001508:	431a      	orrs	r2, r3
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	619a      	str	r2, [r3, #24]
}
 800150e:	bf00      	nop
 8001510:	3714      	adds	r7, #20
 8001512:	46bd      	mov	sp, r7
 8001514:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001518:	4770      	bx	lr
	...

0800151c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b082      	sub	sp, #8
 8001520:	af00      	add	r7, sp, #0
 8001522:	4603      	mov	r3, r0
 8001524:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001526:	4b08      	ldr	r3, [pc, #32]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001528:	695a      	ldr	r2, [r3, #20]
 800152a:	88fb      	ldrh	r3, [r7, #6]
 800152c:	4013      	ands	r3, r2
 800152e:	2b00      	cmp	r3, #0
 8001530:	d006      	beq.n	8001540 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001532:	4a05      	ldr	r2, [pc, #20]	@ (8001548 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001534:	88fb      	ldrh	r3, [r7, #6]
 8001536:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001538:	88fb      	ldrh	r3, [r7, #6]
 800153a:	4618      	mov	r0, r3
 800153c:	f7ff fb06 	bl	8000b4c <HAL_GPIO_EXTI_Callback>
  }
}
 8001540:	bf00      	nop
 8001542:	3708      	adds	r7, #8
 8001544:	46bd      	mov	sp, r7
 8001546:	bd80      	pop	{r7, pc}
 8001548:	40013c00 	.word	0x40013c00

0800154c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b082      	sub	sp, #8
 8001550:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8001552:	2300      	movs	r3, #0
 8001554:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b20      	ldr	r3, [pc, #128]	@ (80015dc <HAL_PWREx_EnableOverDrive+0x90>)
 800155c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800155e:	4a1f      	ldr	r2, [pc, #124]	@ (80015dc <HAL_PWREx_EnableOverDrive+0x90>)
 8001560:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001564:	6413      	str	r3, [r2, #64]	@ 0x40
 8001566:	4b1d      	ldr	r3, [pc, #116]	@ (80015dc <HAL_PWREx_EnableOverDrive+0x90>)
 8001568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800156a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8001572:	4b1b      	ldr	r3, [pc, #108]	@ (80015e0 <HAL_PWREx_EnableOverDrive+0x94>)
 8001574:	2201      	movs	r2, #1
 8001576:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001578:	f7ff fcd2 	bl	8000f20 <HAL_GetTick>
 800157c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800157e:	e009      	b.n	8001594 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8001580:	f7ff fcce 	bl	8000f20 <HAL_GetTick>
 8001584:	4602      	mov	r2, r0
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	1ad3      	subs	r3, r2, r3
 800158a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800158e:	d901      	bls.n	8001594 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8001590:	2303      	movs	r3, #3
 8001592:	e01f      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001594:	4b13      	ldr	r3, [pc, #76]	@ (80015e4 <HAL_PWREx_EnableOverDrive+0x98>)
 8001596:	685b      	ldr	r3, [r3, #4]
 8001598:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800159c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80015a0:	d1ee      	bne.n	8001580 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80015a2:	4b11      	ldr	r3, [pc, #68]	@ (80015e8 <HAL_PWREx_EnableOverDrive+0x9c>)
 80015a4:	2201      	movs	r2, #1
 80015a6:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80015a8:	f7ff fcba 	bl	8000f20 <HAL_GetTick>
 80015ac:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015ae:	e009      	b.n	80015c4 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80015b0:	f7ff fcb6 	bl	8000f20 <HAL_GetTick>
 80015b4:	4602      	mov	r2, r0
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	1ad3      	subs	r3, r2, r3
 80015ba:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80015be:	d901      	bls.n	80015c4 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e007      	b.n	80015d4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80015c4:	4b07      	ldr	r3, [pc, #28]	@ (80015e4 <HAL_PWREx_EnableOverDrive+0x98>)
 80015c6:	685b      	ldr	r3, [r3, #4]
 80015c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015cc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80015d0:	d1ee      	bne.n	80015b0 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80015d2:	2300      	movs	r3, #0
}
 80015d4:	4618      	mov	r0, r3
 80015d6:	3708      	adds	r7, #8
 80015d8:	46bd      	mov	sp, r7
 80015da:	bd80      	pop	{r7, pc}
 80015dc:	40023800 	.word	0x40023800
 80015e0:	420e0040 	.word	0x420e0040
 80015e4:	40007000 	.word	0x40007000
 80015e8:	420e0044 	.word	0x420e0044

080015ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80015ec:	b580      	push	{r7, lr}
 80015ee:	b086      	sub	sp, #24
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d101      	bne.n	80015fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80015fa:	2301      	movs	r3, #1
 80015fc:	e267      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	f003 0301 	and.w	r3, r3, #1
 8001606:	2b00      	cmp	r3, #0
 8001608:	d075      	beq.n	80016f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800160a:	4b88      	ldr	r3, [pc, #544]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800160c:	689b      	ldr	r3, [r3, #8]
 800160e:	f003 030c 	and.w	r3, r3, #12
 8001612:	2b04      	cmp	r3, #4
 8001614:	d00c      	beq.n	8001630 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001616:	4b85      	ldr	r3, [pc, #532]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001618:	689b      	ldr	r3, [r3, #8]
 800161a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800161e:	2b08      	cmp	r3, #8
 8001620:	d112      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001622:	4b82      	ldr	r3, [pc, #520]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001624:	685b      	ldr	r3, [r3, #4]
 8001626:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800162a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800162e:	d10b      	bne.n	8001648 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001630:	4b7e      	ldr	r3, [pc, #504]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001638:	2b00      	cmp	r3, #0
 800163a:	d05b      	beq.n	80016f4 <HAL_RCC_OscConfig+0x108>
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685b      	ldr	r3, [r3, #4]
 8001640:	2b00      	cmp	r3, #0
 8001642:	d157      	bne.n	80016f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001644:	2301      	movs	r3, #1
 8001646:	e242      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001648:	687b      	ldr	r3, [r7, #4]
 800164a:	685b      	ldr	r3, [r3, #4]
 800164c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001650:	d106      	bne.n	8001660 <HAL_RCC_OscConfig+0x74>
 8001652:	4b76      	ldr	r3, [pc, #472]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001654:	681b      	ldr	r3, [r3, #0]
 8001656:	4a75      	ldr	r2, [pc, #468]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001658:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800165c:	6013      	str	r3, [r2, #0]
 800165e:	e01d      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	685b      	ldr	r3, [r3, #4]
 8001664:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001668:	d10c      	bne.n	8001684 <HAL_RCC_OscConfig+0x98>
 800166a:	4b70      	ldr	r3, [pc, #448]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800166c:	681b      	ldr	r3, [r3, #0]
 800166e:	4a6f      	ldr	r2, [pc, #444]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001670:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001674:	6013      	str	r3, [r2, #0]
 8001676:	4b6d      	ldr	r3, [pc, #436]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001678:	681b      	ldr	r3, [r3, #0]
 800167a:	4a6c      	ldr	r2, [pc, #432]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800167c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001680:	6013      	str	r3, [r2, #0]
 8001682:	e00b      	b.n	800169c <HAL_RCC_OscConfig+0xb0>
 8001684:	4b69      	ldr	r3, [pc, #420]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	4a68      	ldr	r2, [pc, #416]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800168a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800168e:	6013      	str	r3, [r2, #0]
 8001690:	4b66      	ldr	r3, [pc, #408]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	4a65      	ldr	r2, [pc, #404]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001696:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800169a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	685b      	ldr	r3, [r3, #4]
 80016a0:	2b00      	cmp	r3, #0
 80016a2:	d013      	beq.n	80016cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016a4:	f7ff fc3c 	bl	8000f20 <HAL_GetTick>
 80016a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016aa:	e008      	b.n	80016be <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016ac:	f7ff fc38 	bl	8000f20 <HAL_GetTick>
 80016b0:	4602      	mov	r2, r0
 80016b2:	693b      	ldr	r3, [r7, #16]
 80016b4:	1ad3      	subs	r3, r2, r3
 80016b6:	2b64      	cmp	r3, #100	@ 0x64
 80016b8:	d901      	bls.n	80016be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80016ba:	2303      	movs	r3, #3
 80016bc:	e207      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80016be:	4b5b      	ldr	r3, [pc, #364]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d0f0      	beq.n	80016ac <HAL_RCC_OscConfig+0xc0>
 80016ca:	e014      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016cc:	f7ff fc28 	bl	8000f20 <HAL_GetTick>
 80016d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016d2:	e008      	b.n	80016e6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80016d4:	f7ff fc24 	bl	8000f20 <HAL_GetTick>
 80016d8:	4602      	mov	r2, r0
 80016da:	693b      	ldr	r3, [r7, #16]
 80016dc:	1ad3      	subs	r3, r2, r3
 80016de:	2b64      	cmp	r3, #100	@ 0x64
 80016e0:	d901      	bls.n	80016e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80016e2:	2303      	movs	r3, #3
 80016e4:	e1f3      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80016e6:	4b51      	ldr	r3, [pc, #324]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80016e8:	681b      	ldr	r3, [r3, #0]
 80016ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80016ee:	2b00      	cmp	r3, #0
 80016f0:	d1f0      	bne.n	80016d4 <HAL_RCC_OscConfig+0xe8>
 80016f2:	e000      	b.n	80016f6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	f003 0302 	and.w	r3, r3, #2
 80016fe:	2b00      	cmp	r3, #0
 8001700:	d063      	beq.n	80017ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001702:	4b4a      	ldr	r3, [pc, #296]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001704:	689b      	ldr	r3, [r3, #8]
 8001706:	f003 030c 	and.w	r3, r3, #12
 800170a:	2b00      	cmp	r3, #0
 800170c:	d00b      	beq.n	8001726 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800170e:	4b47      	ldr	r3, [pc, #284]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001710:	689b      	ldr	r3, [r3, #8]
 8001712:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001716:	2b08      	cmp	r3, #8
 8001718:	d11c      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800171a:	4b44      	ldr	r3, [pc, #272]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800171c:	685b      	ldr	r3, [r3, #4]
 800171e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001722:	2b00      	cmp	r3, #0
 8001724:	d116      	bne.n	8001754 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001726:	4b41      	ldr	r3, [pc, #260]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	f003 0302 	and.w	r3, r3, #2
 800172e:	2b00      	cmp	r3, #0
 8001730:	d005      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	68db      	ldr	r3, [r3, #12]
 8001736:	2b01      	cmp	r3, #1
 8001738:	d001      	beq.n	800173e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800173a:	2301      	movs	r3, #1
 800173c:	e1c7      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800173e:	4b3b      	ldr	r3, [pc, #236]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	691b      	ldr	r3, [r3, #16]
 800174a:	00db      	lsls	r3, r3, #3
 800174c:	4937      	ldr	r1, [pc, #220]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800174e:	4313      	orrs	r3, r2
 8001750:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001752:	e03a      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	68db      	ldr	r3, [r3, #12]
 8001758:	2b00      	cmp	r3, #0
 800175a:	d020      	beq.n	800179e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800175c:	4b34      	ldr	r3, [pc, #208]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 800175e:	2201      	movs	r2, #1
 8001760:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001762:	f7ff fbdd 	bl	8000f20 <HAL_GetTick>
 8001766:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001768:	e008      	b.n	800177c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800176a:	f7ff fbd9 	bl	8000f20 <HAL_GetTick>
 800176e:	4602      	mov	r2, r0
 8001770:	693b      	ldr	r3, [r7, #16]
 8001772:	1ad3      	subs	r3, r2, r3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d901      	bls.n	800177c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001778:	2303      	movs	r3, #3
 800177a:	e1a8      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800177c:	4b2b      	ldr	r3, [pc, #172]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f003 0302 	and.w	r3, r3, #2
 8001784:	2b00      	cmp	r3, #0
 8001786:	d0f0      	beq.n	800176a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001788:	4b28      	ldr	r3, [pc, #160]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	691b      	ldr	r3, [r3, #16]
 8001794:	00db      	lsls	r3, r3, #3
 8001796:	4925      	ldr	r1, [pc, #148]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001798:	4313      	orrs	r3, r2
 800179a:	600b      	str	r3, [r1, #0]
 800179c:	e015      	b.n	80017ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800179e:	4b24      	ldr	r3, [pc, #144]	@ (8001830 <HAL_RCC_OscConfig+0x244>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80017a4:	f7ff fbbc 	bl	8000f20 <HAL_GetTick>
 80017a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017aa:	e008      	b.n	80017be <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80017ac:	f7ff fbb8 	bl	8000f20 <HAL_GetTick>
 80017b0:	4602      	mov	r2, r0
 80017b2:	693b      	ldr	r3, [r7, #16]
 80017b4:	1ad3      	subs	r3, r2, r3
 80017b6:	2b02      	cmp	r3, #2
 80017b8:	d901      	bls.n	80017be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80017ba:	2303      	movs	r3, #3
 80017bc:	e187      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80017be:	4b1b      	ldr	r3, [pc, #108]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	f003 0302 	and.w	r3, r3, #2
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d1f0      	bne.n	80017ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	f003 0308 	and.w	r3, r3, #8
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d036      	beq.n	8001844 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	695b      	ldr	r3, [r3, #20]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d016      	beq.n	800180c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80017de:	4b15      	ldr	r3, [pc, #84]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 80017e0:	2201      	movs	r2, #1
 80017e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80017e4:	f7ff fb9c 	bl	8000f20 <HAL_GetTick>
 80017e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017ea:	e008      	b.n	80017fe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80017ec:	f7ff fb98 	bl	8000f20 <HAL_GetTick>
 80017f0:	4602      	mov	r2, r0
 80017f2:	693b      	ldr	r3, [r7, #16]
 80017f4:	1ad3      	subs	r3, r2, r3
 80017f6:	2b02      	cmp	r3, #2
 80017f8:	d901      	bls.n	80017fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80017fa:	2303      	movs	r3, #3
 80017fc:	e167      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80017fe:	4b0b      	ldr	r3, [pc, #44]	@ (800182c <HAL_RCC_OscConfig+0x240>)
 8001800:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001802:	f003 0302 	and.w	r3, r3, #2
 8001806:	2b00      	cmp	r3, #0
 8001808:	d0f0      	beq.n	80017ec <HAL_RCC_OscConfig+0x200>
 800180a:	e01b      	b.n	8001844 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800180c:	4b09      	ldr	r3, [pc, #36]	@ (8001834 <HAL_RCC_OscConfig+0x248>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001812:	f7ff fb85 	bl	8000f20 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001818:	e00e      	b.n	8001838 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800181a:	f7ff fb81 	bl	8000f20 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d907      	bls.n	8001838 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e150      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 800182c:	40023800 	.word	0x40023800
 8001830:	42470000 	.word	0x42470000
 8001834:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001838:	4b88      	ldr	r3, [pc, #544]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800183a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800183c:	f003 0302 	and.w	r3, r3, #2
 8001840:	2b00      	cmp	r3, #0
 8001842:	d1ea      	bne.n	800181a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	681b      	ldr	r3, [r3, #0]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b00      	cmp	r3, #0
 800184e:	f000 8097 	beq.w	8001980 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001852:	2300      	movs	r3, #0
 8001854:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001856:	4b81      	ldr	r3, [pc, #516]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001858:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800185a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800185e:	2b00      	cmp	r3, #0
 8001860:	d10f      	bne.n	8001882 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b7d      	ldr	r3, [pc, #500]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001868:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800186a:	4a7c      	ldr	r2, [pc, #496]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800186c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001870:	6413      	str	r3, [r2, #64]	@ 0x40
 8001872:	4b7a      	ldr	r3, [pc, #488]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001874:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001876:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800187e:	2301      	movs	r3, #1
 8001880:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001882:	4b77      	ldr	r3, [pc, #476]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001884:	681b      	ldr	r3, [r3, #0]
 8001886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800188a:	2b00      	cmp	r3, #0
 800188c:	d118      	bne.n	80018c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800188e:	4b74      	ldr	r3, [pc, #464]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001890:	681b      	ldr	r3, [r3, #0]
 8001892:	4a73      	ldr	r2, [pc, #460]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 8001894:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001898:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800189a:	f7ff fb41 	bl	8000f20 <HAL_GetTick>
 800189e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018a0:	e008      	b.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80018a2:	f7ff fb3d 	bl	8000f20 <HAL_GetTick>
 80018a6:	4602      	mov	r2, r0
 80018a8:	693b      	ldr	r3, [r7, #16]
 80018aa:	1ad3      	subs	r3, r2, r3
 80018ac:	2b02      	cmp	r3, #2
 80018ae:	d901      	bls.n	80018b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80018b0:	2303      	movs	r3, #3
 80018b2:	e10c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80018b4:	4b6a      	ldr	r3, [pc, #424]	@ (8001a60 <HAL_RCC_OscConfig+0x474>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80018bc:	2b00      	cmp	r3, #0
 80018be:	d0f0      	beq.n	80018a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	2b01      	cmp	r3, #1
 80018c6:	d106      	bne.n	80018d6 <HAL_RCC_OscConfig+0x2ea>
 80018c8:	4b64      	ldr	r3, [pc, #400]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018cc:	4a63      	ldr	r2, [pc, #396]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ce:	f043 0301 	orr.w	r3, r3, #1
 80018d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80018d4:	e01c      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	689b      	ldr	r3, [r3, #8]
 80018da:	2b05      	cmp	r3, #5
 80018dc:	d10c      	bne.n	80018f8 <HAL_RCC_OscConfig+0x30c>
 80018de:	4b5f      	ldr	r3, [pc, #380]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018e2:	4a5e      	ldr	r2, [pc, #376]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018e4:	f043 0304 	orr.w	r3, r3, #4
 80018e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80018ea:	4b5c      	ldr	r3, [pc, #368]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018ee:	4a5b      	ldr	r2, [pc, #364]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018f0:	f043 0301 	orr.w	r3, r3, #1
 80018f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80018f6:	e00b      	b.n	8001910 <HAL_RCC_OscConfig+0x324>
 80018f8:	4b58      	ldr	r3, [pc, #352]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80018fc:	4a57      	ldr	r2, [pc, #348]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80018fe:	f023 0301 	bic.w	r3, r3, #1
 8001902:	6713      	str	r3, [r2, #112]	@ 0x70
 8001904:	4b55      	ldr	r3, [pc, #340]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001906:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001908:	4a54      	ldr	r2, [pc, #336]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800190a:	f023 0304 	bic.w	r3, r3, #4
 800190e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001910:	687b      	ldr	r3, [r7, #4]
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	2b00      	cmp	r3, #0
 8001916:	d015      	beq.n	8001944 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001918:	f7ff fb02 	bl	8000f20 <HAL_GetTick>
 800191c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800191e:	e00a      	b.n	8001936 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001920:	f7ff fafe 	bl	8000f20 <HAL_GetTick>
 8001924:	4602      	mov	r2, r0
 8001926:	693b      	ldr	r3, [r7, #16]
 8001928:	1ad3      	subs	r3, r2, r3
 800192a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800192e:	4293      	cmp	r3, r2
 8001930:	d901      	bls.n	8001936 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001932:	2303      	movs	r3, #3
 8001934:	e0cb      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001936:	4b49      	ldr	r3, [pc, #292]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001938:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800193a:	f003 0302 	and.w	r3, r3, #2
 800193e:	2b00      	cmp	r3, #0
 8001940:	d0ee      	beq.n	8001920 <HAL_RCC_OscConfig+0x334>
 8001942:	e014      	b.n	800196e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001944:	f7ff faec 	bl	8000f20 <HAL_GetTick>
 8001948:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800194a:	e00a      	b.n	8001962 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800194c:	f7ff fae8 	bl	8000f20 <HAL_GetTick>
 8001950:	4602      	mov	r2, r0
 8001952:	693b      	ldr	r3, [r7, #16]
 8001954:	1ad3      	subs	r3, r2, r3
 8001956:	f241 3288 	movw	r2, #5000	@ 0x1388
 800195a:	4293      	cmp	r3, r2
 800195c:	d901      	bls.n	8001962 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800195e:	2303      	movs	r3, #3
 8001960:	e0b5      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001962:	4b3e      	ldr	r3, [pc, #248]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001964:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001966:	f003 0302 	and.w	r3, r3, #2
 800196a:	2b00      	cmp	r3, #0
 800196c:	d1ee      	bne.n	800194c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800196e:	7dfb      	ldrb	r3, [r7, #23]
 8001970:	2b01      	cmp	r3, #1
 8001972:	d105      	bne.n	8001980 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001974:	4b39      	ldr	r3, [pc, #228]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001976:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001978:	4a38      	ldr	r2, [pc, #224]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800197a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800197e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	699b      	ldr	r3, [r3, #24]
 8001984:	2b00      	cmp	r3, #0
 8001986:	f000 80a1 	beq.w	8001acc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800198a:	4b34      	ldr	r3, [pc, #208]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 800198c:	689b      	ldr	r3, [r3, #8]
 800198e:	f003 030c 	and.w	r3, r3, #12
 8001992:	2b08      	cmp	r3, #8
 8001994:	d05c      	beq.n	8001a50 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	699b      	ldr	r3, [r3, #24]
 800199a:	2b02      	cmp	r3, #2
 800199c:	d141      	bne.n	8001a22 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800199e:	4b31      	ldr	r3, [pc, #196]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019a0:	2200      	movs	r2, #0
 80019a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019a4:	f7ff fabc 	bl	8000f20 <HAL_GetTick>
 80019a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019aa:	e008      	b.n	80019be <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80019ac:	f7ff fab8 	bl	8000f20 <HAL_GetTick>
 80019b0:	4602      	mov	r2, r0
 80019b2:	693b      	ldr	r3, [r7, #16]
 80019b4:	1ad3      	subs	r3, r2, r3
 80019b6:	2b02      	cmp	r3, #2
 80019b8:	d901      	bls.n	80019be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80019ba:	2303      	movs	r3, #3
 80019bc:	e087      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80019be:	4b27      	ldr	r3, [pc, #156]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019c0:	681b      	ldr	r3, [r3, #0]
 80019c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d1f0      	bne.n	80019ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	69da      	ldr	r2, [r3, #28]
 80019ce:	687b      	ldr	r3, [r7, #4]
 80019d0:	6a1b      	ldr	r3, [r3, #32]
 80019d2:	431a      	orrs	r2, r3
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80019d8:	019b      	lsls	r3, r3, #6
 80019da:	431a      	orrs	r2, r3
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019e0:	085b      	lsrs	r3, r3, #1
 80019e2:	3b01      	subs	r3, #1
 80019e4:	041b      	lsls	r3, r3, #16
 80019e6:	431a      	orrs	r2, r3
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80019ec:	061b      	lsls	r3, r3, #24
 80019ee:	491b      	ldr	r1, [pc, #108]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 80019f0:	4313      	orrs	r3, r2
 80019f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80019f4:	4b1b      	ldr	r3, [pc, #108]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 80019f6:	2201      	movs	r2, #1
 80019f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80019fa:	f7ff fa91 	bl	8000f20 <HAL_GetTick>
 80019fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a00:	e008      	b.n	8001a14 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a02:	f7ff fa8d 	bl	8000f20 <HAL_GetTick>
 8001a06:	4602      	mov	r2, r0
 8001a08:	693b      	ldr	r3, [r7, #16]
 8001a0a:	1ad3      	subs	r3, r2, r3
 8001a0c:	2b02      	cmp	r3, #2
 8001a0e:	d901      	bls.n	8001a14 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001a10:	2303      	movs	r3, #3
 8001a12:	e05c      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001a14:	4b11      	ldr	r3, [pc, #68]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a16:	681b      	ldr	r3, [r3, #0]
 8001a18:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d0f0      	beq.n	8001a02 <HAL_RCC_OscConfig+0x416>
 8001a20:	e054      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a22:	4b10      	ldr	r3, [pc, #64]	@ (8001a64 <HAL_RCC_OscConfig+0x478>)
 8001a24:	2200      	movs	r2, #0
 8001a26:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001a28:	f7ff fa7a 	bl	8000f20 <HAL_GetTick>
 8001a2c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a2e:	e008      	b.n	8001a42 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a30:	f7ff fa76 	bl	8000f20 <HAL_GetTick>
 8001a34:	4602      	mov	r2, r0
 8001a36:	693b      	ldr	r3, [r7, #16]
 8001a38:	1ad3      	subs	r3, r2, r3
 8001a3a:	2b02      	cmp	r3, #2
 8001a3c:	d901      	bls.n	8001a42 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001a3e:	2303      	movs	r3, #3
 8001a40:	e045      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a42:	4b06      	ldr	r3, [pc, #24]	@ (8001a5c <HAL_RCC_OscConfig+0x470>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d1f0      	bne.n	8001a30 <HAL_RCC_OscConfig+0x444>
 8001a4e:	e03d      	b.n	8001acc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	699b      	ldr	r3, [r3, #24]
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d107      	bne.n	8001a68 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e038      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
 8001a5c:	40023800 	.word	0x40023800
 8001a60:	40007000 	.word	0x40007000
 8001a64:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001a68:	4b1b      	ldr	r3, [pc, #108]	@ (8001ad8 <HAL_RCC_OscConfig+0x4ec>)
 8001a6a:	685b      	ldr	r3, [r3, #4]
 8001a6c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	699b      	ldr	r3, [r3, #24]
 8001a72:	2b01      	cmp	r3, #1
 8001a74:	d028      	beq.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001a80:	429a      	cmp	r2, r3
 8001a82:	d121      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d11a      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001a92:	68fa      	ldr	r2, [r7, #12]
 8001a94:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001a98:	4013      	ands	r3, r2
 8001a9a:	687a      	ldr	r2, [r7, #4]
 8001a9c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001a9e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001aa0:	4293      	cmp	r3, r2
 8001aa2:	d111      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001aa4:	68fb      	ldr	r3, [r7, #12]
 8001aa6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001aae:	085b      	lsrs	r3, r3, #1
 8001ab0:	3b01      	subs	r3, #1
 8001ab2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ab4:	429a      	cmp	r2, r3
 8001ab6:	d107      	bne.n	8001ac8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ac2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001ac4:	429a      	cmp	r2, r3
 8001ac6:	d001      	beq.n	8001acc <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001ac8:	2301      	movs	r3, #1
 8001aca:	e000      	b.n	8001ace <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	40023800 	.word	0x40023800

08001adc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	b084      	sub	sp, #16
 8001ae0:	af00      	add	r7, sp, #0
 8001ae2:	6078      	str	r0, [r7, #4]
 8001ae4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d101      	bne.n	8001af0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001aec:	2301      	movs	r3, #1
 8001aee:	e0cc      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001af0:	4b68      	ldr	r3, [pc, #416]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001af2:	681b      	ldr	r3, [r3, #0]
 8001af4:	f003 030f 	and.w	r3, r3, #15
 8001af8:	683a      	ldr	r2, [r7, #0]
 8001afa:	429a      	cmp	r2, r3
 8001afc:	d90c      	bls.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001afe:	4b65      	ldr	r3, [pc, #404]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b00:	683a      	ldr	r2, [r7, #0]
 8001b02:	b2d2      	uxtb	r2, r2
 8001b04:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001b06:	4b63      	ldr	r3, [pc, #396]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	f003 030f 	and.w	r3, r3, #15
 8001b0e:	683a      	ldr	r2, [r7, #0]
 8001b10:	429a      	cmp	r2, r3
 8001b12:	d001      	beq.n	8001b18 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001b14:	2301      	movs	r3, #1
 8001b16:	e0b8      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	681b      	ldr	r3, [r3, #0]
 8001b1c:	f003 0302 	and.w	r3, r3, #2
 8001b20:	2b00      	cmp	r3, #0
 8001b22:	d020      	beq.n	8001b66 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	f003 0304 	and.w	r3, r3, #4
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d005      	beq.n	8001b3c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001b30:	4b59      	ldr	r3, [pc, #356]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b32:	689b      	ldr	r3, [r3, #8]
 8001b34:	4a58      	ldr	r2, [pc, #352]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b36:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001b3a:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	681b      	ldr	r3, [r3, #0]
 8001b40:	f003 0308 	and.w	r3, r3, #8
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	d005      	beq.n	8001b54 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001b48:	4b53      	ldr	r3, [pc, #332]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4a:	689b      	ldr	r3, [r3, #8]
 8001b4c:	4a52      	ldr	r2, [pc, #328]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b4e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001b52:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001b54:	4b50      	ldr	r3, [pc, #320]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b56:	689b      	ldr	r3, [r3, #8]
 8001b58:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001b5c:	687b      	ldr	r3, [r7, #4]
 8001b5e:	689b      	ldr	r3, [r3, #8]
 8001b60:	494d      	ldr	r1, [pc, #308]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b62:	4313      	orrs	r3, r2
 8001b64:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d044      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	685b      	ldr	r3, [r3, #4]
 8001b76:	2b01      	cmp	r3, #1
 8001b78:	d107      	bne.n	8001b8a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001b7a:	4b47      	ldr	r3, [pc, #284]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d119      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001b86:	2301      	movs	r3, #1
 8001b88:	e07f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	2b02      	cmp	r3, #2
 8001b90:	d003      	beq.n	8001b9a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001b96:	2b03      	cmp	r3, #3
 8001b98:	d107      	bne.n	8001baa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001b9a:	4b3f      	ldr	r3, [pc, #252]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001b9c:	681b      	ldr	r3, [r3, #0]
 8001b9e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ba2:	2b00      	cmp	r3, #0
 8001ba4:	d109      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001ba6:	2301      	movs	r3, #1
 8001ba8:	e06f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001baa:	4b3b      	ldr	r3, [pc, #236]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 0302 	and.w	r3, r3, #2
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d101      	bne.n	8001bba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	e067      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001bba:	4b37      	ldr	r3, [pc, #220]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f023 0203 	bic.w	r2, r3, #3
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	685b      	ldr	r3, [r3, #4]
 8001bc6:	4934      	ldr	r1, [pc, #208]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bc8:	4313      	orrs	r3, r2
 8001bca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001bcc:	f7ff f9a8 	bl	8000f20 <HAL_GetTick>
 8001bd0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bd2:	e00a      	b.n	8001bea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001bd4:	f7ff f9a4 	bl	8000f20 <HAL_GetTick>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	1ad3      	subs	r3, r2, r3
 8001bde:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001be2:	4293      	cmp	r3, r2
 8001be4:	d901      	bls.n	8001bea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001be6:	2303      	movs	r3, #3
 8001be8:	e04f      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001bea:	4b2b      	ldr	r3, [pc, #172]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001bec:	689b      	ldr	r3, [r3, #8]
 8001bee:	f003 020c 	and.w	r2, r3, #12
 8001bf2:	687b      	ldr	r3, [r7, #4]
 8001bf4:	685b      	ldr	r3, [r3, #4]
 8001bf6:	009b      	lsls	r3, r3, #2
 8001bf8:	429a      	cmp	r2, r3
 8001bfa:	d1eb      	bne.n	8001bd4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001bfc:	4b25      	ldr	r3, [pc, #148]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 030f 	and.w	r3, r3, #15
 8001c04:	683a      	ldr	r2, [r7, #0]
 8001c06:	429a      	cmp	r2, r3
 8001c08:	d20c      	bcs.n	8001c24 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001c0a:	4b22      	ldr	r3, [pc, #136]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c0c:	683a      	ldr	r2, [r7, #0]
 8001c0e:	b2d2      	uxtb	r2, r2
 8001c10:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001c12:	4b20      	ldr	r3, [pc, #128]	@ (8001c94 <HAL_RCC_ClockConfig+0x1b8>)
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	f003 030f 	and.w	r3, r3, #15
 8001c1a:	683a      	ldr	r2, [r7, #0]
 8001c1c:	429a      	cmp	r2, r3
 8001c1e:	d001      	beq.n	8001c24 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001c20:	2301      	movs	r3, #1
 8001c22:	e032      	b.n	8001c8a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	f003 0304 	and.w	r3, r3, #4
 8001c2c:	2b00      	cmp	r3, #0
 8001c2e:	d008      	beq.n	8001c42 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001c30:	4b19      	ldr	r3, [pc, #100]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c32:	689b      	ldr	r3, [r3, #8]
 8001c34:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	4916      	ldr	r1, [pc, #88]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c3e:	4313      	orrs	r3, r2
 8001c40:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	681b      	ldr	r3, [r3, #0]
 8001c46:	f003 0308 	and.w	r3, r3, #8
 8001c4a:	2b00      	cmp	r3, #0
 8001c4c:	d009      	beq.n	8001c62 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001c4e:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	691b      	ldr	r3, [r3, #16]
 8001c5a:	00db      	lsls	r3, r3, #3
 8001c5c:	490e      	ldr	r1, [pc, #56]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c5e:	4313      	orrs	r3, r2
 8001c60:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001c62:	f000 f821 	bl	8001ca8 <HAL_RCC_GetSysClockFreq>
 8001c66:	4602      	mov	r2, r0
 8001c68:	4b0b      	ldr	r3, [pc, #44]	@ (8001c98 <HAL_RCC_ClockConfig+0x1bc>)
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	091b      	lsrs	r3, r3, #4
 8001c6e:	f003 030f 	and.w	r3, r3, #15
 8001c72:	490a      	ldr	r1, [pc, #40]	@ (8001c9c <HAL_RCC_ClockConfig+0x1c0>)
 8001c74:	5ccb      	ldrb	r3, [r1, r3]
 8001c76:	fa22 f303 	lsr.w	r3, r2, r3
 8001c7a:	4a09      	ldr	r2, [pc, #36]	@ (8001ca0 <HAL_RCC_ClockConfig+0x1c4>)
 8001c7c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001c7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ca4 <HAL_RCC_ClockConfig+0x1c8>)
 8001c80:	681b      	ldr	r3, [r3, #0]
 8001c82:	4618      	mov	r0, r3
 8001c84:	f7ff f908 	bl	8000e98 <HAL_InitTick>

  return HAL_OK;
 8001c88:	2300      	movs	r3, #0
}
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	3710      	adds	r7, #16
 8001c8e:	46bd      	mov	sp, r7
 8001c90:	bd80      	pop	{r7, pc}
 8001c92:	bf00      	nop
 8001c94:	40023c00 	.word	0x40023c00
 8001c98:	40023800 	.word	0x40023800
 8001c9c:	08002878 	.word	0x08002878
 8001ca0:	20000000 	.word	0x20000000
 8001ca4:	20000004 	.word	0x20000004

08001ca8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ca8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001cac:	b094      	sub	sp, #80	@ 0x50
 8001cae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001cb4:	2300      	movs	r3, #0
 8001cb6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001cb8:	2300      	movs	r3, #0
 8001cba:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001cbc:	2300      	movs	r3, #0
 8001cbe:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001cc0:	4b79      	ldr	r3, [pc, #484]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cc2:	689b      	ldr	r3, [r3, #8]
 8001cc4:	f003 030c 	and.w	r3, r3, #12
 8001cc8:	2b08      	cmp	r3, #8
 8001cca:	d00d      	beq.n	8001ce8 <HAL_RCC_GetSysClockFreq+0x40>
 8001ccc:	2b08      	cmp	r3, #8
 8001cce:	f200 80e1 	bhi.w	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d002      	beq.n	8001cdc <HAL_RCC_GetSysClockFreq+0x34>
 8001cd6:	2b04      	cmp	r3, #4
 8001cd8:	d003      	beq.n	8001ce2 <HAL_RCC_GetSysClockFreq+0x3a>
 8001cda:	e0db      	b.n	8001e94 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001cdc:	4b73      	ldr	r3, [pc, #460]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001cde:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce0:	e0db      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ce2:	4b73      	ldr	r3, [pc, #460]	@ (8001eb0 <HAL_RCC_GetSysClockFreq+0x208>)
 8001ce4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ce6:	e0d8      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ce8:	4b6f      	ldr	r3, [pc, #444]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001cf0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001cf2:	4b6d      	ldr	r3, [pc, #436]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001cf4:	685b      	ldr	r3, [r3, #4]
 8001cf6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d063      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001cfe:	4b6a      	ldr	r3, [pc, #424]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001d00:	685b      	ldr	r3, [r3, #4]
 8001d02:	099b      	lsrs	r3, r3, #6
 8001d04:	2200      	movs	r2, #0
 8001d06:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001d08:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001d0c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001d10:	633b      	str	r3, [r7, #48]	@ 0x30
 8001d12:	2300      	movs	r3, #0
 8001d14:	637b      	str	r3, [r7, #52]	@ 0x34
 8001d16:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001d1a:	4622      	mov	r2, r4
 8001d1c:	462b      	mov	r3, r5
 8001d1e:	f04f 0000 	mov.w	r0, #0
 8001d22:	f04f 0100 	mov.w	r1, #0
 8001d26:	0159      	lsls	r1, r3, #5
 8001d28:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001d2c:	0150      	lsls	r0, r2, #5
 8001d2e:	4602      	mov	r2, r0
 8001d30:	460b      	mov	r3, r1
 8001d32:	4621      	mov	r1, r4
 8001d34:	1a51      	subs	r1, r2, r1
 8001d36:	6139      	str	r1, [r7, #16]
 8001d38:	4629      	mov	r1, r5
 8001d3a:	eb63 0301 	sbc.w	r3, r3, r1
 8001d3e:	617b      	str	r3, [r7, #20]
 8001d40:	f04f 0200 	mov.w	r2, #0
 8001d44:	f04f 0300 	mov.w	r3, #0
 8001d48:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001d4c:	4659      	mov	r1, fp
 8001d4e:	018b      	lsls	r3, r1, #6
 8001d50:	4651      	mov	r1, sl
 8001d52:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001d56:	4651      	mov	r1, sl
 8001d58:	018a      	lsls	r2, r1, #6
 8001d5a:	4651      	mov	r1, sl
 8001d5c:	ebb2 0801 	subs.w	r8, r2, r1
 8001d60:	4659      	mov	r1, fp
 8001d62:	eb63 0901 	sbc.w	r9, r3, r1
 8001d66:	f04f 0200 	mov.w	r2, #0
 8001d6a:	f04f 0300 	mov.w	r3, #0
 8001d6e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001d72:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001d76:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001d7a:	4690      	mov	r8, r2
 8001d7c:	4699      	mov	r9, r3
 8001d7e:	4623      	mov	r3, r4
 8001d80:	eb18 0303 	adds.w	r3, r8, r3
 8001d84:	60bb      	str	r3, [r7, #8]
 8001d86:	462b      	mov	r3, r5
 8001d88:	eb49 0303 	adc.w	r3, r9, r3
 8001d8c:	60fb      	str	r3, [r7, #12]
 8001d8e:	f04f 0200 	mov.w	r2, #0
 8001d92:	f04f 0300 	mov.w	r3, #0
 8001d96:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001d9a:	4629      	mov	r1, r5
 8001d9c:	024b      	lsls	r3, r1, #9
 8001d9e:	4621      	mov	r1, r4
 8001da0:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001da4:	4621      	mov	r1, r4
 8001da6:	024a      	lsls	r2, r1, #9
 8001da8:	4610      	mov	r0, r2
 8001daa:	4619      	mov	r1, r3
 8001dac:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001dae:	2200      	movs	r2, #0
 8001db0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001db2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001db4:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001db8:	f7fe fa18 	bl	80001ec <__aeabi_uldivmod>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	460b      	mov	r3, r1
 8001dc0:	4613      	mov	r3, r2
 8001dc2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001dc4:	e058      	b.n	8001e78 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001dc6:	4b38      	ldr	r3, [pc, #224]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001dc8:	685b      	ldr	r3, [r3, #4]
 8001dca:	099b      	lsrs	r3, r3, #6
 8001dcc:	2200      	movs	r2, #0
 8001dce:	4618      	mov	r0, r3
 8001dd0:	4611      	mov	r1, r2
 8001dd2:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001dd6:	623b      	str	r3, [r7, #32]
 8001dd8:	2300      	movs	r3, #0
 8001dda:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ddc:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001de0:	4642      	mov	r2, r8
 8001de2:	464b      	mov	r3, r9
 8001de4:	f04f 0000 	mov.w	r0, #0
 8001de8:	f04f 0100 	mov.w	r1, #0
 8001dec:	0159      	lsls	r1, r3, #5
 8001dee:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001df2:	0150      	lsls	r0, r2, #5
 8001df4:	4602      	mov	r2, r0
 8001df6:	460b      	mov	r3, r1
 8001df8:	4641      	mov	r1, r8
 8001dfa:	ebb2 0a01 	subs.w	sl, r2, r1
 8001dfe:	4649      	mov	r1, r9
 8001e00:	eb63 0b01 	sbc.w	fp, r3, r1
 8001e04:	f04f 0200 	mov.w	r2, #0
 8001e08:	f04f 0300 	mov.w	r3, #0
 8001e0c:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001e10:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001e14:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001e18:	ebb2 040a 	subs.w	r4, r2, sl
 8001e1c:	eb63 050b 	sbc.w	r5, r3, fp
 8001e20:	f04f 0200 	mov.w	r2, #0
 8001e24:	f04f 0300 	mov.w	r3, #0
 8001e28:	00eb      	lsls	r3, r5, #3
 8001e2a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001e2e:	00e2      	lsls	r2, r4, #3
 8001e30:	4614      	mov	r4, r2
 8001e32:	461d      	mov	r5, r3
 8001e34:	4643      	mov	r3, r8
 8001e36:	18e3      	adds	r3, r4, r3
 8001e38:	603b      	str	r3, [r7, #0]
 8001e3a:	464b      	mov	r3, r9
 8001e3c:	eb45 0303 	adc.w	r3, r5, r3
 8001e40:	607b      	str	r3, [r7, #4]
 8001e42:	f04f 0200 	mov.w	r2, #0
 8001e46:	f04f 0300 	mov.w	r3, #0
 8001e4a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001e4e:	4629      	mov	r1, r5
 8001e50:	028b      	lsls	r3, r1, #10
 8001e52:	4621      	mov	r1, r4
 8001e54:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001e58:	4621      	mov	r1, r4
 8001e5a:	028a      	lsls	r2, r1, #10
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001e62:	2200      	movs	r2, #0
 8001e64:	61bb      	str	r3, [r7, #24]
 8001e66:	61fa      	str	r2, [r7, #28]
 8001e68:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001e6c:	f7fe f9be 	bl	80001ec <__aeabi_uldivmod>
 8001e70:	4602      	mov	r2, r0
 8001e72:	460b      	mov	r3, r1
 8001e74:	4613      	mov	r3, r2
 8001e76:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001e78:	4b0b      	ldr	r3, [pc, #44]	@ (8001ea8 <HAL_RCC_GetSysClockFreq+0x200>)
 8001e7a:	685b      	ldr	r3, [r3, #4]
 8001e7c:	0c1b      	lsrs	r3, r3, #16
 8001e7e:	f003 0303 	and.w	r3, r3, #3
 8001e82:	3301      	adds	r3, #1
 8001e84:	005b      	lsls	r3, r3, #1
 8001e86:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001e88:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001e8a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001e8c:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e90:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e92:	e002      	b.n	8001e9a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001e94:	4b05      	ldr	r3, [pc, #20]	@ (8001eac <HAL_RCC_GetSysClockFreq+0x204>)
 8001e96:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001e98:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001e9a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	3750      	adds	r7, #80	@ 0x50
 8001ea0:	46bd      	mov	sp, r7
 8001ea2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001ea6:	bf00      	nop
 8001ea8:	40023800 	.word	0x40023800
 8001eac:	00f42400 	.word	0x00f42400
 8001eb0:	007a1200 	.word	0x007a1200

08001eb4 <std>:
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	b510      	push	{r4, lr}
 8001eb8:	4604      	mov	r4, r0
 8001eba:	e9c0 3300 	strd	r3, r3, [r0]
 8001ebe:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8001ec2:	6083      	str	r3, [r0, #8]
 8001ec4:	8181      	strh	r1, [r0, #12]
 8001ec6:	6643      	str	r3, [r0, #100]	@ 0x64
 8001ec8:	81c2      	strh	r2, [r0, #14]
 8001eca:	6183      	str	r3, [r0, #24]
 8001ecc:	4619      	mov	r1, r3
 8001ece:	2208      	movs	r2, #8
 8001ed0:	305c      	adds	r0, #92	@ 0x5c
 8001ed2:	f000 f9e7 	bl	80022a4 <memset>
 8001ed6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f0c <std+0x58>)
 8001ed8:	6263      	str	r3, [r4, #36]	@ 0x24
 8001eda:	4b0d      	ldr	r3, [pc, #52]	@ (8001f10 <std+0x5c>)
 8001edc:	62a3      	str	r3, [r4, #40]	@ 0x28
 8001ede:	4b0d      	ldr	r3, [pc, #52]	@ (8001f14 <std+0x60>)
 8001ee0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8001ee2:	4b0d      	ldr	r3, [pc, #52]	@ (8001f18 <std+0x64>)
 8001ee4:	6323      	str	r3, [r4, #48]	@ 0x30
 8001ee6:	4b0d      	ldr	r3, [pc, #52]	@ (8001f1c <std+0x68>)
 8001ee8:	6224      	str	r4, [r4, #32]
 8001eea:	429c      	cmp	r4, r3
 8001eec:	d006      	beq.n	8001efc <std+0x48>
 8001eee:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8001ef2:	4294      	cmp	r4, r2
 8001ef4:	d002      	beq.n	8001efc <std+0x48>
 8001ef6:	33d0      	adds	r3, #208	@ 0xd0
 8001ef8:	429c      	cmp	r4, r3
 8001efa:	d105      	bne.n	8001f08 <std+0x54>
 8001efc:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8001f00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f04:	f000 ba46 	b.w	8002394 <__retarget_lock_init_recursive>
 8001f08:	bd10      	pop	{r4, pc}
 8001f0a:	bf00      	nop
 8001f0c:	080020f5 	.word	0x080020f5
 8001f10:	08002117 	.word	0x08002117
 8001f14:	0800214f 	.word	0x0800214f
 8001f18:	08002173 	.word	0x08002173
 8001f1c:	2000008c 	.word	0x2000008c

08001f20 <stdio_exit_handler>:
 8001f20:	4a02      	ldr	r2, [pc, #8]	@ (8001f2c <stdio_exit_handler+0xc>)
 8001f22:	4903      	ldr	r1, [pc, #12]	@ (8001f30 <stdio_exit_handler+0x10>)
 8001f24:	4803      	ldr	r0, [pc, #12]	@ (8001f34 <stdio_exit_handler+0x14>)
 8001f26:	f000 b869 	b.w	8001ffc <_fwalk_sglue>
 8001f2a:	bf00      	nop
 8001f2c:	2000000c 	.word	0x2000000c
 8001f30:	08002695 	.word	0x08002695
 8001f34:	2000001c 	.word	0x2000001c

08001f38 <cleanup_stdio>:
 8001f38:	6841      	ldr	r1, [r0, #4]
 8001f3a:	4b0c      	ldr	r3, [pc, #48]	@ (8001f6c <cleanup_stdio+0x34>)
 8001f3c:	4299      	cmp	r1, r3
 8001f3e:	b510      	push	{r4, lr}
 8001f40:	4604      	mov	r4, r0
 8001f42:	d001      	beq.n	8001f48 <cleanup_stdio+0x10>
 8001f44:	f000 fba6 	bl	8002694 <_fflush_r>
 8001f48:	68a1      	ldr	r1, [r4, #8]
 8001f4a:	4b09      	ldr	r3, [pc, #36]	@ (8001f70 <cleanup_stdio+0x38>)
 8001f4c:	4299      	cmp	r1, r3
 8001f4e:	d002      	beq.n	8001f56 <cleanup_stdio+0x1e>
 8001f50:	4620      	mov	r0, r4
 8001f52:	f000 fb9f 	bl	8002694 <_fflush_r>
 8001f56:	68e1      	ldr	r1, [r4, #12]
 8001f58:	4b06      	ldr	r3, [pc, #24]	@ (8001f74 <cleanup_stdio+0x3c>)
 8001f5a:	4299      	cmp	r1, r3
 8001f5c:	d004      	beq.n	8001f68 <cleanup_stdio+0x30>
 8001f5e:	4620      	mov	r0, r4
 8001f60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001f64:	f000 bb96 	b.w	8002694 <_fflush_r>
 8001f68:	bd10      	pop	{r4, pc}
 8001f6a:	bf00      	nop
 8001f6c:	2000008c 	.word	0x2000008c
 8001f70:	200000f4 	.word	0x200000f4
 8001f74:	2000015c 	.word	0x2000015c

08001f78 <global_stdio_init.part.0>:
 8001f78:	b510      	push	{r4, lr}
 8001f7a:	4b0b      	ldr	r3, [pc, #44]	@ (8001fa8 <global_stdio_init.part.0+0x30>)
 8001f7c:	4c0b      	ldr	r4, [pc, #44]	@ (8001fac <global_stdio_init.part.0+0x34>)
 8001f7e:	4a0c      	ldr	r2, [pc, #48]	@ (8001fb0 <global_stdio_init.part.0+0x38>)
 8001f80:	601a      	str	r2, [r3, #0]
 8001f82:	4620      	mov	r0, r4
 8001f84:	2200      	movs	r2, #0
 8001f86:	2104      	movs	r1, #4
 8001f88:	f7ff ff94 	bl	8001eb4 <std>
 8001f8c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8001f90:	2201      	movs	r2, #1
 8001f92:	2109      	movs	r1, #9
 8001f94:	f7ff ff8e 	bl	8001eb4 <std>
 8001f98:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8001f9c:	2202      	movs	r2, #2
 8001f9e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fa2:	2112      	movs	r1, #18
 8001fa4:	f7ff bf86 	b.w	8001eb4 <std>
 8001fa8:	200001c4 	.word	0x200001c4
 8001fac:	2000008c 	.word	0x2000008c
 8001fb0:	08001f21 	.word	0x08001f21

08001fb4 <__sfp_lock_acquire>:
 8001fb4:	4801      	ldr	r0, [pc, #4]	@ (8001fbc <__sfp_lock_acquire+0x8>)
 8001fb6:	f000 b9ee 	b.w	8002396 <__retarget_lock_acquire_recursive>
 8001fba:	bf00      	nop
 8001fbc:	200001cd 	.word	0x200001cd

08001fc0 <__sfp_lock_release>:
 8001fc0:	4801      	ldr	r0, [pc, #4]	@ (8001fc8 <__sfp_lock_release+0x8>)
 8001fc2:	f000 b9e9 	b.w	8002398 <__retarget_lock_release_recursive>
 8001fc6:	bf00      	nop
 8001fc8:	200001cd 	.word	0x200001cd

08001fcc <__sinit>:
 8001fcc:	b510      	push	{r4, lr}
 8001fce:	4604      	mov	r4, r0
 8001fd0:	f7ff fff0 	bl	8001fb4 <__sfp_lock_acquire>
 8001fd4:	6a23      	ldr	r3, [r4, #32]
 8001fd6:	b11b      	cbz	r3, 8001fe0 <__sinit+0x14>
 8001fd8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8001fdc:	f7ff bff0 	b.w	8001fc0 <__sfp_lock_release>
 8001fe0:	4b04      	ldr	r3, [pc, #16]	@ (8001ff4 <__sinit+0x28>)
 8001fe2:	6223      	str	r3, [r4, #32]
 8001fe4:	4b04      	ldr	r3, [pc, #16]	@ (8001ff8 <__sinit+0x2c>)
 8001fe6:	681b      	ldr	r3, [r3, #0]
 8001fe8:	2b00      	cmp	r3, #0
 8001fea:	d1f5      	bne.n	8001fd8 <__sinit+0xc>
 8001fec:	f7ff ffc4 	bl	8001f78 <global_stdio_init.part.0>
 8001ff0:	e7f2      	b.n	8001fd8 <__sinit+0xc>
 8001ff2:	bf00      	nop
 8001ff4:	08001f39 	.word	0x08001f39
 8001ff8:	200001c4 	.word	0x200001c4

08001ffc <_fwalk_sglue>:
 8001ffc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002000:	4607      	mov	r7, r0
 8002002:	4688      	mov	r8, r1
 8002004:	4614      	mov	r4, r2
 8002006:	2600      	movs	r6, #0
 8002008:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800200c:	f1b9 0901 	subs.w	r9, r9, #1
 8002010:	d505      	bpl.n	800201e <_fwalk_sglue+0x22>
 8002012:	6824      	ldr	r4, [r4, #0]
 8002014:	2c00      	cmp	r4, #0
 8002016:	d1f7      	bne.n	8002008 <_fwalk_sglue+0xc>
 8002018:	4630      	mov	r0, r6
 800201a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800201e:	89ab      	ldrh	r3, [r5, #12]
 8002020:	2b01      	cmp	r3, #1
 8002022:	d907      	bls.n	8002034 <_fwalk_sglue+0x38>
 8002024:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002028:	3301      	adds	r3, #1
 800202a:	d003      	beq.n	8002034 <_fwalk_sglue+0x38>
 800202c:	4629      	mov	r1, r5
 800202e:	4638      	mov	r0, r7
 8002030:	47c0      	blx	r8
 8002032:	4306      	orrs	r6, r0
 8002034:	3568      	adds	r5, #104	@ 0x68
 8002036:	e7e9      	b.n	800200c <_fwalk_sglue+0x10>

08002038 <_puts_r>:
 8002038:	6a03      	ldr	r3, [r0, #32]
 800203a:	b570      	push	{r4, r5, r6, lr}
 800203c:	6884      	ldr	r4, [r0, #8]
 800203e:	4605      	mov	r5, r0
 8002040:	460e      	mov	r6, r1
 8002042:	b90b      	cbnz	r3, 8002048 <_puts_r+0x10>
 8002044:	f7ff ffc2 	bl	8001fcc <__sinit>
 8002048:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800204a:	07db      	lsls	r3, r3, #31
 800204c:	d405      	bmi.n	800205a <_puts_r+0x22>
 800204e:	89a3      	ldrh	r3, [r4, #12]
 8002050:	0598      	lsls	r0, r3, #22
 8002052:	d402      	bmi.n	800205a <_puts_r+0x22>
 8002054:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002056:	f000 f99e 	bl	8002396 <__retarget_lock_acquire_recursive>
 800205a:	89a3      	ldrh	r3, [r4, #12]
 800205c:	0719      	lsls	r1, r3, #28
 800205e:	d502      	bpl.n	8002066 <_puts_r+0x2e>
 8002060:	6923      	ldr	r3, [r4, #16]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d135      	bne.n	80020d2 <_puts_r+0x9a>
 8002066:	4621      	mov	r1, r4
 8002068:	4628      	mov	r0, r5
 800206a:	f000 f8c5 	bl	80021f8 <__swsetup_r>
 800206e:	b380      	cbz	r0, 80020d2 <_puts_r+0x9a>
 8002070:	f04f 35ff 	mov.w	r5, #4294967295
 8002074:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002076:	07da      	lsls	r2, r3, #31
 8002078:	d405      	bmi.n	8002086 <_puts_r+0x4e>
 800207a:	89a3      	ldrh	r3, [r4, #12]
 800207c:	059b      	lsls	r3, r3, #22
 800207e:	d402      	bmi.n	8002086 <_puts_r+0x4e>
 8002080:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002082:	f000 f989 	bl	8002398 <__retarget_lock_release_recursive>
 8002086:	4628      	mov	r0, r5
 8002088:	bd70      	pop	{r4, r5, r6, pc}
 800208a:	2b00      	cmp	r3, #0
 800208c:	da04      	bge.n	8002098 <_puts_r+0x60>
 800208e:	69a2      	ldr	r2, [r4, #24]
 8002090:	429a      	cmp	r2, r3
 8002092:	dc17      	bgt.n	80020c4 <_puts_r+0x8c>
 8002094:	290a      	cmp	r1, #10
 8002096:	d015      	beq.n	80020c4 <_puts_r+0x8c>
 8002098:	6823      	ldr	r3, [r4, #0]
 800209a:	1c5a      	adds	r2, r3, #1
 800209c:	6022      	str	r2, [r4, #0]
 800209e:	7019      	strb	r1, [r3, #0]
 80020a0:	68a3      	ldr	r3, [r4, #8]
 80020a2:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80020a6:	3b01      	subs	r3, #1
 80020a8:	60a3      	str	r3, [r4, #8]
 80020aa:	2900      	cmp	r1, #0
 80020ac:	d1ed      	bne.n	800208a <_puts_r+0x52>
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	da11      	bge.n	80020d6 <_puts_r+0x9e>
 80020b2:	4622      	mov	r2, r4
 80020b4:	210a      	movs	r1, #10
 80020b6:	4628      	mov	r0, r5
 80020b8:	f000 f85f 	bl	800217a <__swbuf_r>
 80020bc:	3001      	adds	r0, #1
 80020be:	d0d7      	beq.n	8002070 <_puts_r+0x38>
 80020c0:	250a      	movs	r5, #10
 80020c2:	e7d7      	b.n	8002074 <_puts_r+0x3c>
 80020c4:	4622      	mov	r2, r4
 80020c6:	4628      	mov	r0, r5
 80020c8:	f000 f857 	bl	800217a <__swbuf_r>
 80020cc:	3001      	adds	r0, #1
 80020ce:	d1e7      	bne.n	80020a0 <_puts_r+0x68>
 80020d0:	e7ce      	b.n	8002070 <_puts_r+0x38>
 80020d2:	3e01      	subs	r6, #1
 80020d4:	e7e4      	b.n	80020a0 <_puts_r+0x68>
 80020d6:	6823      	ldr	r3, [r4, #0]
 80020d8:	1c5a      	adds	r2, r3, #1
 80020da:	6022      	str	r2, [r4, #0]
 80020dc:	220a      	movs	r2, #10
 80020de:	701a      	strb	r2, [r3, #0]
 80020e0:	e7ee      	b.n	80020c0 <_puts_r+0x88>
	...

080020e4 <puts>:
 80020e4:	4b02      	ldr	r3, [pc, #8]	@ (80020f0 <puts+0xc>)
 80020e6:	4601      	mov	r1, r0
 80020e8:	6818      	ldr	r0, [r3, #0]
 80020ea:	f7ff bfa5 	b.w	8002038 <_puts_r>
 80020ee:	bf00      	nop
 80020f0:	20000018 	.word	0x20000018

080020f4 <__sread>:
 80020f4:	b510      	push	{r4, lr}
 80020f6:	460c      	mov	r4, r1
 80020f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80020fc:	f000 f8fc 	bl	80022f8 <_read_r>
 8002100:	2800      	cmp	r0, #0
 8002102:	bfab      	itete	ge
 8002104:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002106:	89a3      	ldrhlt	r3, [r4, #12]
 8002108:	181b      	addge	r3, r3, r0
 800210a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800210e:	bfac      	ite	ge
 8002110:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002112:	81a3      	strhlt	r3, [r4, #12]
 8002114:	bd10      	pop	{r4, pc}

08002116 <__swrite>:
 8002116:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800211a:	461f      	mov	r7, r3
 800211c:	898b      	ldrh	r3, [r1, #12]
 800211e:	05db      	lsls	r3, r3, #23
 8002120:	4605      	mov	r5, r0
 8002122:	460c      	mov	r4, r1
 8002124:	4616      	mov	r6, r2
 8002126:	d505      	bpl.n	8002134 <__swrite+0x1e>
 8002128:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800212c:	2302      	movs	r3, #2
 800212e:	2200      	movs	r2, #0
 8002130:	f000 f8d0 	bl	80022d4 <_lseek_r>
 8002134:	89a3      	ldrh	r3, [r4, #12]
 8002136:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800213a:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800213e:	81a3      	strh	r3, [r4, #12]
 8002140:	4632      	mov	r2, r6
 8002142:	463b      	mov	r3, r7
 8002144:	4628      	mov	r0, r5
 8002146:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800214a:	f000 b8e7 	b.w	800231c <_write_r>

0800214e <__sseek>:
 800214e:	b510      	push	{r4, lr}
 8002150:	460c      	mov	r4, r1
 8002152:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002156:	f000 f8bd 	bl	80022d4 <_lseek_r>
 800215a:	1c43      	adds	r3, r0, #1
 800215c:	89a3      	ldrh	r3, [r4, #12]
 800215e:	bf15      	itete	ne
 8002160:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002162:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002166:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800216a:	81a3      	strheq	r3, [r4, #12]
 800216c:	bf18      	it	ne
 800216e:	81a3      	strhne	r3, [r4, #12]
 8002170:	bd10      	pop	{r4, pc}

08002172 <__sclose>:
 8002172:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002176:	f000 b89d 	b.w	80022b4 <_close_r>

0800217a <__swbuf_r>:
 800217a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800217c:	460e      	mov	r6, r1
 800217e:	4614      	mov	r4, r2
 8002180:	4605      	mov	r5, r0
 8002182:	b118      	cbz	r0, 800218c <__swbuf_r+0x12>
 8002184:	6a03      	ldr	r3, [r0, #32]
 8002186:	b90b      	cbnz	r3, 800218c <__swbuf_r+0x12>
 8002188:	f7ff ff20 	bl	8001fcc <__sinit>
 800218c:	69a3      	ldr	r3, [r4, #24]
 800218e:	60a3      	str	r3, [r4, #8]
 8002190:	89a3      	ldrh	r3, [r4, #12]
 8002192:	071a      	lsls	r2, r3, #28
 8002194:	d501      	bpl.n	800219a <__swbuf_r+0x20>
 8002196:	6923      	ldr	r3, [r4, #16]
 8002198:	b943      	cbnz	r3, 80021ac <__swbuf_r+0x32>
 800219a:	4621      	mov	r1, r4
 800219c:	4628      	mov	r0, r5
 800219e:	f000 f82b 	bl	80021f8 <__swsetup_r>
 80021a2:	b118      	cbz	r0, 80021ac <__swbuf_r+0x32>
 80021a4:	f04f 37ff 	mov.w	r7, #4294967295
 80021a8:	4638      	mov	r0, r7
 80021aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80021ac:	6823      	ldr	r3, [r4, #0]
 80021ae:	6922      	ldr	r2, [r4, #16]
 80021b0:	1a98      	subs	r0, r3, r2
 80021b2:	6963      	ldr	r3, [r4, #20]
 80021b4:	b2f6      	uxtb	r6, r6
 80021b6:	4283      	cmp	r3, r0
 80021b8:	4637      	mov	r7, r6
 80021ba:	dc05      	bgt.n	80021c8 <__swbuf_r+0x4e>
 80021bc:	4621      	mov	r1, r4
 80021be:	4628      	mov	r0, r5
 80021c0:	f000 fa68 	bl	8002694 <_fflush_r>
 80021c4:	2800      	cmp	r0, #0
 80021c6:	d1ed      	bne.n	80021a4 <__swbuf_r+0x2a>
 80021c8:	68a3      	ldr	r3, [r4, #8]
 80021ca:	3b01      	subs	r3, #1
 80021cc:	60a3      	str	r3, [r4, #8]
 80021ce:	6823      	ldr	r3, [r4, #0]
 80021d0:	1c5a      	adds	r2, r3, #1
 80021d2:	6022      	str	r2, [r4, #0]
 80021d4:	701e      	strb	r6, [r3, #0]
 80021d6:	6962      	ldr	r2, [r4, #20]
 80021d8:	1c43      	adds	r3, r0, #1
 80021da:	429a      	cmp	r2, r3
 80021dc:	d004      	beq.n	80021e8 <__swbuf_r+0x6e>
 80021de:	89a3      	ldrh	r3, [r4, #12]
 80021e0:	07db      	lsls	r3, r3, #31
 80021e2:	d5e1      	bpl.n	80021a8 <__swbuf_r+0x2e>
 80021e4:	2e0a      	cmp	r6, #10
 80021e6:	d1df      	bne.n	80021a8 <__swbuf_r+0x2e>
 80021e8:	4621      	mov	r1, r4
 80021ea:	4628      	mov	r0, r5
 80021ec:	f000 fa52 	bl	8002694 <_fflush_r>
 80021f0:	2800      	cmp	r0, #0
 80021f2:	d0d9      	beq.n	80021a8 <__swbuf_r+0x2e>
 80021f4:	e7d6      	b.n	80021a4 <__swbuf_r+0x2a>
	...

080021f8 <__swsetup_r>:
 80021f8:	b538      	push	{r3, r4, r5, lr}
 80021fa:	4b29      	ldr	r3, [pc, #164]	@ (80022a0 <__swsetup_r+0xa8>)
 80021fc:	4605      	mov	r5, r0
 80021fe:	6818      	ldr	r0, [r3, #0]
 8002200:	460c      	mov	r4, r1
 8002202:	b118      	cbz	r0, 800220c <__swsetup_r+0x14>
 8002204:	6a03      	ldr	r3, [r0, #32]
 8002206:	b90b      	cbnz	r3, 800220c <__swsetup_r+0x14>
 8002208:	f7ff fee0 	bl	8001fcc <__sinit>
 800220c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002210:	0719      	lsls	r1, r3, #28
 8002212:	d422      	bmi.n	800225a <__swsetup_r+0x62>
 8002214:	06da      	lsls	r2, r3, #27
 8002216:	d407      	bmi.n	8002228 <__swsetup_r+0x30>
 8002218:	2209      	movs	r2, #9
 800221a:	602a      	str	r2, [r5, #0]
 800221c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002220:	81a3      	strh	r3, [r4, #12]
 8002222:	f04f 30ff 	mov.w	r0, #4294967295
 8002226:	e033      	b.n	8002290 <__swsetup_r+0x98>
 8002228:	0758      	lsls	r0, r3, #29
 800222a:	d512      	bpl.n	8002252 <__swsetup_r+0x5a>
 800222c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800222e:	b141      	cbz	r1, 8002242 <__swsetup_r+0x4a>
 8002230:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002234:	4299      	cmp	r1, r3
 8002236:	d002      	beq.n	800223e <__swsetup_r+0x46>
 8002238:	4628      	mov	r0, r5
 800223a:	f000 f8af 	bl	800239c <_free_r>
 800223e:	2300      	movs	r3, #0
 8002240:	6363      	str	r3, [r4, #52]	@ 0x34
 8002242:	89a3      	ldrh	r3, [r4, #12]
 8002244:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002248:	81a3      	strh	r3, [r4, #12]
 800224a:	2300      	movs	r3, #0
 800224c:	6063      	str	r3, [r4, #4]
 800224e:	6923      	ldr	r3, [r4, #16]
 8002250:	6023      	str	r3, [r4, #0]
 8002252:	89a3      	ldrh	r3, [r4, #12]
 8002254:	f043 0308 	orr.w	r3, r3, #8
 8002258:	81a3      	strh	r3, [r4, #12]
 800225a:	6923      	ldr	r3, [r4, #16]
 800225c:	b94b      	cbnz	r3, 8002272 <__swsetup_r+0x7a>
 800225e:	89a3      	ldrh	r3, [r4, #12]
 8002260:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8002264:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8002268:	d003      	beq.n	8002272 <__swsetup_r+0x7a>
 800226a:	4621      	mov	r1, r4
 800226c:	4628      	mov	r0, r5
 800226e:	f000 fa5f 	bl	8002730 <__smakebuf_r>
 8002272:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002276:	f013 0201 	ands.w	r2, r3, #1
 800227a:	d00a      	beq.n	8002292 <__swsetup_r+0x9a>
 800227c:	2200      	movs	r2, #0
 800227e:	60a2      	str	r2, [r4, #8]
 8002280:	6962      	ldr	r2, [r4, #20]
 8002282:	4252      	negs	r2, r2
 8002284:	61a2      	str	r2, [r4, #24]
 8002286:	6922      	ldr	r2, [r4, #16]
 8002288:	b942      	cbnz	r2, 800229c <__swsetup_r+0xa4>
 800228a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800228e:	d1c5      	bne.n	800221c <__swsetup_r+0x24>
 8002290:	bd38      	pop	{r3, r4, r5, pc}
 8002292:	0799      	lsls	r1, r3, #30
 8002294:	bf58      	it	pl
 8002296:	6962      	ldrpl	r2, [r4, #20]
 8002298:	60a2      	str	r2, [r4, #8]
 800229a:	e7f4      	b.n	8002286 <__swsetup_r+0x8e>
 800229c:	2000      	movs	r0, #0
 800229e:	e7f7      	b.n	8002290 <__swsetup_r+0x98>
 80022a0:	20000018 	.word	0x20000018

080022a4 <memset>:
 80022a4:	4402      	add	r2, r0
 80022a6:	4603      	mov	r3, r0
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d100      	bne.n	80022ae <memset+0xa>
 80022ac:	4770      	bx	lr
 80022ae:	f803 1b01 	strb.w	r1, [r3], #1
 80022b2:	e7f9      	b.n	80022a8 <memset+0x4>

080022b4 <_close_r>:
 80022b4:	b538      	push	{r3, r4, r5, lr}
 80022b6:	4d06      	ldr	r5, [pc, #24]	@ (80022d0 <_close_r+0x1c>)
 80022b8:	2300      	movs	r3, #0
 80022ba:	4604      	mov	r4, r0
 80022bc:	4608      	mov	r0, r1
 80022be:	602b      	str	r3, [r5, #0]
 80022c0:	f7fe fd21 	bl	8000d06 <_close>
 80022c4:	1c43      	adds	r3, r0, #1
 80022c6:	d102      	bne.n	80022ce <_close_r+0x1a>
 80022c8:	682b      	ldr	r3, [r5, #0]
 80022ca:	b103      	cbz	r3, 80022ce <_close_r+0x1a>
 80022cc:	6023      	str	r3, [r4, #0]
 80022ce:	bd38      	pop	{r3, r4, r5, pc}
 80022d0:	200001c8 	.word	0x200001c8

080022d4 <_lseek_r>:
 80022d4:	b538      	push	{r3, r4, r5, lr}
 80022d6:	4d07      	ldr	r5, [pc, #28]	@ (80022f4 <_lseek_r+0x20>)
 80022d8:	4604      	mov	r4, r0
 80022da:	4608      	mov	r0, r1
 80022dc:	4611      	mov	r1, r2
 80022de:	2200      	movs	r2, #0
 80022e0:	602a      	str	r2, [r5, #0]
 80022e2:	461a      	mov	r2, r3
 80022e4:	f7fe fd36 	bl	8000d54 <_lseek>
 80022e8:	1c43      	adds	r3, r0, #1
 80022ea:	d102      	bne.n	80022f2 <_lseek_r+0x1e>
 80022ec:	682b      	ldr	r3, [r5, #0]
 80022ee:	b103      	cbz	r3, 80022f2 <_lseek_r+0x1e>
 80022f0:	6023      	str	r3, [r4, #0]
 80022f2:	bd38      	pop	{r3, r4, r5, pc}
 80022f4:	200001c8 	.word	0x200001c8

080022f8 <_read_r>:
 80022f8:	b538      	push	{r3, r4, r5, lr}
 80022fa:	4d07      	ldr	r5, [pc, #28]	@ (8002318 <_read_r+0x20>)
 80022fc:	4604      	mov	r4, r0
 80022fe:	4608      	mov	r0, r1
 8002300:	4611      	mov	r1, r2
 8002302:	2200      	movs	r2, #0
 8002304:	602a      	str	r2, [r5, #0]
 8002306:	461a      	mov	r2, r3
 8002308:	f7fe fcc4 	bl	8000c94 <_read>
 800230c:	1c43      	adds	r3, r0, #1
 800230e:	d102      	bne.n	8002316 <_read_r+0x1e>
 8002310:	682b      	ldr	r3, [r5, #0]
 8002312:	b103      	cbz	r3, 8002316 <_read_r+0x1e>
 8002314:	6023      	str	r3, [r4, #0]
 8002316:	bd38      	pop	{r3, r4, r5, pc}
 8002318:	200001c8 	.word	0x200001c8

0800231c <_write_r>:
 800231c:	b538      	push	{r3, r4, r5, lr}
 800231e:	4d07      	ldr	r5, [pc, #28]	@ (800233c <_write_r+0x20>)
 8002320:	4604      	mov	r4, r0
 8002322:	4608      	mov	r0, r1
 8002324:	4611      	mov	r1, r2
 8002326:	2200      	movs	r2, #0
 8002328:	602a      	str	r2, [r5, #0]
 800232a:	461a      	mov	r2, r3
 800232c:	f7fe fccf 	bl	8000cce <_write>
 8002330:	1c43      	adds	r3, r0, #1
 8002332:	d102      	bne.n	800233a <_write_r+0x1e>
 8002334:	682b      	ldr	r3, [r5, #0]
 8002336:	b103      	cbz	r3, 800233a <_write_r+0x1e>
 8002338:	6023      	str	r3, [r4, #0]
 800233a:	bd38      	pop	{r3, r4, r5, pc}
 800233c:	200001c8 	.word	0x200001c8

08002340 <__errno>:
 8002340:	4b01      	ldr	r3, [pc, #4]	@ (8002348 <__errno+0x8>)
 8002342:	6818      	ldr	r0, [r3, #0]
 8002344:	4770      	bx	lr
 8002346:	bf00      	nop
 8002348:	20000018 	.word	0x20000018

0800234c <__libc_init_array>:
 800234c:	b570      	push	{r4, r5, r6, lr}
 800234e:	4d0d      	ldr	r5, [pc, #52]	@ (8002384 <__libc_init_array+0x38>)
 8002350:	4c0d      	ldr	r4, [pc, #52]	@ (8002388 <__libc_init_array+0x3c>)
 8002352:	1b64      	subs	r4, r4, r5
 8002354:	10a4      	asrs	r4, r4, #2
 8002356:	2600      	movs	r6, #0
 8002358:	42a6      	cmp	r6, r4
 800235a:	d109      	bne.n	8002370 <__libc_init_array+0x24>
 800235c:	4d0b      	ldr	r5, [pc, #44]	@ (800238c <__libc_init_array+0x40>)
 800235e:	4c0c      	ldr	r4, [pc, #48]	@ (8002390 <__libc_init_array+0x44>)
 8002360:	f000 fa54 	bl	800280c <_init>
 8002364:	1b64      	subs	r4, r4, r5
 8002366:	10a4      	asrs	r4, r4, #2
 8002368:	2600      	movs	r6, #0
 800236a:	42a6      	cmp	r6, r4
 800236c:	d105      	bne.n	800237a <__libc_init_array+0x2e>
 800236e:	bd70      	pop	{r4, r5, r6, pc}
 8002370:	f855 3b04 	ldr.w	r3, [r5], #4
 8002374:	4798      	blx	r3
 8002376:	3601      	adds	r6, #1
 8002378:	e7ee      	b.n	8002358 <__libc_init_array+0xc>
 800237a:	f855 3b04 	ldr.w	r3, [r5], #4
 800237e:	4798      	blx	r3
 8002380:	3601      	adds	r6, #1
 8002382:	e7f2      	b.n	800236a <__libc_init_array+0x1e>
 8002384:	08002890 	.word	0x08002890
 8002388:	08002890 	.word	0x08002890
 800238c:	08002890 	.word	0x08002890
 8002390:	08002894 	.word	0x08002894

08002394 <__retarget_lock_init_recursive>:
 8002394:	4770      	bx	lr

08002396 <__retarget_lock_acquire_recursive>:
 8002396:	4770      	bx	lr

08002398 <__retarget_lock_release_recursive>:
 8002398:	4770      	bx	lr
	...

0800239c <_free_r>:
 800239c:	b538      	push	{r3, r4, r5, lr}
 800239e:	4605      	mov	r5, r0
 80023a0:	2900      	cmp	r1, #0
 80023a2:	d041      	beq.n	8002428 <_free_r+0x8c>
 80023a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80023a8:	1f0c      	subs	r4, r1, #4
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	bfb8      	it	lt
 80023ae:	18e4      	addlt	r4, r4, r3
 80023b0:	f000 f8e0 	bl	8002574 <__malloc_lock>
 80023b4:	4a1d      	ldr	r2, [pc, #116]	@ (800242c <_free_r+0x90>)
 80023b6:	6813      	ldr	r3, [r2, #0]
 80023b8:	b933      	cbnz	r3, 80023c8 <_free_r+0x2c>
 80023ba:	6063      	str	r3, [r4, #4]
 80023bc:	6014      	str	r4, [r2, #0]
 80023be:	4628      	mov	r0, r5
 80023c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80023c4:	f000 b8dc 	b.w	8002580 <__malloc_unlock>
 80023c8:	42a3      	cmp	r3, r4
 80023ca:	d908      	bls.n	80023de <_free_r+0x42>
 80023cc:	6820      	ldr	r0, [r4, #0]
 80023ce:	1821      	adds	r1, r4, r0
 80023d0:	428b      	cmp	r3, r1
 80023d2:	bf01      	itttt	eq
 80023d4:	6819      	ldreq	r1, [r3, #0]
 80023d6:	685b      	ldreq	r3, [r3, #4]
 80023d8:	1809      	addeq	r1, r1, r0
 80023da:	6021      	streq	r1, [r4, #0]
 80023dc:	e7ed      	b.n	80023ba <_free_r+0x1e>
 80023de:	461a      	mov	r2, r3
 80023e0:	685b      	ldr	r3, [r3, #4]
 80023e2:	b10b      	cbz	r3, 80023e8 <_free_r+0x4c>
 80023e4:	42a3      	cmp	r3, r4
 80023e6:	d9fa      	bls.n	80023de <_free_r+0x42>
 80023e8:	6811      	ldr	r1, [r2, #0]
 80023ea:	1850      	adds	r0, r2, r1
 80023ec:	42a0      	cmp	r0, r4
 80023ee:	d10b      	bne.n	8002408 <_free_r+0x6c>
 80023f0:	6820      	ldr	r0, [r4, #0]
 80023f2:	4401      	add	r1, r0
 80023f4:	1850      	adds	r0, r2, r1
 80023f6:	4283      	cmp	r3, r0
 80023f8:	6011      	str	r1, [r2, #0]
 80023fa:	d1e0      	bne.n	80023be <_free_r+0x22>
 80023fc:	6818      	ldr	r0, [r3, #0]
 80023fe:	685b      	ldr	r3, [r3, #4]
 8002400:	6053      	str	r3, [r2, #4]
 8002402:	4408      	add	r0, r1
 8002404:	6010      	str	r0, [r2, #0]
 8002406:	e7da      	b.n	80023be <_free_r+0x22>
 8002408:	d902      	bls.n	8002410 <_free_r+0x74>
 800240a:	230c      	movs	r3, #12
 800240c:	602b      	str	r3, [r5, #0]
 800240e:	e7d6      	b.n	80023be <_free_r+0x22>
 8002410:	6820      	ldr	r0, [r4, #0]
 8002412:	1821      	adds	r1, r4, r0
 8002414:	428b      	cmp	r3, r1
 8002416:	bf04      	itt	eq
 8002418:	6819      	ldreq	r1, [r3, #0]
 800241a:	685b      	ldreq	r3, [r3, #4]
 800241c:	6063      	str	r3, [r4, #4]
 800241e:	bf04      	itt	eq
 8002420:	1809      	addeq	r1, r1, r0
 8002422:	6021      	streq	r1, [r4, #0]
 8002424:	6054      	str	r4, [r2, #4]
 8002426:	e7ca      	b.n	80023be <_free_r+0x22>
 8002428:	bd38      	pop	{r3, r4, r5, pc}
 800242a:	bf00      	nop
 800242c:	200001d4 	.word	0x200001d4

08002430 <sbrk_aligned>:
 8002430:	b570      	push	{r4, r5, r6, lr}
 8002432:	4e0f      	ldr	r6, [pc, #60]	@ (8002470 <sbrk_aligned+0x40>)
 8002434:	460c      	mov	r4, r1
 8002436:	6831      	ldr	r1, [r6, #0]
 8002438:	4605      	mov	r5, r0
 800243a:	b911      	cbnz	r1, 8002442 <sbrk_aligned+0x12>
 800243c:	f000 f9d6 	bl	80027ec <_sbrk_r>
 8002440:	6030      	str	r0, [r6, #0]
 8002442:	4621      	mov	r1, r4
 8002444:	4628      	mov	r0, r5
 8002446:	f000 f9d1 	bl	80027ec <_sbrk_r>
 800244a:	1c43      	adds	r3, r0, #1
 800244c:	d103      	bne.n	8002456 <sbrk_aligned+0x26>
 800244e:	f04f 34ff 	mov.w	r4, #4294967295
 8002452:	4620      	mov	r0, r4
 8002454:	bd70      	pop	{r4, r5, r6, pc}
 8002456:	1cc4      	adds	r4, r0, #3
 8002458:	f024 0403 	bic.w	r4, r4, #3
 800245c:	42a0      	cmp	r0, r4
 800245e:	d0f8      	beq.n	8002452 <sbrk_aligned+0x22>
 8002460:	1a21      	subs	r1, r4, r0
 8002462:	4628      	mov	r0, r5
 8002464:	f000 f9c2 	bl	80027ec <_sbrk_r>
 8002468:	3001      	adds	r0, #1
 800246a:	d1f2      	bne.n	8002452 <sbrk_aligned+0x22>
 800246c:	e7ef      	b.n	800244e <sbrk_aligned+0x1e>
 800246e:	bf00      	nop
 8002470:	200001d0 	.word	0x200001d0

08002474 <_malloc_r>:
 8002474:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002478:	1ccd      	adds	r5, r1, #3
 800247a:	f025 0503 	bic.w	r5, r5, #3
 800247e:	3508      	adds	r5, #8
 8002480:	2d0c      	cmp	r5, #12
 8002482:	bf38      	it	cc
 8002484:	250c      	movcc	r5, #12
 8002486:	2d00      	cmp	r5, #0
 8002488:	4606      	mov	r6, r0
 800248a:	db01      	blt.n	8002490 <_malloc_r+0x1c>
 800248c:	42a9      	cmp	r1, r5
 800248e:	d904      	bls.n	800249a <_malloc_r+0x26>
 8002490:	230c      	movs	r3, #12
 8002492:	6033      	str	r3, [r6, #0]
 8002494:	2000      	movs	r0, #0
 8002496:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800249a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8002570 <_malloc_r+0xfc>
 800249e:	f000 f869 	bl	8002574 <__malloc_lock>
 80024a2:	f8d8 3000 	ldr.w	r3, [r8]
 80024a6:	461c      	mov	r4, r3
 80024a8:	bb44      	cbnz	r4, 80024fc <_malloc_r+0x88>
 80024aa:	4629      	mov	r1, r5
 80024ac:	4630      	mov	r0, r6
 80024ae:	f7ff ffbf 	bl	8002430 <sbrk_aligned>
 80024b2:	1c43      	adds	r3, r0, #1
 80024b4:	4604      	mov	r4, r0
 80024b6:	d158      	bne.n	800256a <_malloc_r+0xf6>
 80024b8:	f8d8 4000 	ldr.w	r4, [r8]
 80024bc:	4627      	mov	r7, r4
 80024be:	2f00      	cmp	r7, #0
 80024c0:	d143      	bne.n	800254a <_malloc_r+0xd6>
 80024c2:	2c00      	cmp	r4, #0
 80024c4:	d04b      	beq.n	800255e <_malloc_r+0xea>
 80024c6:	6823      	ldr	r3, [r4, #0]
 80024c8:	4639      	mov	r1, r7
 80024ca:	4630      	mov	r0, r6
 80024cc:	eb04 0903 	add.w	r9, r4, r3
 80024d0:	f000 f98c 	bl	80027ec <_sbrk_r>
 80024d4:	4581      	cmp	r9, r0
 80024d6:	d142      	bne.n	800255e <_malloc_r+0xea>
 80024d8:	6821      	ldr	r1, [r4, #0]
 80024da:	1a6d      	subs	r5, r5, r1
 80024dc:	4629      	mov	r1, r5
 80024de:	4630      	mov	r0, r6
 80024e0:	f7ff ffa6 	bl	8002430 <sbrk_aligned>
 80024e4:	3001      	adds	r0, #1
 80024e6:	d03a      	beq.n	800255e <_malloc_r+0xea>
 80024e8:	6823      	ldr	r3, [r4, #0]
 80024ea:	442b      	add	r3, r5
 80024ec:	6023      	str	r3, [r4, #0]
 80024ee:	f8d8 3000 	ldr.w	r3, [r8]
 80024f2:	685a      	ldr	r2, [r3, #4]
 80024f4:	bb62      	cbnz	r2, 8002550 <_malloc_r+0xdc>
 80024f6:	f8c8 7000 	str.w	r7, [r8]
 80024fa:	e00f      	b.n	800251c <_malloc_r+0xa8>
 80024fc:	6822      	ldr	r2, [r4, #0]
 80024fe:	1b52      	subs	r2, r2, r5
 8002500:	d420      	bmi.n	8002544 <_malloc_r+0xd0>
 8002502:	2a0b      	cmp	r2, #11
 8002504:	d917      	bls.n	8002536 <_malloc_r+0xc2>
 8002506:	1961      	adds	r1, r4, r5
 8002508:	42a3      	cmp	r3, r4
 800250a:	6025      	str	r5, [r4, #0]
 800250c:	bf18      	it	ne
 800250e:	6059      	strne	r1, [r3, #4]
 8002510:	6863      	ldr	r3, [r4, #4]
 8002512:	bf08      	it	eq
 8002514:	f8c8 1000 	streq.w	r1, [r8]
 8002518:	5162      	str	r2, [r4, r5]
 800251a:	604b      	str	r3, [r1, #4]
 800251c:	4630      	mov	r0, r6
 800251e:	f000 f82f 	bl	8002580 <__malloc_unlock>
 8002522:	f104 000b 	add.w	r0, r4, #11
 8002526:	1d23      	adds	r3, r4, #4
 8002528:	f020 0007 	bic.w	r0, r0, #7
 800252c:	1ac2      	subs	r2, r0, r3
 800252e:	bf1c      	itt	ne
 8002530:	1a1b      	subne	r3, r3, r0
 8002532:	50a3      	strne	r3, [r4, r2]
 8002534:	e7af      	b.n	8002496 <_malloc_r+0x22>
 8002536:	6862      	ldr	r2, [r4, #4]
 8002538:	42a3      	cmp	r3, r4
 800253a:	bf0c      	ite	eq
 800253c:	f8c8 2000 	streq.w	r2, [r8]
 8002540:	605a      	strne	r2, [r3, #4]
 8002542:	e7eb      	b.n	800251c <_malloc_r+0xa8>
 8002544:	4623      	mov	r3, r4
 8002546:	6864      	ldr	r4, [r4, #4]
 8002548:	e7ae      	b.n	80024a8 <_malloc_r+0x34>
 800254a:	463c      	mov	r4, r7
 800254c:	687f      	ldr	r7, [r7, #4]
 800254e:	e7b6      	b.n	80024be <_malloc_r+0x4a>
 8002550:	461a      	mov	r2, r3
 8002552:	685b      	ldr	r3, [r3, #4]
 8002554:	42a3      	cmp	r3, r4
 8002556:	d1fb      	bne.n	8002550 <_malloc_r+0xdc>
 8002558:	2300      	movs	r3, #0
 800255a:	6053      	str	r3, [r2, #4]
 800255c:	e7de      	b.n	800251c <_malloc_r+0xa8>
 800255e:	230c      	movs	r3, #12
 8002560:	6033      	str	r3, [r6, #0]
 8002562:	4630      	mov	r0, r6
 8002564:	f000 f80c 	bl	8002580 <__malloc_unlock>
 8002568:	e794      	b.n	8002494 <_malloc_r+0x20>
 800256a:	6005      	str	r5, [r0, #0]
 800256c:	e7d6      	b.n	800251c <_malloc_r+0xa8>
 800256e:	bf00      	nop
 8002570:	200001d4 	.word	0x200001d4

08002574 <__malloc_lock>:
 8002574:	4801      	ldr	r0, [pc, #4]	@ (800257c <__malloc_lock+0x8>)
 8002576:	f7ff bf0e 	b.w	8002396 <__retarget_lock_acquire_recursive>
 800257a:	bf00      	nop
 800257c:	200001cc 	.word	0x200001cc

08002580 <__malloc_unlock>:
 8002580:	4801      	ldr	r0, [pc, #4]	@ (8002588 <__malloc_unlock+0x8>)
 8002582:	f7ff bf09 	b.w	8002398 <__retarget_lock_release_recursive>
 8002586:	bf00      	nop
 8002588:	200001cc 	.word	0x200001cc

0800258c <__sflush_r>:
 800258c:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8002590:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002594:	0716      	lsls	r6, r2, #28
 8002596:	4605      	mov	r5, r0
 8002598:	460c      	mov	r4, r1
 800259a:	d454      	bmi.n	8002646 <__sflush_r+0xba>
 800259c:	684b      	ldr	r3, [r1, #4]
 800259e:	2b00      	cmp	r3, #0
 80025a0:	dc02      	bgt.n	80025a8 <__sflush_r+0x1c>
 80025a2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	dd48      	ble.n	800263a <__sflush_r+0xae>
 80025a8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025aa:	2e00      	cmp	r6, #0
 80025ac:	d045      	beq.n	800263a <__sflush_r+0xae>
 80025ae:	2300      	movs	r3, #0
 80025b0:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80025b4:	682f      	ldr	r7, [r5, #0]
 80025b6:	6a21      	ldr	r1, [r4, #32]
 80025b8:	602b      	str	r3, [r5, #0]
 80025ba:	d030      	beq.n	800261e <__sflush_r+0x92>
 80025bc:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80025be:	89a3      	ldrh	r3, [r4, #12]
 80025c0:	0759      	lsls	r1, r3, #29
 80025c2:	d505      	bpl.n	80025d0 <__sflush_r+0x44>
 80025c4:	6863      	ldr	r3, [r4, #4]
 80025c6:	1ad2      	subs	r2, r2, r3
 80025c8:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80025ca:	b10b      	cbz	r3, 80025d0 <__sflush_r+0x44>
 80025cc:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80025ce:	1ad2      	subs	r2, r2, r3
 80025d0:	2300      	movs	r3, #0
 80025d2:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80025d4:	6a21      	ldr	r1, [r4, #32]
 80025d6:	4628      	mov	r0, r5
 80025d8:	47b0      	blx	r6
 80025da:	1c43      	adds	r3, r0, #1
 80025dc:	89a3      	ldrh	r3, [r4, #12]
 80025de:	d106      	bne.n	80025ee <__sflush_r+0x62>
 80025e0:	6829      	ldr	r1, [r5, #0]
 80025e2:	291d      	cmp	r1, #29
 80025e4:	d82b      	bhi.n	800263e <__sflush_r+0xb2>
 80025e6:	4a2a      	ldr	r2, [pc, #168]	@ (8002690 <__sflush_r+0x104>)
 80025e8:	40ca      	lsrs	r2, r1
 80025ea:	07d6      	lsls	r6, r2, #31
 80025ec:	d527      	bpl.n	800263e <__sflush_r+0xb2>
 80025ee:	2200      	movs	r2, #0
 80025f0:	6062      	str	r2, [r4, #4]
 80025f2:	04d9      	lsls	r1, r3, #19
 80025f4:	6922      	ldr	r2, [r4, #16]
 80025f6:	6022      	str	r2, [r4, #0]
 80025f8:	d504      	bpl.n	8002604 <__sflush_r+0x78>
 80025fa:	1c42      	adds	r2, r0, #1
 80025fc:	d101      	bne.n	8002602 <__sflush_r+0x76>
 80025fe:	682b      	ldr	r3, [r5, #0]
 8002600:	b903      	cbnz	r3, 8002604 <__sflush_r+0x78>
 8002602:	6560      	str	r0, [r4, #84]	@ 0x54
 8002604:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002606:	602f      	str	r7, [r5, #0]
 8002608:	b1b9      	cbz	r1, 800263a <__sflush_r+0xae>
 800260a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800260e:	4299      	cmp	r1, r3
 8002610:	d002      	beq.n	8002618 <__sflush_r+0x8c>
 8002612:	4628      	mov	r0, r5
 8002614:	f7ff fec2 	bl	800239c <_free_r>
 8002618:	2300      	movs	r3, #0
 800261a:	6363      	str	r3, [r4, #52]	@ 0x34
 800261c:	e00d      	b.n	800263a <__sflush_r+0xae>
 800261e:	2301      	movs	r3, #1
 8002620:	4628      	mov	r0, r5
 8002622:	47b0      	blx	r6
 8002624:	4602      	mov	r2, r0
 8002626:	1c50      	adds	r0, r2, #1
 8002628:	d1c9      	bne.n	80025be <__sflush_r+0x32>
 800262a:	682b      	ldr	r3, [r5, #0]
 800262c:	2b00      	cmp	r3, #0
 800262e:	d0c6      	beq.n	80025be <__sflush_r+0x32>
 8002630:	2b1d      	cmp	r3, #29
 8002632:	d001      	beq.n	8002638 <__sflush_r+0xac>
 8002634:	2b16      	cmp	r3, #22
 8002636:	d11e      	bne.n	8002676 <__sflush_r+0xea>
 8002638:	602f      	str	r7, [r5, #0]
 800263a:	2000      	movs	r0, #0
 800263c:	e022      	b.n	8002684 <__sflush_r+0xf8>
 800263e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002642:	b21b      	sxth	r3, r3
 8002644:	e01b      	b.n	800267e <__sflush_r+0xf2>
 8002646:	690f      	ldr	r7, [r1, #16]
 8002648:	2f00      	cmp	r7, #0
 800264a:	d0f6      	beq.n	800263a <__sflush_r+0xae>
 800264c:	0793      	lsls	r3, r2, #30
 800264e:	680e      	ldr	r6, [r1, #0]
 8002650:	bf08      	it	eq
 8002652:	694b      	ldreq	r3, [r1, #20]
 8002654:	600f      	str	r7, [r1, #0]
 8002656:	bf18      	it	ne
 8002658:	2300      	movne	r3, #0
 800265a:	eba6 0807 	sub.w	r8, r6, r7
 800265e:	608b      	str	r3, [r1, #8]
 8002660:	f1b8 0f00 	cmp.w	r8, #0
 8002664:	dde9      	ble.n	800263a <__sflush_r+0xae>
 8002666:	6a21      	ldr	r1, [r4, #32]
 8002668:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800266a:	4643      	mov	r3, r8
 800266c:	463a      	mov	r2, r7
 800266e:	4628      	mov	r0, r5
 8002670:	47b0      	blx	r6
 8002672:	2800      	cmp	r0, #0
 8002674:	dc08      	bgt.n	8002688 <__sflush_r+0xfc>
 8002676:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800267a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800267e:	81a3      	strh	r3, [r4, #12]
 8002680:	f04f 30ff 	mov.w	r0, #4294967295
 8002684:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002688:	4407      	add	r7, r0
 800268a:	eba8 0800 	sub.w	r8, r8, r0
 800268e:	e7e7      	b.n	8002660 <__sflush_r+0xd4>
 8002690:	20400001 	.word	0x20400001

08002694 <_fflush_r>:
 8002694:	b538      	push	{r3, r4, r5, lr}
 8002696:	690b      	ldr	r3, [r1, #16]
 8002698:	4605      	mov	r5, r0
 800269a:	460c      	mov	r4, r1
 800269c:	b913      	cbnz	r3, 80026a4 <_fflush_r+0x10>
 800269e:	2500      	movs	r5, #0
 80026a0:	4628      	mov	r0, r5
 80026a2:	bd38      	pop	{r3, r4, r5, pc}
 80026a4:	b118      	cbz	r0, 80026ae <_fflush_r+0x1a>
 80026a6:	6a03      	ldr	r3, [r0, #32]
 80026a8:	b90b      	cbnz	r3, 80026ae <_fflush_r+0x1a>
 80026aa:	f7ff fc8f 	bl	8001fcc <__sinit>
 80026ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d0f3      	beq.n	800269e <_fflush_r+0xa>
 80026b6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80026b8:	07d0      	lsls	r0, r2, #31
 80026ba:	d404      	bmi.n	80026c6 <_fflush_r+0x32>
 80026bc:	0599      	lsls	r1, r3, #22
 80026be:	d402      	bmi.n	80026c6 <_fflush_r+0x32>
 80026c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026c2:	f7ff fe68 	bl	8002396 <__retarget_lock_acquire_recursive>
 80026c6:	4628      	mov	r0, r5
 80026c8:	4621      	mov	r1, r4
 80026ca:	f7ff ff5f 	bl	800258c <__sflush_r>
 80026ce:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80026d0:	07da      	lsls	r2, r3, #31
 80026d2:	4605      	mov	r5, r0
 80026d4:	d4e4      	bmi.n	80026a0 <_fflush_r+0xc>
 80026d6:	89a3      	ldrh	r3, [r4, #12]
 80026d8:	059b      	lsls	r3, r3, #22
 80026da:	d4e1      	bmi.n	80026a0 <_fflush_r+0xc>
 80026dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80026de:	f7ff fe5b 	bl	8002398 <__retarget_lock_release_recursive>
 80026e2:	e7dd      	b.n	80026a0 <_fflush_r+0xc>

080026e4 <__swhatbuf_r>:
 80026e4:	b570      	push	{r4, r5, r6, lr}
 80026e6:	460c      	mov	r4, r1
 80026e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80026ec:	2900      	cmp	r1, #0
 80026ee:	b096      	sub	sp, #88	@ 0x58
 80026f0:	4615      	mov	r5, r2
 80026f2:	461e      	mov	r6, r3
 80026f4:	da0d      	bge.n	8002712 <__swhatbuf_r+0x2e>
 80026f6:	89a3      	ldrh	r3, [r4, #12]
 80026f8:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80026fc:	f04f 0100 	mov.w	r1, #0
 8002700:	bf14      	ite	ne
 8002702:	2340      	movne	r3, #64	@ 0x40
 8002704:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8002708:	2000      	movs	r0, #0
 800270a:	6031      	str	r1, [r6, #0]
 800270c:	602b      	str	r3, [r5, #0]
 800270e:	b016      	add	sp, #88	@ 0x58
 8002710:	bd70      	pop	{r4, r5, r6, pc}
 8002712:	466a      	mov	r2, sp
 8002714:	f000 f848 	bl	80027a8 <_fstat_r>
 8002718:	2800      	cmp	r0, #0
 800271a:	dbec      	blt.n	80026f6 <__swhatbuf_r+0x12>
 800271c:	9901      	ldr	r1, [sp, #4]
 800271e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8002722:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8002726:	4259      	negs	r1, r3
 8002728:	4159      	adcs	r1, r3
 800272a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800272e:	e7eb      	b.n	8002708 <__swhatbuf_r+0x24>

08002730 <__smakebuf_r>:
 8002730:	898b      	ldrh	r3, [r1, #12]
 8002732:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8002734:	079d      	lsls	r5, r3, #30
 8002736:	4606      	mov	r6, r0
 8002738:	460c      	mov	r4, r1
 800273a:	d507      	bpl.n	800274c <__smakebuf_r+0x1c>
 800273c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8002740:	6023      	str	r3, [r4, #0]
 8002742:	6123      	str	r3, [r4, #16]
 8002744:	2301      	movs	r3, #1
 8002746:	6163      	str	r3, [r4, #20]
 8002748:	b003      	add	sp, #12
 800274a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800274c:	ab01      	add	r3, sp, #4
 800274e:	466a      	mov	r2, sp
 8002750:	f7ff ffc8 	bl	80026e4 <__swhatbuf_r>
 8002754:	9f00      	ldr	r7, [sp, #0]
 8002756:	4605      	mov	r5, r0
 8002758:	4639      	mov	r1, r7
 800275a:	4630      	mov	r0, r6
 800275c:	f7ff fe8a 	bl	8002474 <_malloc_r>
 8002760:	b948      	cbnz	r0, 8002776 <__smakebuf_r+0x46>
 8002762:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002766:	059a      	lsls	r2, r3, #22
 8002768:	d4ee      	bmi.n	8002748 <__smakebuf_r+0x18>
 800276a:	f023 0303 	bic.w	r3, r3, #3
 800276e:	f043 0302 	orr.w	r3, r3, #2
 8002772:	81a3      	strh	r3, [r4, #12]
 8002774:	e7e2      	b.n	800273c <__smakebuf_r+0xc>
 8002776:	89a3      	ldrh	r3, [r4, #12]
 8002778:	6020      	str	r0, [r4, #0]
 800277a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800277e:	81a3      	strh	r3, [r4, #12]
 8002780:	9b01      	ldr	r3, [sp, #4]
 8002782:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8002786:	b15b      	cbz	r3, 80027a0 <__smakebuf_r+0x70>
 8002788:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800278c:	4630      	mov	r0, r6
 800278e:	f000 f81d 	bl	80027cc <_isatty_r>
 8002792:	b128      	cbz	r0, 80027a0 <__smakebuf_r+0x70>
 8002794:	89a3      	ldrh	r3, [r4, #12]
 8002796:	f023 0303 	bic.w	r3, r3, #3
 800279a:	f043 0301 	orr.w	r3, r3, #1
 800279e:	81a3      	strh	r3, [r4, #12]
 80027a0:	89a3      	ldrh	r3, [r4, #12]
 80027a2:	431d      	orrs	r5, r3
 80027a4:	81a5      	strh	r5, [r4, #12]
 80027a6:	e7cf      	b.n	8002748 <__smakebuf_r+0x18>

080027a8 <_fstat_r>:
 80027a8:	b538      	push	{r3, r4, r5, lr}
 80027aa:	4d07      	ldr	r5, [pc, #28]	@ (80027c8 <_fstat_r+0x20>)
 80027ac:	2300      	movs	r3, #0
 80027ae:	4604      	mov	r4, r0
 80027b0:	4608      	mov	r0, r1
 80027b2:	4611      	mov	r1, r2
 80027b4:	602b      	str	r3, [r5, #0]
 80027b6:	f7fe fab2 	bl	8000d1e <_fstat>
 80027ba:	1c43      	adds	r3, r0, #1
 80027bc:	d102      	bne.n	80027c4 <_fstat_r+0x1c>
 80027be:	682b      	ldr	r3, [r5, #0]
 80027c0:	b103      	cbz	r3, 80027c4 <_fstat_r+0x1c>
 80027c2:	6023      	str	r3, [r4, #0]
 80027c4:	bd38      	pop	{r3, r4, r5, pc}
 80027c6:	bf00      	nop
 80027c8:	200001c8 	.word	0x200001c8

080027cc <_isatty_r>:
 80027cc:	b538      	push	{r3, r4, r5, lr}
 80027ce:	4d06      	ldr	r5, [pc, #24]	@ (80027e8 <_isatty_r+0x1c>)
 80027d0:	2300      	movs	r3, #0
 80027d2:	4604      	mov	r4, r0
 80027d4:	4608      	mov	r0, r1
 80027d6:	602b      	str	r3, [r5, #0]
 80027d8:	f7fe fab1 	bl	8000d3e <_isatty>
 80027dc:	1c43      	adds	r3, r0, #1
 80027de:	d102      	bne.n	80027e6 <_isatty_r+0x1a>
 80027e0:	682b      	ldr	r3, [r5, #0]
 80027e2:	b103      	cbz	r3, 80027e6 <_isatty_r+0x1a>
 80027e4:	6023      	str	r3, [r4, #0]
 80027e6:	bd38      	pop	{r3, r4, r5, pc}
 80027e8:	200001c8 	.word	0x200001c8

080027ec <_sbrk_r>:
 80027ec:	b538      	push	{r3, r4, r5, lr}
 80027ee:	4d06      	ldr	r5, [pc, #24]	@ (8002808 <_sbrk_r+0x1c>)
 80027f0:	2300      	movs	r3, #0
 80027f2:	4604      	mov	r4, r0
 80027f4:	4608      	mov	r0, r1
 80027f6:	602b      	str	r3, [r5, #0]
 80027f8:	f7fe faba 	bl	8000d70 <_sbrk>
 80027fc:	1c43      	adds	r3, r0, #1
 80027fe:	d102      	bne.n	8002806 <_sbrk_r+0x1a>
 8002800:	682b      	ldr	r3, [r5, #0]
 8002802:	b103      	cbz	r3, 8002806 <_sbrk_r+0x1a>
 8002804:	6023      	str	r3, [r4, #0]
 8002806:	bd38      	pop	{r3, r4, r5, pc}
 8002808:	200001c8 	.word	0x200001c8

0800280c <_init>:
 800280c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800280e:	bf00      	nop
 8002810:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002812:	bc08      	pop	{r3}
 8002814:	469e      	mov	lr, r3
 8002816:	4770      	bx	lr

08002818 <_fini>:
 8002818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800281a:	bf00      	nop
 800281c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800281e:	bc08      	pop	{r3}
 8002820:	469e      	mov	lr, r3
 8002822:	4770      	bx	lr

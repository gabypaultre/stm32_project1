
stm32f429i_blink.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000039c4  080001b0  080001b0  000011b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08003b74  08003b74  00004b74  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c24  08003c24  00005068  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08003c24  08003c24  00004c24  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c2c  08003c2c  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c2c  08003c2c  00004c2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c34  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00005068  2**0
                  CONTENTS
 10 .bss          000001c8  20000068  20000068  00005068  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000230  20000230  00005068  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 13 .debug_info   00006b4c  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000016d6  00000000  00000000  0000bbe4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000748  00000000  00000000  0000d2c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000055d  00000000  00000000  0000da08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00023ae0  00000000  00000000  0000df65  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000087b8  00000000  00000000  00031a45  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3d7e  00000000  00000000  0003a1fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0010df7b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000023d4  00000000  00000000  0010dfc0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000007b  00000000  00000000  00110394  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	@ (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	@ (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	@ (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	20000068 	.word	0x20000068
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08003b5c 	.word	0x08003b5c

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	@ (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	@ (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	@ (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	2000006c 	.word	0x2000006c
 80001ec:	08003b5c 	.word	0x08003b5c

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b988 	b.w	80005b8 <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	468e      	mov	lr, r1
 80002c8:	4604      	mov	r4, r0
 80002ca:	4688      	mov	r8, r1
 80002cc:	2b00      	cmp	r3, #0
 80002ce:	d14a      	bne.n	8000366 <__udivmoddi4+0xa6>
 80002d0:	428a      	cmp	r2, r1
 80002d2:	4617      	mov	r7, r2
 80002d4:	d962      	bls.n	800039c <__udivmoddi4+0xdc>
 80002d6:	fab2 f682 	clz	r6, r2
 80002da:	b14e      	cbz	r6, 80002f0 <__udivmoddi4+0x30>
 80002dc:	f1c6 0320 	rsb	r3, r6, #32
 80002e0:	fa01 f806 	lsl.w	r8, r1, r6
 80002e4:	fa20 f303 	lsr.w	r3, r0, r3
 80002e8:	40b7      	lsls	r7, r6
 80002ea:	ea43 0808 	orr.w	r8, r3, r8
 80002ee:	40b4      	lsls	r4, r6
 80002f0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f4:	fa1f fc87 	uxth.w	ip, r7
 80002f8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002fc:	0c23      	lsrs	r3, r4, #16
 80002fe:	fb0e 8811 	mls	r8, lr, r1, r8
 8000302:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000306:	fb01 f20c 	mul.w	r2, r1, ip
 800030a:	429a      	cmp	r2, r3
 800030c:	d909      	bls.n	8000322 <__udivmoddi4+0x62>
 800030e:	18fb      	adds	r3, r7, r3
 8000310:	f101 30ff 	add.w	r0, r1, #4294967295
 8000314:	f080 80ea 	bcs.w	80004ec <__udivmoddi4+0x22c>
 8000318:	429a      	cmp	r2, r3
 800031a:	f240 80e7 	bls.w	80004ec <__udivmoddi4+0x22c>
 800031e:	3902      	subs	r1, #2
 8000320:	443b      	add	r3, r7
 8000322:	1a9a      	subs	r2, r3, r2
 8000324:	b2a3      	uxth	r3, r4
 8000326:	fbb2 f0fe 	udiv	r0, r2, lr
 800032a:	fb0e 2210 	mls	r2, lr, r0, r2
 800032e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000332:	fb00 fc0c 	mul.w	ip, r0, ip
 8000336:	459c      	cmp	ip, r3
 8000338:	d909      	bls.n	800034e <__udivmoddi4+0x8e>
 800033a:	18fb      	adds	r3, r7, r3
 800033c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000340:	f080 80d6 	bcs.w	80004f0 <__udivmoddi4+0x230>
 8000344:	459c      	cmp	ip, r3
 8000346:	f240 80d3 	bls.w	80004f0 <__udivmoddi4+0x230>
 800034a:	443b      	add	r3, r7
 800034c:	3802      	subs	r0, #2
 800034e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000352:	eba3 030c 	sub.w	r3, r3, ip
 8000356:	2100      	movs	r1, #0
 8000358:	b11d      	cbz	r5, 8000362 <__udivmoddi4+0xa2>
 800035a:	40f3      	lsrs	r3, r6
 800035c:	2200      	movs	r2, #0
 800035e:	e9c5 3200 	strd	r3, r2, [r5]
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	428b      	cmp	r3, r1
 8000368:	d905      	bls.n	8000376 <__udivmoddi4+0xb6>
 800036a:	b10d      	cbz	r5, 8000370 <__udivmoddi4+0xb0>
 800036c:	e9c5 0100 	strd	r0, r1, [r5]
 8000370:	2100      	movs	r1, #0
 8000372:	4608      	mov	r0, r1
 8000374:	e7f5      	b.n	8000362 <__udivmoddi4+0xa2>
 8000376:	fab3 f183 	clz	r1, r3
 800037a:	2900      	cmp	r1, #0
 800037c:	d146      	bne.n	800040c <__udivmoddi4+0x14c>
 800037e:	4573      	cmp	r3, lr
 8000380:	d302      	bcc.n	8000388 <__udivmoddi4+0xc8>
 8000382:	4282      	cmp	r2, r0
 8000384:	f200 8105 	bhi.w	8000592 <__udivmoddi4+0x2d2>
 8000388:	1a84      	subs	r4, r0, r2
 800038a:	eb6e 0203 	sbc.w	r2, lr, r3
 800038e:	2001      	movs	r0, #1
 8000390:	4690      	mov	r8, r2
 8000392:	2d00      	cmp	r5, #0
 8000394:	d0e5      	beq.n	8000362 <__udivmoddi4+0xa2>
 8000396:	e9c5 4800 	strd	r4, r8, [r5]
 800039a:	e7e2      	b.n	8000362 <__udivmoddi4+0xa2>
 800039c:	2a00      	cmp	r2, #0
 800039e:	f000 8090 	beq.w	80004c2 <__udivmoddi4+0x202>
 80003a2:	fab2 f682 	clz	r6, r2
 80003a6:	2e00      	cmp	r6, #0
 80003a8:	f040 80a4 	bne.w	80004f4 <__udivmoddi4+0x234>
 80003ac:	1a8a      	subs	r2, r1, r2
 80003ae:	0c03      	lsrs	r3, r0, #16
 80003b0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80003b4:	b280      	uxth	r0, r0
 80003b6:	b2bc      	uxth	r4, r7
 80003b8:	2101      	movs	r1, #1
 80003ba:	fbb2 fcfe 	udiv	ip, r2, lr
 80003be:	fb0e 221c 	mls	r2, lr, ip, r2
 80003c2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003c6:	fb04 f20c 	mul.w	r2, r4, ip
 80003ca:	429a      	cmp	r2, r3
 80003cc:	d907      	bls.n	80003de <__udivmoddi4+0x11e>
 80003ce:	18fb      	adds	r3, r7, r3
 80003d0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003d4:	d202      	bcs.n	80003dc <__udivmoddi4+0x11c>
 80003d6:	429a      	cmp	r2, r3
 80003d8:	f200 80e0 	bhi.w	800059c <__udivmoddi4+0x2dc>
 80003dc:	46c4      	mov	ip, r8
 80003de:	1a9b      	subs	r3, r3, r2
 80003e0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003e4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003e8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003ec:	fb02 f404 	mul.w	r4, r2, r4
 80003f0:	429c      	cmp	r4, r3
 80003f2:	d907      	bls.n	8000404 <__udivmoddi4+0x144>
 80003f4:	18fb      	adds	r3, r7, r3
 80003f6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x142>
 80003fc:	429c      	cmp	r4, r3
 80003fe:	f200 80ca 	bhi.w	8000596 <__udivmoddi4+0x2d6>
 8000402:	4602      	mov	r2, r0
 8000404:	1b1b      	subs	r3, r3, r4
 8000406:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 800040a:	e7a5      	b.n	8000358 <__udivmoddi4+0x98>
 800040c:	f1c1 0620 	rsb	r6, r1, #32
 8000410:	408b      	lsls	r3, r1
 8000412:	fa22 f706 	lsr.w	r7, r2, r6
 8000416:	431f      	orrs	r7, r3
 8000418:	fa0e f401 	lsl.w	r4, lr, r1
 800041c:	fa20 f306 	lsr.w	r3, r0, r6
 8000420:	fa2e fe06 	lsr.w	lr, lr, r6
 8000424:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000428:	4323      	orrs	r3, r4
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	fa1f fc87 	uxth.w	ip, r7
 8000432:	fbbe f0f9 	udiv	r0, lr, r9
 8000436:	0c1c      	lsrs	r4, r3, #16
 8000438:	fb09 ee10 	mls	lr, r9, r0, lr
 800043c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000440:	fb00 fe0c 	mul.w	lr, r0, ip
 8000444:	45a6      	cmp	lr, r4
 8000446:	fa02 f201 	lsl.w	r2, r2, r1
 800044a:	d909      	bls.n	8000460 <__udivmoddi4+0x1a0>
 800044c:	193c      	adds	r4, r7, r4
 800044e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000452:	f080 809c 	bcs.w	800058e <__udivmoddi4+0x2ce>
 8000456:	45a6      	cmp	lr, r4
 8000458:	f240 8099 	bls.w	800058e <__udivmoddi4+0x2ce>
 800045c:	3802      	subs	r0, #2
 800045e:	443c      	add	r4, r7
 8000460:	eba4 040e 	sub.w	r4, r4, lr
 8000464:	fa1f fe83 	uxth.w	lr, r3
 8000468:	fbb4 f3f9 	udiv	r3, r4, r9
 800046c:	fb09 4413 	mls	r4, r9, r3, r4
 8000470:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000474:	fb03 fc0c 	mul.w	ip, r3, ip
 8000478:	45a4      	cmp	ip, r4
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x1ce>
 800047c:	193c      	adds	r4, r7, r4
 800047e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000482:	f080 8082 	bcs.w	800058a <__udivmoddi4+0x2ca>
 8000486:	45a4      	cmp	ip, r4
 8000488:	d97f      	bls.n	800058a <__udivmoddi4+0x2ca>
 800048a:	3b02      	subs	r3, #2
 800048c:	443c      	add	r4, r7
 800048e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000492:	eba4 040c 	sub.w	r4, r4, ip
 8000496:	fba0 ec02 	umull	lr, ip, r0, r2
 800049a:	4564      	cmp	r4, ip
 800049c:	4673      	mov	r3, lr
 800049e:	46e1      	mov	r9, ip
 80004a0:	d362      	bcc.n	8000568 <__udivmoddi4+0x2a8>
 80004a2:	d05f      	beq.n	8000564 <__udivmoddi4+0x2a4>
 80004a4:	b15d      	cbz	r5, 80004be <__udivmoddi4+0x1fe>
 80004a6:	ebb8 0203 	subs.w	r2, r8, r3
 80004aa:	eb64 0409 	sbc.w	r4, r4, r9
 80004ae:	fa04 f606 	lsl.w	r6, r4, r6
 80004b2:	fa22 f301 	lsr.w	r3, r2, r1
 80004b6:	431e      	orrs	r6, r3
 80004b8:	40cc      	lsrs	r4, r1
 80004ba:	e9c5 6400 	strd	r6, r4, [r5]
 80004be:	2100      	movs	r1, #0
 80004c0:	e74f      	b.n	8000362 <__udivmoddi4+0xa2>
 80004c2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004c6:	0c01      	lsrs	r1, r0, #16
 80004c8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004cc:	b280      	uxth	r0, r0
 80004ce:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004d2:	463b      	mov	r3, r7
 80004d4:	4638      	mov	r0, r7
 80004d6:	463c      	mov	r4, r7
 80004d8:	46b8      	mov	r8, r7
 80004da:	46be      	mov	lr, r7
 80004dc:	2620      	movs	r6, #32
 80004de:	fbb1 f1f7 	udiv	r1, r1, r7
 80004e2:	eba2 0208 	sub.w	r2, r2, r8
 80004e6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ea:	e766      	b.n	80003ba <__udivmoddi4+0xfa>
 80004ec:	4601      	mov	r1, r0
 80004ee:	e718      	b.n	8000322 <__udivmoddi4+0x62>
 80004f0:	4610      	mov	r0, r2
 80004f2:	e72c      	b.n	800034e <__udivmoddi4+0x8e>
 80004f4:	f1c6 0220 	rsb	r2, r6, #32
 80004f8:	fa2e f302 	lsr.w	r3, lr, r2
 80004fc:	40b7      	lsls	r7, r6
 80004fe:	40b1      	lsls	r1, r6
 8000500:	fa20 f202 	lsr.w	r2, r0, r2
 8000504:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000508:	430a      	orrs	r2, r1
 800050a:	fbb3 f8fe 	udiv	r8, r3, lr
 800050e:	b2bc      	uxth	r4, r7
 8000510:	fb0e 3318 	mls	r3, lr, r8, r3
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 800051a:	fb08 f904 	mul.w	r9, r8, r4
 800051e:	40b0      	lsls	r0, r6
 8000520:	4589      	cmp	r9, r1
 8000522:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000526:	b280      	uxth	r0, r0
 8000528:	d93e      	bls.n	80005a8 <__udivmoddi4+0x2e8>
 800052a:	1879      	adds	r1, r7, r1
 800052c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000530:	d201      	bcs.n	8000536 <__udivmoddi4+0x276>
 8000532:	4589      	cmp	r9, r1
 8000534:	d81f      	bhi.n	8000576 <__udivmoddi4+0x2b6>
 8000536:	eba1 0109 	sub.w	r1, r1, r9
 800053a:	fbb1 f9fe 	udiv	r9, r1, lr
 800053e:	fb09 f804 	mul.w	r8, r9, r4
 8000542:	fb0e 1119 	mls	r1, lr, r9, r1
 8000546:	b292      	uxth	r2, r2
 8000548:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800054c:	4542      	cmp	r2, r8
 800054e:	d229      	bcs.n	80005a4 <__udivmoddi4+0x2e4>
 8000550:	18ba      	adds	r2, r7, r2
 8000552:	f109 31ff 	add.w	r1, r9, #4294967295
 8000556:	d2c4      	bcs.n	80004e2 <__udivmoddi4+0x222>
 8000558:	4542      	cmp	r2, r8
 800055a:	d2c2      	bcs.n	80004e2 <__udivmoddi4+0x222>
 800055c:	f1a9 0102 	sub.w	r1, r9, #2
 8000560:	443a      	add	r2, r7
 8000562:	e7be      	b.n	80004e2 <__udivmoddi4+0x222>
 8000564:	45f0      	cmp	r8, lr
 8000566:	d29d      	bcs.n	80004a4 <__udivmoddi4+0x1e4>
 8000568:	ebbe 0302 	subs.w	r3, lr, r2
 800056c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000570:	3801      	subs	r0, #1
 8000572:	46e1      	mov	r9, ip
 8000574:	e796      	b.n	80004a4 <__udivmoddi4+0x1e4>
 8000576:	eba7 0909 	sub.w	r9, r7, r9
 800057a:	4449      	add	r1, r9
 800057c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000580:	fbb1 f9fe 	udiv	r9, r1, lr
 8000584:	fb09 f804 	mul.w	r8, r9, r4
 8000588:	e7db      	b.n	8000542 <__udivmoddi4+0x282>
 800058a:	4673      	mov	r3, lr
 800058c:	e77f      	b.n	800048e <__udivmoddi4+0x1ce>
 800058e:	4650      	mov	r0, sl
 8000590:	e766      	b.n	8000460 <__udivmoddi4+0x1a0>
 8000592:	4608      	mov	r0, r1
 8000594:	e6fd      	b.n	8000392 <__udivmoddi4+0xd2>
 8000596:	443b      	add	r3, r7
 8000598:	3a02      	subs	r2, #2
 800059a:	e733      	b.n	8000404 <__udivmoddi4+0x144>
 800059c:	f1ac 0c02 	sub.w	ip, ip, #2
 80005a0:	443b      	add	r3, r7
 80005a2:	e71c      	b.n	80003de <__udivmoddi4+0x11e>
 80005a4:	4649      	mov	r1, r9
 80005a6:	e79c      	b.n	80004e2 <__udivmoddi4+0x222>
 80005a8:	eba1 0109 	sub.w	r1, r1, r9
 80005ac:	46c4      	mov	ip, r8
 80005ae:	fbb1 f9fe 	udiv	r9, r1, lr
 80005b2:	fb09 f804 	mul.w	r8, r9, r4
 80005b6:	e7c4      	b.n	8000542 <__udivmoddi4+0x282>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <L3GD20_ReadWhoAmI>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
uint8_t L3GD20_ReadWhoAmI(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b082      	sub	sp, #8
 80005c0:	af00      	add	r7, sp, #0
  uint8_t tx = 0x8F; // 0x0F | 0x80 (lecture SPI)
 80005c2:	238f      	movs	r3, #143	@ 0x8f
 80005c4:	71fb      	strb	r3, [r7, #7]
  uint8_t rx = 0x00;
 80005c6:	2300      	movs	r3, #0
 80005c8:	71bb      	strb	r3, [r7, #6]

  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_RESET); // NCS low
 80005ca:	2200      	movs	r2, #0
 80005cc:	2102      	movs	r1, #2
 80005ce:	480d      	ldr	r0, [pc, #52]	@ (8000604 <L3GD20_ReadWhoAmI+0x48>)
 80005d0:	f001 f866 	bl	80016a0 <HAL_GPIO_WritePin>
  HAL_SPI_Transmit(&hspi5, &tx, 1, HAL_MAX_DELAY);       // Envoi de l'adresse
 80005d4:	1df9      	adds	r1, r7, #7
 80005d6:	f04f 33ff 	mov.w	r3, #4294967295
 80005da:	2201      	movs	r2, #1
 80005dc:	480a      	ldr	r0, [pc, #40]	@ (8000608 <L3GD20_ReadWhoAmI+0x4c>)
 80005de:	f001 fde8 	bl	80021b2 <HAL_SPI_Transmit>
  HAL_SPI_Receive(&hspi5, &rx, 1, HAL_MAX_DELAY);        // Lecture de la réponse
 80005e2:	1db9      	adds	r1, r7, #6
 80005e4:	f04f 33ff 	mov.w	r3, #4294967295
 80005e8:	2201      	movs	r2, #1
 80005ea:	4807      	ldr	r0, [pc, #28]	@ (8000608 <L3GD20_ReadWhoAmI+0x4c>)
 80005ec:	f001 ff25 	bl	800243a <HAL_SPI_Receive>
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_1, GPIO_PIN_SET);    // NCS high
 80005f0:	2201      	movs	r2, #1
 80005f2:	2102      	movs	r1, #2
 80005f4:	4803      	ldr	r0, [pc, #12]	@ (8000604 <L3GD20_ReadWhoAmI+0x48>)
 80005f6:	f001 f853 	bl	80016a0 <HAL_GPIO_WritePin>

  return rx;
 80005fa:	79bb      	ldrb	r3, [r7, #6]
}
 80005fc:	4618      	mov	r0, r3
 80005fe:	3708      	adds	r7, #8
 8000600:	46bd      	mov	sp, r7
 8000602:	bd80      	pop	{r7, pc}
 8000604:	40020800 	.word	0x40020800
 8000608:	20000084 	.word	0x20000084

0800060c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b084      	sub	sp, #16
 8000610:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000612:	f000 fd15 	bl	8001040 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000616:	f000 f831 	bl	800067c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800061a:	f000 f8d5 	bl	80007c8 <MX_GPIO_Init>
  MX_SPI5_Init();
 800061e:	f000 f89d 	bl	800075c <MX_SPI5_Init>
  /* USER CODE BEGIN 2 */
  printf("Hello depuis STM32 via ITM/SWO !\n");
 8000622:	4812      	ldr	r0, [pc, #72]	@ (800066c <main+0x60>)
 8000624:	f002 fc38 	bl	8002e98 <puts>

  printf("Test WHO_AM_I...\n");
 8000628:	4811      	ldr	r0, [pc, #68]	@ (8000670 <main+0x64>)
 800062a:	f002 fc35 	bl	8002e98 <puts>
  uint8_t who = L3GD20_ReadWhoAmI();
 800062e:	f7ff ffc5 	bl	80005bc <L3GD20_ReadWhoAmI>
 8000632:	4603      	mov	r3, r0
 8000634:	72fb      	strb	r3, [r7, #11]
  printf("WHO_AM_I = 0x%02X\n", who);
 8000636:	7afb      	ldrb	r3, [r7, #11]
 8000638:	4619      	mov	r1, r3
 800063a:	480e      	ldr	r0, [pc, #56]	@ (8000674 <main+0x68>)
 800063c:	f002 fbc4 	bl	8002dc8 <iprintf>

  uint32_t now = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	607b      	str	r3, [r7, #4]
  uint32_t last = 0;
 8000644:	2300      	movs	r3, #0
 8000646:	60fb      	str	r3, [r7, #12]
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    now = HAL_GetTick();
 8000648:	f000 fd60 	bl	800110c <HAL_GetTick>
 800064c:	6078      	str	r0, [r7, #4]
    if (now - last >= 1000) // Toggle every second
 800064e:	687a      	ldr	r2, [r7, #4]
 8000650:	68fb      	ldr	r3, [r7, #12]
 8000652:	1ad3      	subs	r3, r2, r3
 8000654:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000658:	d3f6      	bcc.n	8000648 <main+0x3c>
    {
      HAL_GPIO_TogglePin(LD4_GPIO_Port, LD4_Pin);
 800065a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800065e:	4806      	ldr	r0, [pc, #24]	@ (8000678 <main+0x6c>)
 8000660:	f001 f837 	bl	80016d2 <HAL_GPIO_TogglePin>
      last = now;
 8000664:	687b      	ldr	r3, [r7, #4]
 8000666:	60fb      	str	r3, [r7, #12]
    now = HAL_GetTick();
 8000668:	e7ee      	b.n	8000648 <main+0x3c>
 800066a:	bf00      	nop
 800066c:	08003b74 	.word	0x08003b74
 8000670:	08003b98 	.word	0x08003b98
 8000674:	08003bac 	.word	0x08003bac
 8000678:	40021800 	.word	0x40021800

0800067c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800067c:	b580      	push	{r7, lr}
 800067e:	b094      	sub	sp, #80	@ 0x50
 8000680:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000682:	f107 0320 	add.w	r3, r7, #32
 8000686:	2230      	movs	r2, #48	@ 0x30
 8000688:	2100      	movs	r1, #0
 800068a:	4618      	mov	r0, r3
 800068c:	f002 fce4 	bl	8003058 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000690:	f107 030c 	add.w	r3, r7, #12
 8000694:	2200      	movs	r2, #0
 8000696:	601a      	str	r2, [r3, #0]
 8000698:	605a      	str	r2, [r3, #4]
 800069a:	609a      	str	r2, [r3, #8]
 800069c:	60da      	str	r2, [r3, #12]
 800069e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006a0:	2300      	movs	r3, #0
 80006a2:	60bb      	str	r3, [r7, #8]
 80006a4:	4b2b      	ldr	r3, [pc, #172]	@ (8000754 <SystemClock_Config+0xd8>)
 80006a6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006a8:	4a2a      	ldr	r2, [pc, #168]	@ (8000754 <SystemClock_Config+0xd8>)
 80006aa:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	6413      	str	r3, [r2, #64]	@ 0x40
 80006b0:	4b28      	ldr	r3, [pc, #160]	@ (8000754 <SystemClock_Config+0xd8>)
 80006b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006b4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006b8:	60bb      	str	r3, [r7, #8]
 80006ba:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006bc:	2300      	movs	r3, #0
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	4b25      	ldr	r3, [pc, #148]	@ (8000758 <SystemClock_Config+0xdc>)
 80006c2:	681b      	ldr	r3, [r3, #0]
 80006c4:	4a24      	ldr	r2, [pc, #144]	@ (8000758 <SystemClock_Config+0xdc>)
 80006c6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80006ca:	6013      	str	r3, [r2, #0]
 80006cc:	4b22      	ldr	r3, [pc, #136]	@ (8000758 <SystemClock_Config+0xdc>)
 80006ce:	681b      	ldr	r3, [r3, #0]
 80006d0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80006d4:	607b      	str	r3, [r7, #4]
 80006d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006d8:	2302      	movs	r3, #2
 80006da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006dc:	2301      	movs	r3, #1
 80006de:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006e0:	2310      	movs	r3, #16
 80006e2:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006e4:	2302      	movs	r3, #2
 80006e6:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006e8:	2300      	movs	r3, #0
 80006ea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006ec:	2308      	movs	r3, #8
 80006ee:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006f0:	23b4      	movs	r3, #180	@ 0xb4
 80006f2:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006f4:	2302      	movs	r3, #2
 80006f6:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006f8:	2307      	movs	r3, #7
 80006fa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006fc:	f107 0320 	add.w	r3, r7, #32
 8000700:	4618      	mov	r0, r3
 8000702:	f001 f869 	bl	80017d8 <HAL_RCC_OscConfig>
 8000706:	4603      	mov	r3, r0
 8000708:	2b00      	cmp	r3, #0
 800070a:	d001      	beq.n	8000710 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800070c:	f000 fae4 	bl	8000cd8 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8000710:	f001 f812 	bl	8001738 <HAL_PWREx_EnableOverDrive>
 8000714:	4603      	mov	r3, r0
 8000716:	2b00      	cmp	r3, #0
 8000718:	d001      	beq.n	800071e <SystemClock_Config+0xa2>
  {
    Error_Handler();
 800071a:	f000 fadd 	bl	8000cd8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800071e:	230f      	movs	r3, #15
 8000720:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000722:	2302      	movs	r3, #2
 8000724:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000726:	2300      	movs	r3, #0
 8000728:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800072a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800072e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000730:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000734:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000736:	f107 030c 	add.w	r3, r7, #12
 800073a:	2105      	movs	r1, #5
 800073c:	4618      	mov	r0, r3
 800073e:	f001 fac3 	bl	8001cc8 <HAL_RCC_ClockConfig>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d001      	beq.n	800074c <SystemClock_Config+0xd0>
  {
    Error_Handler();
 8000748:	f000 fac6 	bl	8000cd8 <Error_Handler>
  }
}
 800074c:	bf00      	nop
 800074e:	3750      	adds	r7, #80	@ 0x50
 8000750:	46bd      	mov	sp, r7
 8000752:	bd80      	pop	{r7, pc}
 8000754:	40023800 	.word	0x40023800
 8000758:	40007000 	.word	0x40007000

0800075c <MX_SPI5_Init>:
  * @brief SPI5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI5_Init(void)
{
 800075c:	b580      	push	{r7, lr}
 800075e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  /* SPI5 parameter configuration*/
  hspi5.Instance = SPI5;
 8000760:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000762:	4a18      	ldr	r2, [pc, #96]	@ (80007c4 <MX_SPI5_Init+0x68>)
 8000764:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8000766:	4b16      	ldr	r3, [pc, #88]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000768:	f44f 7282 	mov.w	r2, #260	@ 0x104
 800076c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800076e:	4b14      	ldr	r3, [pc, #80]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000770:	2200      	movs	r2, #0
 8000772:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_8BIT;
 8000774:	4b12      	ldr	r3, [pc, #72]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000776:	2200      	movs	r2, #0
 8000778:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800077a:	4b11      	ldr	r3, [pc, #68]	@ (80007c0 <MX_SPI5_Init+0x64>)
 800077c:	2202      	movs	r2, #2
 800077e:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_2EDGE;
 8000780:	4b0f      	ldr	r3, [pc, #60]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000782:	2201      	movs	r2, #1
 8000784:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8000786:	4b0e      	ldr	r3, [pc, #56]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000788:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800078c:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_16;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000790:	2218      	movs	r2, #24
 8000792:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000794:	4b0a      	ldr	r3, [pc, #40]	@ (80007c0 <MX_SPI5_Init+0x64>)
 8000796:	2200      	movs	r2, #0
 8000798:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800079a:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <MX_SPI5_Init+0x64>)
 800079c:	2200      	movs	r2, #0
 800079e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007a0:	4b07      	ldr	r3, [pc, #28]	@ (80007c0 <MX_SPI5_Init+0x64>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi5.Init.CRCPolynomial = 10;
 80007a6:	4b06      	ldr	r3, [pc, #24]	@ (80007c0 <MX_SPI5_Init+0x64>)
 80007a8:	220a      	movs	r2, #10
 80007aa:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80007ac:	4804      	ldr	r0, [pc, #16]	@ (80007c0 <MX_SPI5_Init+0x64>)
 80007ae:	f001 fc77 	bl	80020a0 <HAL_SPI_Init>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d001      	beq.n	80007bc <MX_SPI5_Init+0x60>
  {
    Error_Handler();
 80007b8:	f000 fa8e 	bl	8000cd8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80007bc:	bf00      	nop
 80007be:	bd80      	pop	{r7, pc}
 80007c0:	20000084 	.word	0x20000084
 80007c4:	40015000 	.word	0x40015000

080007c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	b08e      	sub	sp, #56	@ 0x38
 80007cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007ce:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80007d2:	2200      	movs	r2, #0
 80007d4:	601a      	str	r2, [r3, #0]
 80007d6:	605a      	str	r2, [r3, #4]
 80007d8:	609a      	str	r2, [r3, #8]
 80007da:	60da      	str	r2, [r3, #12]
 80007dc:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80007de:	2300      	movs	r3, #0
 80007e0:	623b      	str	r3, [r7, #32]
 80007e2:	4bb2      	ldr	r3, [pc, #712]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80007e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007e6:	4ab1      	ldr	r2, [pc, #708]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80007e8:	f043 0304 	orr.w	r3, r3, #4
 80007ec:	6313      	str	r3, [r2, #48]	@ 0x30
 80007ee:	4baf      	ldr	r3, [pc, #700]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80007f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80007f2:	f003 0304 	and.w	r3, r3, #4
 80007f6:	623b      	str	r3, [r7, #32]
 80007f8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80007fa:	2300      	movs	r3, #0
 80007fc:	61fb      	str	r3, [r7, #28]
 80007fe:	4bab      	ldr	r3, [pc, #684]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000802:	4aaa      	ldr	r2, [pc, #680]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000804:	f043 0320 	orr.w	r3, r3, #32
 8000808:	6313      	str	r3, [r2, #48]	@ 0x30
 800080a:	4ba8      	ldr	r3, [pc, #672]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	f003 0320 	and.w	r3, r3, #32
 8000812:	61fb      	str	r3, [r7, #28]
 8000814:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000816:	2300      	movs	r3, #0
 8000818:	61bb      	str	r3, [r7, #24]
 800081a:	4ba4      	ldr	r3, [pc, #656]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 800081c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081e:	4aa3      	ldr	r2, [pc, #652]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000820:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000824:	6313      	str	r3, [r2, #48]	@ 0x30
 8000826:	4ba1      	ldr	r3, [pc, #644]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800082e:	61bb      	str	r3, [r7, #24]
 8000830:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000832:	2300      	movs	r3, #0
 8000834:	617b      	str	r3, [r7, #20]
 8000836:	4b9d      	ldr	r3, [pc, #628]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000838:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800083a:	4a9c      	ldr	r2, [pc, #624]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 800083c:	f043 0301 	orr.w	r3, r3, #1
 8000840:	6313      	str	r3, [r2, #48]	@ 0x30
 8000842:	4b9a      	ldr	r3, [pc, #616]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000844:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000846:	f003 0301 	and.w	r3, r3, #1
 800084a:	617b      	str	r3, [r7, #20]
 800084c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800084e:	2300      	movs	r3, #0
 8000850:	613b      	str	r3, [r7, #16]
 8000852:	4b96      	ldr	r3, [pc, #600]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000854:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000856:	4a95      	ldr	r2, [pc, #596]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	6313      	str	r3, [r2, #48]	@ 0x30
 800085e:	4b93      	ldr	r3, [pc, #588]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000860:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	613b      	str	r3, [r7, #16]
 8000868:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800086a:	2300      	movs	r3, #0
 800086c:	60fb      	str	r3, [r7, #12]
 800086e:	4b8f      	ldr	r3, [pc, #572]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000872:	4a8e      	ldr	r2, [pc, #568]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000874:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8000878:	6313      	str	r3, [r2, #48]	@ 0x30
 800087a:	4b8c      	ldr	r3, [pc, #560]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800087e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8000882:	60fb      	str	r3, [r7, #12]
 8000884:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000886:	2300      	movs	r3, #0
 8000888:	60bb      	str	r3, [r7, #8]
 800088a:	4b88      	ldr	r3, [pc, #544]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 800088c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800088e:	4a87      	ldr	r2, [pc, #540]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000890:	f043 0310 	orr.w	r3, r3, #16
 8000894:	6313      	str	r3, [r2, #48]	@ 0x30
 8000896:	4b85      	ldr	r3, [pc, #532]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 8000898:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800089a:	f003 0310 	and.w	r3, r3, #16
 800089e:	60bb      	str	r3, [r7, #8]
 80008a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80008a2:	2300      	movs	r3, #0
 80008a4:	607b      	str	r3, [r7, #4]
 80008a6:	4b81      	ldr	r3, [pc, #516]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80008a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008aa:	4a80      	ldr	r2, [pc, #512]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80008ac:	f043 0308 	orr.w	r3, r3, #8
 80008b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80008b2:	4b7e      	ldr	r3, [pc, #504]	@ (8000aac <MX_GPIO_Init+0x2e4>)
 80008b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80008b6:	f003 0308 	and.w	r3, r3, #8
 80008ba:	607b      	str	r3, [r7, #4]
 80008bc:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin, GPIO_PIN_RESET);
 80008be:	2200      	movs	r2, #0
 80008c0:	2116      	movs	r1, #22
 80008c2:	487b      	ldr	r0, [pc, #492]	@ (8000ab0 <MX_GPIO_Init+0x2e8>)
 80008c4:	f000 feec 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ACP_RST_GPIO_Port, ACP_RST_Pin, GPIO_PIN_RESET);
 80008c8:	2200      	movs	r2, #0
 80008ca:	2180      	movs	r1, #128	@ 0x80
 80008cc:	4879      	ldr	r0, [pc, #484]	@ (8000ab4 <MX_GPIO_Init+0x2ec>)
 80008ce:	f000 fee7 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, RDX_Pin|WRX_DCX_Pin, GPIO_PIN_RESET);
 80008d2:	2200      	movs	r2, #0
 80008d4:	f44f 5140 	mov.w	r1, #12288	@ 0x3000
 80008d8:	4877      	ldr	r0, [pc, #476]	@ (8000ab8 <MX_GPIO_Init+0x2f0>)
 80008da:	f000 fee1 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, LD3_Pin|LD4_Pin, GPIO_PIN_RESET);
 80008de:	2200      	movs	r2, #0
 80008e0:	f44f 41c0 	mov.w	r1, #24576	@ 0x6000
 80008e4:	4875      	ldr	r0, [pc, #468]	@ (8000abc <MX_GPIO_Init+0x2f4>)
 80008e6:	f000 fedb 	bl	80016a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : A0_Pin A1_Pin A2_Pin A3_Pin
                           A4_Pin A5_Pin SDNRAS_Pin A6_Pin
                           A7_Pin A8_Pin A9_Pin */
  GPIO_InitStruct.Pin = A0_Pin|A1_Pin|A2_Pin|A3_Pin
 80008ea:	f64f 033f 	movw	r3, #63551	@ 0xf83f
 80008ee:	627b      	str	r3, [r7, #36]	@ 0x24
                          |A4_Pin|A5_Pin|SDNRAS_Pin|A6_Pin
                          |A7_Pin|A8_Pin|A9_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f0:	2302      	movs	r3, #2
 80008f2:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f4:	2300      	movs	r3, #0
 80008f6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008f8:	2303      	movs	r3, #3
 80008fa:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 80008fc:	230c      	movs	r3, #12
 80008fe:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000900:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000904:	4619      	mov	r1, r3
 8000906:	486e      	ldr	r0, [pc, #440]	@ (8000ac0 <MX_GPIO_Init+0x2f8>)
 8000908:	f000 fd1e 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : ENABLE_Pin */
  GPIO_InitStruct.Pin = ENABLE_Pin;
 800090c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000910:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000912:	2302      	movs	r3, #2
 8000914:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000916:	2300      	movs	r3, #0
 8000918:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800091a:	2300      	movs	r3, #0
 800091c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 800091e:	230e      	movs	r3, #14
 8000920:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(ENABLE_GPIO_Port, &GPIO_InitStruct);
 8000922:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000926:	4619      	mov	r1, r3
 8000928:	4865      	ldr	r0, [pc, #404]	@ (8000ac0 <MX_GPIO_Init+0x2f8>)
 800092a:	f000 fd0d 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : SDNWE_Pin */
  GPIO_InitStruct.Pin = SDNWE_Pin;
 800092e:	2301      	movs	r3, #1
 8000930:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 800093e:	230c      	movs	r3, #12
 8000940:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(SDNWE_GPIO_Port, &GPIO_InitStruct);
 8000942:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000946:	4619      	mov	r1, r3
 8000948:	4859      	ldr	r0, [pc, #356]	@ (8000ab0 <MX_GPIO_Init+0x2e8>)
 800094a:	f000 fcfd 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : NCS_MEMS_SPI_Pin CSX_Pin OTG_FS_PSO_Pin */
  GPIO_InitStruct.Pin = NCS_MEMS_SPI_Pin|CSX_Pin|OTG_FS_PSO_Pin;
 800094e:	2316      	movs	r3, #22
 8000950:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000952:	2301      	movs	r3, #1
 8000954:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000956:	2300      	movs	r3, #0
 8000958:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800095a:	2300      	movs	r3, #0
 800095c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800095e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000962:	4619      	mov	r1, r3
 8000964:	4852      	ldr	r0, [pc, #328]	@ (8000ab0 <MX_GPIO_Init+0x2e8>)
 8000966:	f000 fcef 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800096a:	2301      	movs	r3, #1
 800096c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800096e:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8000972:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 8000974:	2302      	movs	r3, #2
 8000976:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000978:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800097c:	4619      	mov	r1, r3
 800097e:	484d      	ldr	r0, [pc, #308]	@ (8000ab4 <MX_GPIO_Init+0x2ec>)
 8000980:	f000 fce2 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : MEMS_INT1_Pin MEMS_INT2_Pin TP_INT1_Pin */
  GPIO_InitStruct.Pin = MEMS_INT1_Pin|MEMS_INT2_Pin|TP_INT1_Pin;
 8000984:	f248 0306 	movw	r3, #32774	@ 0x8006
 8000988:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 800098a:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 800098e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000990:	2300      	movs	r3, #0
 8000992:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000994:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000998:	4619      	mov	r1, r3
 800099a:	4846      	ldr	r0, [pc, #280]	@ (8000ab4 <MX_GPIO_Init+0x2ec>)
 800099c:	f000 fcd4 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : B5_Pin VSYNC_Pin G2_Pin R4_Pin
                           R5_Pin */
  GPIO_InitStruct.Pin = B5_Pin|VSYNC_Pin|G2_Pin|R4_Pin
 80009a0:	f641 0358 	movw	r3, #6232	@ 0x1858
 80009a4:	627b      	str	r3, [r7, #36]	@ 0x24
                          |R5_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009a6:	2302      	movs	r3, #2
 80009a8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009aa:	2300      	movs	r3, #0
 80009ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ae:	2300      	movs	r3, #0
 80009b0:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 80009b2:	230e      	movs	r3, #14
 80009b4:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009b6:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009ba:	4619      	mov	r1, r3
 80009bc:	483d      	ldr	r0, [pc, #244]	@ (8000ab4 <MX_GPIO_Init+0x2ec>)
 80009be:	f000 fcc3 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : ACP_RST_Pin */
  GPIO_InitStruct.Pin = ACP_RST_Pin;
 80009c2:	2380      	movs	r3, #128	@ 0x80
 80009c4:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009c6:	2301      	movs	r3, #1
 80009c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009ce:	2300      	movs	r3, #0
 80009d0:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(ACP_RST_GPIO_Port, &GPIO_InitStruct);
 80009d2:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009d6:	4619      	mov	r1, r3
 80009d8:	4836      	ldr	r0, [pc, #216]	@ (8000ab4 <MX_GPIO_Init+0x2ec>)
 80009da:	f000 fcb5 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : OTG_FS_OC_Pin */
  GPIO_InitStruct.Pin = OTG_FS_OC_Pin;
 80009de:	2320      	movs	r3, #32
 80009e0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 80009e2:	f44f 1390 	mov.w	r3, #1179648	@ 0x120000
 80009e6:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e8:	2300      	movs	r3, #0
 80009ea:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(OTG_FS_OC_GPIO_Port, &GPIO_InitStruct);
 80009ec:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 80009f0:	4619      	mov	r1, r3
 80009f2:	482f      	ldr	r0, [pc, #188]	@ (8000ab0 <MX_GPIO_Init+0x2e8>)
 80009f4:	f000 fca8 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : R3_Pin R6_Pin */
  GPIO_InitStruct.Pin = R3_Pin|R6_Pin;
 80009f8:	2303      	movs	r3, #3
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fc:	2302      	movs	r3, #2
 80009fe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a00:	2300      	movs	r3, #0
 8000a02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a04:	2300      	movs	r3, #0
 8000a06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000a08:	2309      	movs	r3, #9
 8000a0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a10:	4619      	mov	r1, r3
 8000a12:	482c      	ldr	r0, [pc, #176]	@ (8000ac4 <MX_GPIO_Init+0x2fc>)
 8000a14:	f000 fc98 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : BOOT1_Pin */
  GPIO_InitStruct.Pin = BOOT1_Pin;
 8000a18:	2304      	movs	r3, #4
 8000a1a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(BOOT1_GPIO_Port, &GPIO_InitStruct);
 8000a24:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4826      	ldr	r0, [pc, #152]	@ (8000ac4 <MX_GPIO_Init+0x2fc>)
 8000a2c:	f000 fc8c 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : A10_Pin A11_Pin BA0_Pin BA1_Pin
                           SDCLK_Pin SDNCAS_Pin */
  GPIO_InitStruct.Pin = A10_Pin|A11_Pin|BA0_Pin|BA1_Pin
 8000a30:	f248 1333 	movw	r3, #33075	@ 0x8133
 8000a34:	627b      	str	r3, [r7, #36]	@ 0x24
                          |SDCLK_Pin|SDNCAS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a36:	2302      	movs	r3, #2
 8000a38:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a3a:	2300      	movs	r3, #0
 8000a3c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a3e:	2303      	movs	r3, #3
 8000a40:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a42:	230c      	movs	r3, #12
 8000a44:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a46:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a4a:	4619      	mov	r1, r3
 8000a4c:	481b      	ldr	r0, [pc, #108]	@ (8000abc <MX_GPIO_Init+0x2f4>)
 8000a4e:	f000 fc7b 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : D4_Pin D5_Pin D6_Pin D7_Pin
                           D8_Pin D9_Pin D10_Pin D11_Pin
                           D12_Pin NBL0_Pin NBL1_Pin */
  GPIO_InitStruct.Pin = D4_Pin|D5_Pin|D6_Pin|D7_Pin
 8000a52:	f64f 7383 	movw	r3, #65411	@ 0xff83
 8000a56:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D8_Pin|D9_Pin|D10_Pin|D11_Pin
                          |D12_Pin|NBL0_Pin|NBL1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a58:	2302      	movs	r3, #2
 8000a5a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a60:	2303      	movs	r3, #3
 8000a62:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000a64:	230c      	movs	r3, #12
 8000a66:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000a68:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a6c:	4619      	mov	r1, r3
 8000a6e:	4816      	ldr	r0, [pc, #88]	@ (8000ac8 <MX_GPIO_Init+0x300>)
 8000a70:	f000 fc6a 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : G4_Pin G5_Pin B6_Pin B7_Pin */
  GPIO_InitStruct.Pin = G4_Pin|G5_Pin|B6_Pin|B7_Pin;
 8000a74:	f44f 6370 	mov.w	r3, #3840	@ 0xf00
 8000a78:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	2302      	movs	r3, #2
 8000a7c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a82:	2300      	movs	r3, #0
 8000a84:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000a86:	230e      	movs	r3, #14
 8000a88:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a8a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000a8e:	4619      	mov	r1, r3
 8000a90:	480c      	ldr	r0, [pc, #48]	@ (8000ac4 <MX_GPIO_Init+0x2fc>)
 8000a92:	f000 fc59 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : OTG_HS_ID_Pin OTG_HS_DM_Pin OTG_HS_DP_Pin */
  GPIO_InitStruct.Pin = OTG_HS_ID_Pin|OTG_HS_DM_Pin|OTG_HS_DP_Pin;
 8000a96:	f44f 4350 	mov.w	r3, #53248	@ 0xd000
 8000a9a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a9c:	2302      	movs	r3, #2
 8000a9e:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa0:	2300      	movs	r3, #0
 8000aa2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	633b      	str	r3, [r7, #48]	@ 0x30
 8000aa8:	e010      	b.n	8000acc <MX_GPIO_Init+0x304>
 8000aaa:	bf00      	nop
 8000aac:	40023800 	.word	0x40023800
 8000ab0:	40020800 	.word	0x40020800
 8000ab4:	40020000 	.word	0x40020000
 8000ab8:	40020c00 	.word	0x40020c00
 8000abc:	40021800 	.word	0x40021800
 8000ac0:	40021400 	.word	0x40021400
 8000ac4:	40020400 	.word	0x40020400
 8000ac8:	40021000 	.word	0x40021000
  GPIO_InitStruct.Alternate = GPIO_AF12_OTG_HS_FS;
 8000acc:	230c      	movs	r3, #12
 8000ace:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ad0:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000ad4:	4619      	mov	r1, r3
 8000ad6:	486f      	ldr	r0, [pc, #444]	@ (8000c94 <MX_GPIO_Init+0x4cc>)
 8000ad8:	f000 fc36 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : VBUS_HS_Pin */
  GPIO_InitStruct.Pin = VBUS_HS_Pin;
 8000adc:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000ae0:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ae2:	2300      	movs	r3, #0
 8000ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(VBUS_HS_GPIO_Port, &GPIO_InitStruct);
 8000aea:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000aee:	4619      	mov	r1, r3
 8000af0:	4868      	ldr	r0, [pc, #416]	@ (8000c94 <MX_GPIO_Init+0x4cc>)
 8000af2:	f000 fc29 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : D13_Pin D14_Pin D15_Pin D0_Pin
                           D1_Pin D2_Pin D3_Pin */
  GPIO_InitStruct.Pin = D13_Pin|D14_Pin|D15_Pin|D0_Pin
 8000af6:	f24c 7303 	movw	r3, #50947	@ 0xc703
 8000afa:	627b      	str	r3, [r7, #36]	@ 0x24
                          |D1_Pin|D2_Pin|D3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000afc:	2302      	movs	r3, #2
 8000afe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b00:	2300      	movs	r3, #0
 8000b02:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b04:	2303      	movs	r3, #3
 8000b06:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000b08:	230c      	movs	r3, #12
 8000b0a:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b0c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b10:	4619      	mov	r1, r3
 8000b12:	4861      	ldr	r0, [pc, #388]	@ (8000c98 <MX_GPIO_Init+0x4d0>)
 8000b14:	f000 fc18 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : TE_Pin */
  GPIO_InitStruct.Pin = TE_Pin;
 8000b18:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000b1c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b22:	2300      	movs	r3, #0
 8000b24:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_GPIO_Init(TE_GPIO_Port, &GPIO_InitStruct);
 8000b26:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b2a:	4619      	mov	r1, r3
 8000b2c:	485a      	ldr	r0, [pc, #360]	@ (8000c98 <MX_GPIO_Init+0x4d0>)
 8000b2e:	f000 fc0b 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : RDX_Pin WRX_DCX_Pin */
  GPIO_InitStruct.Pin = RDX_Pin|WRX_DCX_Pin;
 8000b32:	f44f 5340 	mov.w	r3, #12288	@ 0x3000
 8000b36:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b38:	2301      	movs	r3, #1
 8000b3a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b40:	2300      	movs	r3, #0
 8000b42:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b44:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b48:	4619      	mov	r1, r3
 8000b4a:	4853      	ldr	r0, [pc, #332]	@ (8000c98 <MX_GPIO_Init+0x4d0>)
 8000b4c:	f000 fbfc 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : R7_Pin DOTCLK_Pin B3_Pin */
  GPIO_InitStruct.Pin = R7_Pin|DOTCLK_Pin|B3_Pin;
 8000b50:	f44f 630c 	mov.w	r3, #2240	@ 0x8c0
 8000b54:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b56:	2302      	movs	r3, #2
 8000b58:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b62:	230e      	movs	r3, #14
 8000b64:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000b66:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b6a:	4619      	mov	r1, r3
 8000b6c:	484b      	ldr	r0, [pc, #300]	@ (8000c9c <MX_GPIO_Init+0x4d4>)
 8000b6e:	f000 fbeb 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : HSYNC_Pin G6_Pin R2_Pin */
  GPIO_InitStruct.Pin = HSYNC_Pin|G6_Pin|R2_Pin;
 8000b72:	f44f 6398 	mov.w	r3, #1216	@ 0x4c0
 8000b76:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000b78:	2302      	movs	r3, #2
 8000b7a:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b7c:	2300      	movs	r3, #0
 8000b7e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b80:	2300      	movs	r3, #0
 8000b82:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000b84:	230e      	movs	r3, #14
 8000b86:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b88:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000b8c:	4619      	mov	r1, r3
 8000b8e:	4844      	ldr	r0, [pc, #272]	@ (8000ca0 <MX_GPIO_Init+0x4d8>)
 8000b90:	f000 fbda 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SDA_Pin */
  GPIO_InitStruct.Pin = I2C3_SDA_Pin;
 8000b94:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8000b98:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b9a:	2312      	movs	r3, #18
 8000b9c:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000ba6:	2304      	movs	r3, #4
 8000ba8:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SDA_GPIO_Port, &GPIO_InitStruct);
 8000baa:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bae:	4619      	mov	r1, r3
 8000bb0:	483b      	ldr	r0, [pc, #236]	@ (8000ca0 <MX_GPIO_Init+0x4d8>)
 8000bb2:	f000 fbc9 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pin : I2C3_SCL_Pin */
  GPIO_InitStruct.Pin = I2C3_SCL_Pin;
 8000bb6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000bba:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000bbc:	2312      	movs	r3, #18
 8000bbe:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc0:	2300      	movs	r3, #0
 8000bc2:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8000bc8:	2304      	movs	r3, #4
 8000bca:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(I2C3_SCL_GPIO_Port, &GPIO_InitStruct);
 8000bcc:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4834      	ldr	r0, [pc, #208]	@ (8000ca4 <MX_GPIO_Init+0x4dc>)
 8000bd4:	f000 fbb8 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : STLINK_RX_Pin STLINK_TX_Pin */
  GPIO_InitStruct.Pin = STLINK_RX_Pin|STLINK_TX_Pin;
 8000bd8:	f44f 63c0 	mov.w	r3, #1536	@ 0x600
 8000bdc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bde:	2302      	movs	r3, #2
 8000be0:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be2:	2300      	movs	r3, #0
 8000be4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000be6:	2303      	movs	r3, #3
 8000be8:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000bea:	2307      	movs	r3, #7
 8000bec:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bee:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	482b      	ldr	r0, [pc, #172]	@ (8000ca4 <MX_GPIO_Init+0x4dc>)
 8000bf6:	f000 fba7 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : G7_Pin B2_Pin */
  GPIO_InitStruct.Pin = G7_Pin|B2_Pin;
 8000bfa:	2348      	movs	r3, #72	@ 0x48
 8000bfc:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000bfe:	2302      	movs	r3, #2
 8000c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c02:	2300      	movs	r3, #0
 8000c04:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c06:	2300      	movs	r3, #0
 8000c08:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF14_LTDC;
 8000c0a:	230e      	movs	r3, #14
 8000c0c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c0e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c12:	4619      	mov	r1, r3
 8000c14:	4820      	ldr	r0, [pc, #128]	@ (8000c98 <MX_GPIO_Init+0x4d0>)
 8000c16:	f000 fb97 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : G3_Pin B4_Pin */
  GPIO_InitStruct.Pin = G3_Pin|B4_Pin;
 8000c1a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000c1e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c20:	2302      	movs	r3, #2
 8000c22:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c24:	2300      	movs	r3, #0
 8000c26:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c28:	2300      	movs	r3, #0
 8000c2a:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF9_LTDC;
 8000c2c:	2309      	movs	r3, #9
 8000c2e:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c30:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c34:	4619      	mov	r1, r3
 8000c36:	4819      	ldr	r0, [pc, #100]	@ (8000c9c <MX_GPIO_Init+0x4d4>)
 8000c38:	f000 fb86 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD3_Pin LD4_Pin */
  GPIO_InitStruct.Pin = LD3_Pin|LD4_Pin;
 8000c3c:	f44f 43c0 	mov.w	r3, #24576	@ 0x6000
 8000c40:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c42:	2301      	movs	r3, #1
 8000c44:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c46:	2300      	movs	r3, #0
 8000c48:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	633b      	str	r3, [r7, #48]	@ 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c4e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c52:	4619      	mov	r1, r3
 8000c54:	4811      	ldr	r0, [pc, #68]	@ (8000c9c <MX_GPIO_Init+0x4d4>)
 8000c56:	f000 fb77 	bl	8001348 <HAL_GPIO_Init>

  /*Configure GPIO pins : SDCKE1_Pin SDNE1_Pin */
  GPIO_InitStruct.Pin = SDCKE1_Pin|SDNE1_Pin;
 8000c5a:	2360      	movs	r3, #96	@ 0x60
 8000c5c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c5e:	2302      	movs	r3, #2
 8000c60:	62bb      	str	r3, [r7, #40]	@ 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c62:	2300      	movs	r3, #0
 8000c64:	62fb      	str	r3, [r7, #44]	@ 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c66:	2303      	movs	r3, #3
 8000c68:	633b      	str	r3, [r7, #48]	@ 0x30
  GPIO_InitStruct.Alternate = GPIO_AF12_FMC;
 8000c6a:	230c      	movs	r3, #12
 8000c6c:	637b      	str	r3, [r7, #52]	@ 0x34
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c6e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c72:	4619      	mov	r1, r3
 8000c74:	4807      	ldr	r0, [pc, #28]	@ (8000c94 <MX_GPIO_Init+0x4cc>)
 8000c76:	f000 fb67 	bl	8001348 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 0, 0);
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	2100      	movs	r1, #0
 8000c7e:	2006      	movs	r0, #6
 8000c80:	f000 fb2b 	bl	80012da <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 8000c84:	2006      	movs	r0, #6
 8000c86:	f000 fb44 	bl	8001312 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000c8a:	bf00      	nop
 8000c8c:	3738      	adds	r7, #56	@ 0x38
 8000c8e:	46bd      	mov	sp, r7
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020400 	.word	0x40020400
 8000c98:	40020c00 	.word	0x40020c00
 8000c9c:	40021800 	.word	0x40021800
 8000ca0:	40020800 	.word	0x40020800
 8000ca4:	40020000 	.word	0x40020000

08000ca8 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	4603      	mov	r3, r0
 8000cb0:	80fb      	strh	r3, [r7, #6]
  if (GPIO_Pin == B1_Pin)
 8000cb2:	88fb      	ldrh	r3, [r7, #6]
 8000cb4:	2b01      	cmp	r3, #1
 8000cb6:	d107      	bne.n	8000cc8 <HAL_GPIO_EXTI_Callback+0x20>
  {
    HAL_GPIO_TogglePin(LD3_GPIO_Port, LD3_Pin);
 8000cb8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000cbc:	4804      	ldr	r0, [pc, #16]	@ (8000cd0 <HAL_GPIO_EXTI_Callback+0x28>)
 8000cbe:	f000 fd08 	bl	80016d2 <HAL_GPIO_TogglePin>
    printf("Button pressed, toggling LD3!\n");
 8000cc2:	4804      	ldr	r0, [pc, #16]	@ (8000cd4 <HAL_GPIO_EXTI_Callback+0x2c>)
 8000cc4:	f002 f8e8 	bl	8002e98 <puts>
  }
}
 8000cc8:	bf00      	nop
 8000cca:	3708      	adds	r7, #8
 8000ccc:	46bd      	mov	sp, r7
 8000cce:	bd80      	pop	{r7, pc}
 8000cd0:	40021800 	.word	0x40021800
 8000cd4:	08003bc0 	.word	0x08003bc0

08000cd8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cd8:	b480      	push	{r7}
 8000cda:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cdc:	b672      	cpsid	i
}
 8000cde:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000ce0:	bf00      	nop
 8000ce2:	e7fd      	b.n	8000ce0 <Error_Handler+0x8>

08000ce4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b082      	sub	sp, #8
 8000ce8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000cea:	2300      	movs	r3, #0
 8000cec:	607b      	str	r3, [r7, #4]
 8000cee:	4b10      	ldr	r3, [pc, #64]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cf2:	4a0f      	ldr	r2, [pc, #60]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cf4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000cf8:	6453      	str	r3, [r2, #68]	@ 0x44
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000cfc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000cfe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000d02:	607b      	str	r3, [r7, #4]
 8000d04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d06:	2300      	movs	r3, #0
 8000d08:	603b      	str	r3, [r7, #0]
 8000d0a:	4b09      	ldr	r3, [pc, #36]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d0e:	4a08      	ldr	r2, [pc, #32]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000d14:	6413      	str	r3, [r2, #64]	@ 0x40
 8000d16:	4b06      	ldr	r3, [pc, #24]	@ (8000d30 <HAL_MspInit+0x4c>)
 8000d18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000d1e:	603b      	str	r3, [r7, #0]
 8000d20:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000d22:	2007      	movs	r0, #7
 8000d24:	f000 face 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d28:	bf00      	nop
 8000d2a:	3708      	adds	r7, #8
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	bd80      	pop	{r7, pc}
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	@ 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI5)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a19      	ldr	r2, [pc, #100]	@ (8000db8 <HAL_SPI_MspInit+0x84>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d12c      	bne.n	8000db0 <HAL_SPI_MspInit+0x7c>
  {
    /* USER CODE BEGIN SPI5_MspInit 0 */

    /* USER CODE END SPI5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI5_CLK_ENABLE();
 8000d56:	2300      	movs	r3, #0
 8000d58:	613b      	str	r3, [r7, #16]
 8000d5a:	4b18      	ldr	r3, [pc, #96]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d5c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d5e:	4a17      	ldr	r2, [pc, #92]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d60:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000d64:	6453      	str	r3, [r2, #68]	@ 0x44
 8000d66:	4b15      	ldr	r3, [pc, #84]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d6a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000d6e:	613b      	str	r3, [r7, #16]
 8000d70:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOF_CLK_ENABLE();
 8000d72:	2300      	movs	r3, #0
 8000d74:	60fb      	str	r3, [r7, #12]
 8000d76:	4b11      	ldr	r3, [pc, #68]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d7a:	4a10      	ldr	r2, [pc, #64]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d7c:	f043 0320 	orr.w	r3, r3, #32
 8000d80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000d82:	4b0e      	ldr	r3, [pc, #56]	@ (8000dbc <HAL_SPI_MspInit+0x88>)
 8000d84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000d86:	f003 0320 	and.w	r3, r3, #32
 8000d8a:	60fb      	str	r3, [r7, #12]
 8000d8c:	68fb      	ldr	r3, [r7, #12]
    /**SPI5 GPIO Configuration
    PF7     ------> SPI5_SCK
    PF8     ------> SPI5_MISO
    PF9     ------> SPI5_MOSI
    */
    GPIO_InitStruct.Pin = SPI5_SCK_Pin|SPI5_MISO_Pin|SPI5_MOSI_Pin;
 8000d8e:	f44f 7360 	mov.w	r3, #896	@ 0x380
 8000d92:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d94:	2302      	movs	r3, #2
 8000d96:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d98:	2300      	movs	r3, #0
 8000d9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d9c:	2300      	movs	r3, #0
 8000d9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8000da0:	2305      	movs	r3, #5
 8000da2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8000da4:	f107 0314 	add.w	r3, r7, #20
 8000da8:	4619      	mov	r1, r3
 8000daa:	4805      	ldr	r0, [pc, #20]	@ (8000dc0 <HAL_SPI_MspInit+0x8c>)
 8000dac:	f000 facc 	bl	8001348 <HAL_GPIO_Init>

    /* USER CODE END SPI5_MspInit 1 */

  }

}
 8000db0:	bf00      	nop
 8000db2:	3728      	adds	r7, #40	@ 0x28
 8000db4:	46bd      	mov	sp, r7
 8000db6:	bd80      	pop	{r7, pc}
 8000db8:	40015000 	.word	0x40015000
 8000dbc:	40023800 	.word	0x40023800
 8000dc0:	40021400 	.word	0x40021400

08000dc4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000dc4:	b480      	push	{r7}
 8000dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000dc8:	bf00      	nop
 8000dca:	e7fd      	b.n	8000dc8 <NMI_Handler+0x4>

08000dcc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000dd0:	bf00      	nop
 8000dd2:	e7fd      	b.n	8000dd0 <HardFault_Handler+0x4>

08000dd4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000dd4:	b480      	push	{r7}
 8000dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000dd8:	bf00      	nop
 8000dda:	e7fd      	b.n	8000dd8 <MemManage_Handler+0x4>

08000ddc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ddc:	b480      	push	{r7}
 8000dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000de0:	bf00      	nop
 8000de2:	e7fd      	b.n	8000de0 <BusFault_Handler+0x4>

08000de4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000de4:	b480      	push	{r7}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000de8:	bf00      	nop
 8000dea:	e7fd      	b.n	8000de8 <UsageFault_Handler+0x4>

08000dec <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dec:	b480      	push	{r7}
 8000dee:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000df0:	bf00      	nop
 8000df2:	46bd      	mov	sp, r7
 8000df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000df8:	4770      	bx	lr

08000dfa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dfa:	b480      	push	{r7}
 8000dfc:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dfe:	bf00      	nop
 8000e00:	46bd      	mov	sp, r7
 8000e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e06:	4770      	bx	lr

08000e08 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000e08:	b480      	push	{r7}
 8000e0a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000e0c:	bf00      	nop
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000e1a:	f000 f963 	bl	80010e4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000e1e:	bf00      	nop
 8000e20:	bd80      	pop	{r7, pc}

08000e22 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000e22:	b580      	push	{r7, lr}
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(B1_Pin);
 8000e26:	2001      	movs	r0, #1
 8000e28:	f000 fc6e 	bl	8001708 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000e2c:	bf00      	nop
 8000e2e:	bd80      	pop	{r7, pc}

08000e30 <ITM_SendChar>:
/* ITM register addresses */
#define ITM_STIMULUS_PORT0   	*((volatile uint32_t*) 0xE0000000 )
#define ITM_TRACE_EN          	*((volatile uint32_t*) 0xE0000E00 )

void ITM_SendChar(uint8_t ch)
{
 8000e30:	b480      	push	{r7}
 8000e32:	b083      	sub	sp, #12
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	4603      	mov	r3, r0
 8000e38:	71fb      	strb	r3, [r7, #7]

	//Enable TRCENA
	DEMCR |= ( 1 << 24);
 8000e3a:	4b0f      	ldr	r3, [pc, #60]	@ (8000e78 <ITM_SendChar+0x48>)
 8000e3c:	681b      	ldr	r3, [r3, #0]
 8000e3e:	4a0e      	ldr	r2, [pc, #56]	@ (8000e78 <ITM_SendChar+0x48>)
 8000e40:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8000e44:	6013      	str	r3, [r2, #0]

	//enable stimulus port 0
	ITM_TRACE_EN |= ( 1 << 0);
 8000e46:	4b0d      	ldr	r3, [pc, #52]	@ (8000e7c <ITM_SendChar+0x4c>)
 8000e48:	681b      	ldr	r3, [r3, #0]
 8000e4a:	4a0c      	ldr	r2, [pc, #48]	@ (8000e7c <ITM_SendChar+0x4c>)
 8000e4c:	f043 0301 	orr.w	r3, r3, #1
 8000e50:	6013      	str	r3, [r2, #0]

	// read FIFO status in bit [0]:
	while(!(ITM_STIMULUS_PORT0 & 1));
 8000e52:	bf00      	nop
 8000e54:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8000e58:	681b      	ldr	r3, [r3, #0]
 8000e5a:	f003 0301 	and.w	r3, r3, #1
 8000e5e:	2b00      	cmp	r3, #0
 8000e60:	d0f8      	beq.n	8000e54 <ITM_SendChar+0x24>

	//Write to ITM stimulus port0
	ITM_STIMULUS_PORT0 = ch;
 8000e62:	f04f 4260 	mov.w	r2, #3758096384	@ 0xe0000000
 8000e66:	79fb      	ldrb	r3, [r7, #7]
 8000e68:	6013      	str	r3, [r2, #0]
}
 8000e6a:	bf00      	nop
 8000e6c:	370c      	adds	r7, #12
 8000e6e:	46bd      	mov	sp, r7
 8000e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e74:	4770      	bx	lr
 8000e76:	bf00      	nop
 8000e78:	e000edfc 	.word	0xe000edfc
 8000e7c:	e0000e00 	.word	0xe0000e00

08000e80 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e80:	b580      	push	{r7, lr}
 8000e82:	b086      	sub	sp, #24
 8000e84:	af00      	add	r7, sp, #0
 8000e86:	60f8      	str	r0, [r7, #12]
 8000e88:	60b9      	str	r1, [r7, #8]
 8000e8a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8c:	2300      	movs	r3, #0
 8000e8e:	617b      	str	r3, [r7, #20]
 8000e90:	e00a      	b.n	8000ea8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e92:	f3af 8000 	nop.w
 8000e96:	4601      	mov	r1, r0
 8000e98:	68bb      	ldr	r3, [r7, #8]
 8000e9a:	1c5a      	adds	r2, r3, #1
 8000e9c:	60ba      	str	r2, [r7, #8]
 8000e9e:	b2ca      	uxtb	r2, r1
 8000ea0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf0      	blt.n	8000e92 <_read+0x12>
  }

  return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000eba:	b580      	push	{r7, lr}
 8000ebc:	b086      	sub	sp, #24
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	60f8      	str	r0, [r7, #12]
 8000ec2:	60b9      	str	r1, [r7, #8]
 8000ec4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	617b      	str	r3, [r7, #20]
 8000eca:	e009      	b.n	8000ee0 <_write+0x26>
  {
    // __io_putchar(*ptr++);
    ITM_SendChar(*ptr++);
 8000ecc:	68bb      	ldr	r3, [r7, #8]
 8000ece:	1c5a      	adds	r2, r3, #1
 8000ed0:	60ba      	str	r2, [r7, #8]
 8000ed2:	781b      	ldrb	r3, [r3, #0]
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	f7ff ffab 	bl	8000e30 <ITM_SendChar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eda:	697b      	ldr	r3, [r7, #20]
 8000edc:	3301      	adds	r3, #1
 8000ede:	617b      	str	r3, [r7, #20]
 8000ee0:	697a      	ldr	r2, [r7, #20]
 8000ee2:	687b      	ldr	r3, [r7, #4]
 8000ee4:	429a      	cmp	r2, r3
 8000ee6:	dbf1      	blt.n	8000ecc <_write+0x12>
  }
  return len;
 8000ee8:	687b      	ldr	r3, [r7, #4]
}
 8000eea:	4618      	mov	r0, r3
 8000eec:	3718      	adds	r7, #24
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}

08000ef2 <_close>:

int _close(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000efa:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000efe:	4618      	mov	r0, r3
 8000f00:	370c      	adds	r7, #12
 8000f02:	46bd      	mov	sp, r7
 8000f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f08:	4770      	bx	lr

08000f0a <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000f0a:	b480      	push	{r7}
 8000f0c:	b083      	sub	sp, #12
 8000f0e:	af00      	add	r7, sp, #0
 8000f10:	6078      	str	r0, [r7, #4]
 8000f12:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000f14:	683b      	ldr	r3, [r7, #0]
 8000f16:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000f1a:	605a      	str	r2, [r3, #4]
  return 0;
 8000f1c:	2300      	movs	r3, #0
}
 8000f1e:	4618      	mov	r0, r3
 8000f20:	370c      	adds	r7, #12
 8000f22:	46bd      	mov	sp, r7
 8000f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f28:	4770      	bx	lr

08000f2a <_isatty>:

int _isatty(int file)
{
 8000f2a:	b480      	push	{r7}
 8000f2c:	b083      	sub	sp, #12
 8000f2e:	af00      	add	r7, sp, #0
 8000f30:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f32:	2301      	movs	r3, #1
}
 8000f34:	4618      	mov	r0, r3
 8000f36:	370c      	adds	r7, #12
 8000f38:	46bd      	mov	sp, r7
 8000f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f3e:	4770      	bx	lr

08000f40 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f40:	b480      	push	{r7}
 8000f42:	b085      	sub	sp, #20
 8000f44:	af00      	add	r7, sp, #0
 8000f46:	60f8      	str	r0, [r7, #12]
 8000f48:	60b9      	str	r1, [r7, #8]
 8000f4a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f4c:	2300      	movs	r3, #0
}
 8000f4e:	4618      	mov	r0, r3
 8000f50:	3714      	adds	r7, #20
 8000f52:	46bd      	mov	sp, r7
 8000f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f58:	4770      	bx	lr
	...

08000f5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f5c:	b580      	push	{r7, lr}
 8000f5e:	b086      	sub	sp, #24
 8000f60:	af00      	add	r7, sp, #0
 8000f62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f64:	4a14      	ldr	r2, [pc, #80]	@ (8000fb8 <_sbrk+0x5c>)
 8000f66:	4b15      	ldr	r3, [pc, #84]	@ (8000fbc <_sbrk+0x60>)
 8000f68:	1ad3      	subs	r3, r2, r3
 8000f6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f6c:	697b      	ldr	r3, [r7, #20]
 8000f6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f70:	4b13      	ldr	r3, [pc, #76]	@ (8000fc0 <_sbrk+0x64>)
 8000f72:	681b      	ldr	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d102      	bne.n	8000f7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f78:	4b11      	ldr	r3, [pc, #68]	@ (8000fc0 <_sbrk+0x64>)
 8000f7a:	4a12      	ldr	r2, [pc, #72]	@ (8000fc4 <_sbrk+0x68>)
 8000f7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f7e:	4b10      	ldr	r3, [pc, #64]	@ (8000fc0 <_sbrk+0x64>)
 8000f80:	681a      	ldr	r2, [r3, #0]
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4413      	add	r3, r2
 8000f86:	693a      	ldr	r2, [r7, #16]
 8000f88:	429a      	cmp	r2, r3
 8000f8a:	d207      	bcs.n	8000f9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f8c:	f002 f8b2 	bl	80030f4 <__errno>
 8000f90:	4603      	mov	r3, r0
 8000f92:	220c      	movs	r2, #12
 8000f94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f96:	f04f 33ff 	mov.w	r3, #4294967295
 8000f9a:	e009      	b.n	8000fb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f9c:	4b08      	ldr	r3, [pc, #32]	@ (8000fc0 <_sbrk+0x64>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000fa2:	4b07      	ldr	r3, [pc, #28]	@ (8000fc0 <_sbrk+0x64>)
 8000fa4:	681a      	ldr	r2, [r3, #0]
 8000fa6:	687b      	ldr	r3, [r7, #4]
 8000fa8:	4413      	add	r3, r2
 8000faa:	4a05      	ldr	r2, [pc, #20]	@ (8000fc0 <_sbrk+0x64>)
 8000fac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000fae:	68fb      	ldr	r3, [r7, #12]
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3718      	adds	r7, #24
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}
 8000fb8:	20030000 	.word	0x20030000
 8000fbc:	00000400 	.word	0x00000400
 8000fc0:	200000dc 	.word	0x200000dc
 8000fc4:	20000230 	.word	0x20000230

08000fc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fc8:	b480      	push	{r7}
 8000fca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fcc:	4b06      	ldr	r3, [pc, #24]	@ (8000fe8 <SystemInit+0x20>)
 8000fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000fd2:	4a05      	ldr	r2, [pc, #20]	@ (8000fe8 <SystemInit+0x20>)
 8000fd4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000fd8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fdc:	bf00      	nop
 8000fde:	46bd      	mov	sp, r7
 8000fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe4:	4770      	bx	lr
 8000fe6:	bf00      	nop
 8000fe8:	e000ed00 	.word	0xe000ed00

08000fec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8000fec:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001024 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000ff0:	f7ff ffea 	bl	8000fc8 <SystemInit>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000ff4:	480c      	ldr	r0, [pc, #48]	@ (8001028 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000ff6:	490d      	ldr	r1, [pc, #52]	@ (800102c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000ff8:	4a0d      	ldr	r2, [pc, #52]	@ (8001030 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000ffa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000ffc:	e002      	b.n	8001004 <LoopCopyDataInit>

08000ffe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000ffe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001000:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001002:	3304      	adds	r3, #4

08001004 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001004:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001006:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001008:	d3f9      	bcc.n	8000ffe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800100a:	4a0a      	ldr	r2, [pc, #40]	@ (8001034 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800100c:	4c0a      	ldr	r4, [pc, #40]	@ (8001038 <LoopFillZerobss+0x22>)
  movs r3, #0
 800100e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001010:	e001      	b.n	8001016 <LoopFillZerobss>

08001012 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001012:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001014:	3204      	adds	r2, #4

08001016 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001016:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001018:	d3fb      	bcc.n	8001012 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 800101a:	f002 f871 	bl	8003100 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800101e:	f7ff faf5 	bl	800060c <main>
  bx  lr    
 8001022:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 8001024:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001028:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800102c:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8001030:	08003c34 	.word	0x08003c34
  ldr r2, =_sbss
 8001034:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8001038:	20000230 	.word	0x20000230

0800103c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800103c:	e7fe      	b.n	800103c <ADC_IRQHandler>
	...

08001040 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001040:	b580      	push	{r7, lr}
 8001042:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001044:	4b0e      	ldr	r3, [pc, #56]	@ (8001080 <HAL_Init+0x40>)
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	4a0d      	ldr	r2, [pc, #52]	@ (8001080 <HAL_Init+0x40>)
 800104a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800104e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001050:	4b0b      	ldr	r3, [pc, #44]	@ (8001080 <HAL_Init+0x40>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	4a0a      	ldr	r2, [pc, #40]	@ (8001080 <HAL_Init+0x40>)
 8001056:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800105a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800105c:	4b08      	ldr	r3, [pc, #32]	@ (8001080 <HAL_Init+0x40>)
 800105e:	681b      	ldr	r3, [r3, #0]
 8001060:	4a07      	ldr	r2, [pc, #28]	@ (8001080 <HAL_Init+0x40>)
 8001062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001066:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001068:	2003      	movs	r0, #3
 800106a:	f000 f92b 	bl	80012c4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800106e:	2000      	movs	r0, #0
 8001070:	f000 f808 	bl	8001084 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001074:	f7ff fe36 	bl	8000ce4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001078:	2300      	movs	r3, #0
}
 800107a:	4618      	mov	r0, r3
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40023c00 	.word	0x40023c00

08001084 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001084:	b580      	push	{r7, lr}
 8001086:	b082      	sub	sp, #8
 8001088:	af00      	add	r7, sp, #0
 800108a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800108c:	4b12      	ldr	r3, [pc, #72]	@ (80010d8 <HAL_InitTick+0x54>)
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <HAL_InitTick+0x58>)
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800109a:	fbb3 f3f1 	udiv	r3, r3, r1
 800109e:	fbb2 f3f3 	udiv	r3, r2, r3
 80010a2:	4618      	mov	r0, r3
 80010a4:	f000 f943 	bl	800132e <HAL_SYSTICK_Config>
 80010a8:	4603      	mov	r3, r0
 80010aa:	2b00      	cmp	r3, #0
 80010ac:	d001      	beq.n	80010b2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80010ae:	2301      	movs	r3, #1
 80010b0:	e00e      	b.n	80010d0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	2b0f      	cmp	r3, #15
 80010b6:	d80a      	bhi.n	80010ce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80010b8:	2200      	movs	r2, #0
 80010ba:	6879      	ldr	r1, [r7, #4]
 80010bc:	f04f 30ff 	mov.w	r0, #4294967295
 80010c0:	f000 f90b 	bl	80012da <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80010c4:	4a06      	ldr	r2, [pc, #24]	@ (80010e0 <HAL_InitTick+0x5c>)
 80010c6:	687b      	ldr	r3, [r7, #4]
 80010c8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80010ca:	2300      	movs	r3, #0
 80010cc:	e000      	b.n	80010d0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80010ce:	2301      	movs	r3, #1
}
 80010d0:	4618      	mov	r0, r3
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000008 	.word	0x20000008
 80010e0:	20000004 	.word	0x20000004

080010e4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e4:	b480      	push	{r7}
 80010e6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80010e8:	4b06      	ldr	r3, [pc, #24]	@ (8001104 <HAL_IncTick+0x20>)
 80010ea:	781b      	ldrb	r3, [r3, #0]
 80010ec:	461a      	mov	r2, r3
 80010ee:	4b06      	ldr	r3, [pc, #24]	@ (8001108 <HAL_IncTick+0x24>)
 80010f0:	681b      	ldr	r3, [r3, #0]
 80010f2:	4413      	add	r3, r2
 80010f4:	4a04      	ldr	r2, [pc, #16]	@ (8001108 <HAL_IncTick+0x24>)
 80010f6:	6013      	str	r3, [r2, #0]
}
 80010f8:	bf00      	nop
 80010fa:	46bd      	mov	sp, r7
 80010fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001100:	4770      	bx	lr
 8001102:	bf00      	nop
 8001104:	20000008 	.word	0x20000008
 8001108:	200000e0 	.word	0x200000e0

0800110c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800110c:	b480      	push	{r7}
 800110e:	af00      	add	r7, sp, #0
  return uwTick;
 8001110:	4b03      	ldr	r3, [pc, #12]	@ (8001120 <HAL_GetTick+0x14>)
 8001112:	681b      	ldr	r3, [r3, #0]
}
 8001114:	4618      	mov	r0, r3
 8001116:	46bd      	mov	sp, r7
 8001118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800111c:	4770      	bx	lr
 800111e:	bf00      	nop
 8001120:	200000e0 	.word	0x200000e0

08001124 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001124:	b480      	push	{r7}
 8001126:	b085      	sub	sp, #20
 8001128:	af00      	add	r7, sp, #0
 800112a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	f003 0307 	and.w	r3, r3, #7
 8001132:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001134:	4b0c      	ldr	r3, [pc, #48]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001136:	68db      	ldr	r3, [r3, #12]
 8001138:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800113a:	68ba      	ldr	r2, [r7, #8]
 800113c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001140:	4013      	ands	r3, r2
 8001142:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001144:	68fb      	ldr	r3, [r7, #12]
 8001146:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001148:	68bb      	ldr	r3, [r7, #8]
 800114a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800114c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001150:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001154:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001156:	4a04      	ldr	r2, [pc, #16]	@ (8001168 <__NVIC_SetPriorityGrouping+0x44>)
 8001158:	68bb      	ldr	r3, [r7, #8]
 800115a:	60d3      	str	r3, [r2, #12]
}
 800115c:	bf00      	nop
 800115e:	3714      	adds	r7, #20
 8001160:	46bd      	mov	sp, r7
 8001162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001166:	4770      	bx	lr
 8001168:	e000ed00 	.word	0xe000ed00

0800116c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800116c:	b480      	push	{r7}
 800116e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001170:	4b04      	ldr	r3, [pc, #16]	@ (8001184 <__NVIC_GetPriorityGrouping+0x18>)
 8001172:	68db      	ldr	r3, [r3, #12]
 8001174:	0a1b      	lsrs	r3, r3, #8
 8001176:	f003 0307 	and.w	r3, r3, #7
}
 800117a:	4618      	mov	r0, r3
 800117c:	46bd      	mov	sp, r7
 800117e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001182:	4770      	bx	lr
 8001184:	e000ed00 	.word	0xe000ed00

08001188 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001188:	b480      	push	{r7}
 800118a:	b083      	sub	sp, #12
 800118c:	af00      	add	r7, sp, #0
 800118e:	4603      	mov	r3, r0
 8001190:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001192:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001196:	2b00      	cmp	r3, #0
 8001198:	db0b      	blt.n	80011b2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800119a:	79fb      	ldrb	r3, [r7, #7]
 800119c:	f003 021f 	and.w	r2, r3, #31
 80011a0:	4907      	ldr	r1, [pc, #28]	@ (80011c0 <__NVIC_EnableIRQ+0x38>)
 80011a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011a6:	095b      	lsrs	r3, r3, #5
 80011a8:	2001      	movs	r0, #1
 80011aa:	fa00 f202 	lsl.w	r2, r0, r2
 80011ae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80011b2:	bf00      	nop
 80011b4:	370c      	adds	r7, #12
 80011b6:	46bd      	mov	sp, r7
 80011b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011bc:	4770      	bx	lr
 80011be:	bf00      	nop
 80011c0:	e000e100 	.word	0xe000e100

080011c4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80011c4:	b480      	push	{r7}
 80011c6:	b083      	sub	sp, #12
 80011c8:	af00      	add	r7, sp, #0
 80011ca:	4603      	mov	r3, r0
 80011cc:	6039      	str	r1, [r7, #0]
 80011ce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80011d0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011d4:	2b00      	cmp	r3, #0
 80011d6:	db0a      	blt.n	80011ee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011d8:	683b      	ldr	r3, [r7, #0]
 80011da:	b2da      	uxtb	r2, r3
 80011dc:	490c      	ldr	r1, [pc, #48]	@ (8001210 <__NVIC_SetPriority+0x4c>)
 80011de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80011e2:	0112      	lsls	r2, r2, #4
 80011e4:	b2d2      	uxtb	r2, r2
 80011e6:	440b      	add	r3, r1
 80011e8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80011ec:	e00a      	b.n	8001204 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80011ee:	683b      	ldr	r3, [r7, #0]
 80011f0:	b2da      	uxtb	r2, r3
 80011f2:	4908      	ldr	r1, [pc, #32]	@ (8001214 <__NVIC_SetPriority+0x50>)
 80011f4:	79fb      	ldrb	r3, [r7, #7]
 80011f6:	f003 030f 	and.w	r3, r3, #15
 80011fa:	3b04      	subs	r3, #4
 80011fc:	0112      	lsls	r2, r2, #4
 80011fe:	b2d2      	uxtb	r2, r2
 8001200:	440b      	add	r3, r1
 8001202:	761a      	strb	r2, [r3, #24]
}
 8001204:	bf00      	nop
 8001206:	370c      	adds	r7, #12
 8001208:	46bd      	mov	sp, r7
 800120a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800120e:	4770      	bx	lr
 8001210:	e000e100 	.word	0xe000e100
 8001214:	e000ed00 	.word	0xe000ed00

08001218 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001218:	b480      	push	{r7}
 800121a:	b089      	sub	sp, #36	@ 0x24
 800121c:	af00      	add	r7, sp, #0
 800121e:	60f8      	str	r0, [r7, #12]
 8001220:	60b9      	str	r1, [r7, #8]
 8001222:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001224:	68fb      	ldr	r3, [r7, #12]
 8001226:	f003 0307 	and.w	r3, r3, #7
 800122a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800122c:	69fb      	ldr	r3, [r7, #28]
 800122e:	f1c3 0307 	rsb	r3, r3, #7
 8001232:	2b04      	cmp	r3, #4
 8001234:	bf28      	it	cs
 8001236:	2304      	movcs	r3, #4
 8001238:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800123a:	69fb      	ldr	r3, [r7, #28]
 800123c:	3304      	adds	r3, #4
 800123e:	2b06      	cmp	r3, #6
 8001240:	d902      	bls.n	8001248 <NVIC_EncodePriority+0x30>
 8001242:	69fb      	ldr	r3, [r7, #28]
 8001244:	3b03      	subs	r3, #3
 8001246:	e000      	b.n	800124a <NVIC_EncodePriority+0x32>
 8001248:	2300      	movs	r3, #0
 800124a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800124c:	f04f 32ff 	mov.w	r2, #4294967295
 8001250:	69bb      	ldr	r3, [r7, #24]
 8001252:	fa02 f303 	lsl.w	r3, r2, r3
 8001256:	43da      	mvns	r2, r3
 8001258:	68bb      	ldr	r3, [r7, #8]
 800125a:	401a      	ands	r2, r3
 800125c:	697b      	ldr	r3, [r7, #20]
 800125e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001260:	f04f 31ff 	mov.w	r1, #4294967295
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	fa01 f303 	lsl.w	r3, r1, r3
 800126a:	43d9      	mvns	r1, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001270:	4313      	orrs	r3, r2
         );
}
 8001272:	4618      	mov	r0, r3
 8001274:	3724      	adds	r7, #36	@ 0x24
 8001276:	46bd      	mov	sp, r7
 8001278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800127c:	4770      	bx	lr
	...

08001280 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	3b01      	subs	r3, #1
 800128c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001290:	d301      	bcc.n	8001296 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001292:	2301      	movs	r3, #1
 8001294:	e00f      	b.n	80012b6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001296:	4a0a      	ldr	r2, [pc, #40]	@ (80012c0 <SysTick_Config+0x40>)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	3b01      	subs	r3, #1
 800129c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800129e:	210f      	movs	r1, #15
 80012a0:	f04f 30ff 	mov.w	r0, #4294967295
 80012a4:	f7ff ff8e 	bl	80011c4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80012a8:	4b05      	ldr	r3, [pc, #20]	@ (80012c0 <SysTick_Config+0x40>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80012ae:	4b04      	ldr	r3, [pc, #16]	@ (80012c0 <SysTick_Config+0x40>)
 80012b0:	2207      	movs	r2, #7
 80012b2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80012b4:	2300      	movs	r3, #0
}
 80012b6:	4618      	mov	r0, r3
 80012b8:	3708      	adds	r7, #8
 80012ba:	46bd      	mov	sp, r7
 80012bc:	bd80      	pop	{r7, pc}
 80012be:	bf00      	nop
 80012c0:	e000e010 	.word	0xe000e010

080012c4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80012c4:	b580      	push	{r7, lr}
 80012c6:	b082      	sub	sp, #8
 80012c8:	af00      	add	r7, sp, #0
 80012ca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80012cc:	6878      	ldr	r0, [r7, #4]
 80012ce:	f7ff ff29 	bl	8001124 <__NVIC_SetPriorityGrouping>
}
 80012d2:	bf00      	nop
 80012d4:	3708      	adds	r7, #8
 80012d6:	46bd      	mov	sp, r7
 80012d8:	bd80      	pop	{r7, pc}

080012da <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80012da:	b580      	push	{r7, lr}
 80012dc:	b086      	sub	sp, #24
 80012de:	af00      	add	r7, sp, #0
 80012e0:	4603      	mov	r3, r0
 80012e2:	60b9      	str	r1, [r7, #8]
 80012e4:	607a      	str	r2, [r7, #4]
 80012e6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80012e8:	2300      	movs	r3, #0
 80012ea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80012ec:	f7ff ff3e 	bl	800116c <__NVIC_GetPriorityGrouping>
 80012f0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80012f2:	687a      	ldr	r2, [r7, #4]
 80012f4:	68b9      	ldr	r1, [r7, #8]
 80012f6:	6978      	ldr	r0, [r7, #20]
 80012f8:	f7ff ff8e 	bl	8001218 <NVIC_EncodePriority>
 80012fc:	4602      	mov	r2, r0
 80012fe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001302:	4611      	mov	r1, r2
 8001304:	4618      	mov	r0, r3
 8001306:	f7ff ff5d 	bl	80011c4 <__NVIC_SetPriority>
}
 800130a:	bf00      	nop
 800130c:	3718      	adds	r7, #24
 800130e:	46bd      	mov	sp, r7
 8001310:	bd80      	pop	{r7, pc}

08001312 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001312:	b580      	push	{r7, lr}
 8001314:	b082      	sub	sp, #8
 8001316:	af00      	add	r7, sp, #0
 8001318:	4603      	mov	r3, r0
 800131a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800131c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001320:	4618      	mov	r0, r3
 8001322:	f7ff ff31 	bl	8001188 <__NVIC_EnableIRQ>
}
 8001326:	bf00      	nop
 8001328:	3708      	adds	r7, #8
 800132a:	46bd      	mov	sp, r7
 800132c:	bd80      	pop	{r7, pc}

0800132e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800132e:	b580      	push	{r7, lr}
 8001330:	b082      	sub	sp, #8
 8001332:	af00      	add	r7, sp, #0
 8001334:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001336:	6878      	ldr	r0, [r7, #4]
 8001338:	f7ff ffa2 	bl	8001280 <SysTick_Config>
 800133c:	4603      	mov	r3, r0
}
 800133e:	4618      	mov	r0, r3
 8001340:	3708      	adds	r7, #8
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
	...

08001348 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001348:	b480      	push	{r7}
 800134a:	b089      	sub	sp, #36	@ 0x24
 800134c:	af00      	add	r7, sp, #0
 800134e:	6078      	str	r0, [r7, #4]
 8001350:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001352:	2300      	movs	r3, #0
 8001354:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001356:	2300      	movs	r3, #0
 8001358:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800135a:	2300      	movs	r3, #0
 800135c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800135e:	2300      	movs	r3, #0
 8001360:	61fb      	str	r3, [r7, #28]
 8001362:	e177      	b.n	8001654 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001364:	2201      	movs	r2, #1
 8001366:	69fb      	ldr	r3, [r7, #28]
 8001368:	fa02 f303 	lsl.w	r3, r2, r3
 800136c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	681b      	ldr	r3, [r3, #0]
 8001372:	697a      	ldr	r2, [r7, #20]
 8001374:	4013      	ands	r3, r2
 8001376:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001378:	693a      	ldr	r2, [r7, #16]
 800137a:	697b      	ldr	r3, [r7, #20]
 800137c:	429a      	cmp	r2, r3
 800137e:	f040 8166 	bne.w	800164e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001382:	683b      	ldr	r3, [r7, #0]
 8001384:	685b      	ldr	r3, [r3, #4]
 8001386:	f003 0303 	and.w	r3, r3, #3
 800138a:	2b01      	cmp	r3, #1
 800138c:	d005      	beq.n	800139a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800138e:	683b      	ldr	r3, [r7, #0]
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001396:	2b02      	cmp	r3, #2
 8001398:	d130      	bne.n	80013fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	689b      	ldr	r3, [r3, #8]
 800139e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80013a0:	69fb      	ldr	r3, [r7, #28]
 80013a2:	005b      	lsls	r3, r3, #1
 80013a4:	2203      	movs	r2, #3
 80013a6:	fa02 f303 	lsl.w	r3, r2, r3
 80013aa:	43db      	mvns	r3, r3
 80013ac:	69ba      	ldr	r2, [r7, #24]
 80013ae:	4013      	ands	r3, r2
 80013b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80013b2:	683b      	ldr	r3, [r7, #0]
 80013b4:	68da      	ldr	r2, [r3, #12]
 80013b6:	69fb      	ldr	r3, [r7, #28]
 80013b8:	005b      	lsls	r3, r3, #1
 80013ba:	fa02 f303 	lsl.w	r3, r2, r3
 80013be:	69ba      	ldr	r2, [r7, #24]
 80013c0:	4313      	orrs	r3, r2
 80013c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	69ba      	ldr	r2, [r7, #24]
 80013c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80013ca:	687b      	ldr	r3, [r7, #4]
 80013cc:	685b      	ldr	r3, [r3, #4]
 80013ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80013d0:	2201      	movs	r2, #1
 80013d2:	69fb      	ldr	r3, [r7, #28]
 80013d4:	fa02 f303 	lsl.w	r3, r2, r3
 80013d8:	43db      	mvns	r3, r3
 80013da:	69ba      	ldr	r2, [r7, #24]
 80013dc:	4013      	ands	r3, r2
 80013de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80013e0:	683b      	ldr	r3, [r7, #0]
 80013e2:	685b      	ldr	r3, [r3, #4]
 80013e4:	091b      	lsrs	r3, r3, #4
 80013e6:	f003 0201 	and.w	r2, r3, #1
 80013ea:	69fb      	ldr	r3, [r7, #28]
 80013ec:	fa02 f303 	lsl.w	r3, r2, r3
 80013f0:	69ba      	ldr	r2, [r7, #24]
 80013f2:	4313      	orrs	r3, r2
 80013f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80013fc:	683b      	ldr	r3, [r7, #0]
 80013fe:	685b      	ldr	r3, [r3, #4]
 8001400:	f003 0303 	and.w	r3, r3, #3
 8001404:	2b03      	cmp	r3, #3
 8001406:	d017      	beq.n	8001438 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	68db      	ldr	r3, [r3, #12]
 800140c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800140e:	69fb      	ldr	r3, [r7, #28]
 8001410:	005b      	lsls	r3, r3, #1
 8001412:	2203      	movs	r2, #3
 8001414:	fa02 f303 	lsl.w	r3, r2, r3
 8001418:	43db      	mvns	r3, r3
 800141a:	69ba      	ldr	r2, [r7, #24]
 800141c:	4013      	ands	r3, r2
 800141e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001420:	683b      	ldr	r3, [r7, #0]
 8001422:	689a      	ldr	r2, [r3, #8]
 8001424:	69fb      	ldr	r3, [r7, #28]
 8001426:	005b      	lsls	r3, r3, #1
 8001428:	fa02 f303 	lsl.w	r3, r2, r3
 800142c:	69ba      	ldr	r2, [r7, #24]
 800142e:	4313      	orrs	r3, r2
 8001430:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001432:	687b      	ldr	r3, [r7, #4]
 8001434:	69ba      	ldr	r2, [r7, #24]
 8001436:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001438:	683b      	ldr	r3, [r7, #0]
 800143a:	685b      	ldr	r3, [r3, #4]
 800143c:	f003 0303 	and.w	r3, r3, #3
 8001440:	2b02      	cmp	r3, #2
 8001442:	d123      	bne.n	800148c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001444:	69fb      	ldr	r3, [r7, #28]
 8001446:	08da      	lsrs	r2, r3, #3
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	3208      	adds	r2, #8
 800144c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001450:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001452:	69fb      	ldr	r3, [r7, #28]
 8001454:	f003 0307 	and.w	r3, r3, #7
 8001458:	009b      	lsls	r3, r3, #2
 800145a:	220f      	movs	r2, #15
 800145c:	fa02 f303 	lsl.w	r3, r2, r3
 8001460:	43db      	mvns	r3, r3
 8001462:	69ba      	ldr	r2, [r7, #24]
 8001464:	4013      	ands	r3, r2
 8001466:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001468:	683b      	ldr	r3, [r7, #0]
 800146a:	691a      	ldr	r2, [r3, #16]
 800146c:	69fb      	ldr	r3, [r7, #28]
 800146e:	f003 0307 	and.w	r3, r3, #7
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	fa02 f303 	lsl.w	r3, r2, r3
 8001478:	69ba      	ldr	r2, [r7, #24]
 800147a:	4313      	orrs	r3, r2
 800147c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800147e:	69fb      	ldr	r3, [r7, #28]
 8001480:	08da      	lsrs	r2, r3, #3
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	3208      	adds	r2, #8
 8001486:	69b9      	ldr	r1, [r7, #24]
 8001488:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800148c:	687b      	ldr	r3, [r7, #4]
 800148e:	681b      	ldr	r3, [r3, #0]
 8001490:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001492:	69fb      	ldr	r3, [r7, #28]
 8001494:	005b      	lsls	r3, r3, #1
 8001496:	2203      	movs	r2, #3
 8001498:	fa02 f303 	lsl.w	r3, r2, r3
 800149c:	43db      	mvns	r3, r3
 800149e:	69ba      	ldr	r2, [r7, #24]
 80014a0:	4013      	ands	r3, r2
 80014a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80014a4:	683b      	ldr	r3, [r7, #0]
 80014a6:	685b      	ldr	r3, [r3, #4]
 80014a8:	f003 0203 	and.w	r2, r3, #3
 80014ac:	69fb      	ldr	r3, [r7, #28]
 80014ae:	005b      	lsls	r3, r3, #1
 80014b0:	fa02 f303 	lsl.w	r3, r2, r3
 80014b4:	69ba      	ldr	r2, [r7, #24]
 80014b6:	4313      	orrs	r3, r2
 80014b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	69ba      	ldr	r2, [r7, #24]
 80014be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	685b      	ldr	r3, [r3, #4]
 80014c4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	f000 80c0 	beq.w	800164e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80014ce:	2300      	movs	r3, #0
 80014d0:	60fb      	str	r3, [r7, #12]
 80014d2:	4b66      	ldr	r3, [pc, #408]	@ (800166c <HAL_GPIO_Init+0x324>)
 80014d4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014d6:	4a65      	ldr	r2, [pc, #404]	@ (800166c <HAL_GPIO_Init+0x324>)
 80014d8:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014dc:	6453      	str	r3, [r2, #68]	@ 0x44
 80014de:	4b63      	ldr	r3, [pc, #396]	@ (800166c <HAL_GPIO_Init+0x324>)
 80014e0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014e2:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014e6:	60fb      	str	r3, [r7, #12]
 80014e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80014ea:	4a61      	ldr	r2, [pc, #388]	@ (8001670 <HAL_GPIO_Init+0x328>)
 80014ec:	69fb      	ldr	r3, [r7, #28]
 80014ee:	089b      	lsrs	r3, r3, #2
 80014f0:	3302      	adds	r3, #2
 80014f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80014f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80014f8:	69fb      	ldr	r3, [r7, #28]
 80014fa:	f003 0303 	and.w	r3, r3, #3
 80014fe:	009b      	lsls	r3, r3, #2
 8001500:	220f      	movs	r2, #15
 8001502:	fa02 f303 	lsl.w	r3, r2, r3
 8001506:	43db      	mvns	r3, r3
 8001508:	69ba      	ldr	r2, [r7, #24]
 800150a:	4013      	ands	r3, r2
 800150c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800150e:	687b      	ldr	r3, [r7, #4]
 8001510:	4a58      	ldr	r2, [pc, #352]	@ (8001674 <HAL_GPIO_Init+0x32c>)
 8001512:	4293      	cmp	r3, r2
 8001514:	d037      	beq.n	8001586 <HAL_GPIO_Init+0x23e>
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	4a57      	ldr	r2, [pc, #348]	@ (8001678 <HAL_GPIO_Init+0x330>)
 800151a:	4293      	cmp	r3, r2
 800151c:	d031      	beq.n	8001582 <HAL_GPIO_Init+0x23a>
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	4a56      	ldr	r2, [pc, #344]	@ (800167c <HAL_GPIO_Init+0x334>)
 8001522:	4293      	cmp	r3, r2
 8001524:	d02b      	beq.n	800157e <HAL_GPIO_Init+0x236>
 8001526:	687b      	ldr	r3, [r7, #4]
 8001528:	4a55      	ldr	r2, [pc, #340]	@ (8001680 <HAL_GPIO_Init+0x338>)
 800152a:	4293      	cmp	r3, r2
 800152c:	d025      	beq.n	800157a <HAL_GPIO_Init+0x232>
 800152e:	687b      	ldr	r3, [r7, #4]
 8001530:	4a54      	ldr	r2, [pc, #336]	@ (8001684 <HAL_GPIO_Init+0x33c>)
 8001532:	4293      	cmp	r3, r2
 8001534:	d01f      	beq.n	8001576 <HAL_GPIO_Init+0x22e>
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	4a53      	ldr	r2, [pc, #332]	@ (8001688 <HAL_GPIO_Init+0x340>)
 800153a:	4293      	cmp	r3, r2
 800153c:	d019      	beq.n	8001572 <HAL_GPIO_Init+0x22a>
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	4a52      	ldr	r2, [pc, #328]	@ (800168c <HAL_GPIO_Init+0x344>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d013      	beq.n	800156e <HAL_GPIO_Init+0x226>
 8001546:	687b      	ldr	r3, [r7, #4]
 8001548:	4a51      	ldr	r2, [pc, #324]	@ (8001690 <HAL_GPIO_Init+0x348>)
 800154a:	4293      	cmp	r3, r2
 800154c:	d00d      	beq.n	800156a <HAL_GPIO_Init+0x222>
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	4a50      	ldr	r2, [pc, #320]	@ (8001694 <HAL_GPIO_Init+0x34c>)
 8001552:	4293      	cmp	r3, r2
 8001554:	d007      	beq.n	8001566 <HAL_GPIO_Init+0x21e>
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	4a4f      	ldr	r2, [pc, #316]	@ (8001698 <HAL_GPIO_Init+0x350>)
 800155a:	4293      	cmp	r3, r2
 800155c:	d101      	bne.n	8001562 <HAL_GPIO_Init+0x21a>
 800155e:	2309      	movs	r3, #9
 8001560:	e012      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001562:	230a      	movs	r3, #10
 8001564:	e010      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001566:	2308      	movs	r3, #8
 8001568:	e00e      	b.n	8001588 <HAL_GPIO_Init+0x240>
 800156a:	2307      	movs	r3, #7
 800156c:	e00c      	b.n	8001588 <HAL_GPIO_Init+0x240>
 800156e:	2306      	movs	r3, #6
 8001570:	e00a      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001572:	2305      	movs	r3, #5
 8001574:	e008      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001576:	2304      	movs	r3, #4
 8001578:	e006      	b.n	8001588 <HAL_GPIO_Init+0x240>
 800157a:	2303      	movs	r3, #3
 800157c:	e004      	b.n	8001588 <HAL_GPIO_Init+0x240>
 800157e:	2302      	movs	r3, #2
 8001580:	e002      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001582:	2301      	movs	r3, #1
 8001584:	e000      	b.n	8001588 <HAL_GPIO_Init+0x240>
 8001586:	2300      	movs	r3, #0
 8001588:	69fa      	ldr	r2, [r7, #28]
 800158a:	f002 0203 	and.w	r2, r2, #3
 800158e:	0092      	lsls	r2, r2, #2
 8001590:	4093      	lsls	r3, r2
 8001592:	69ba      	ldr	r2, [r7, #24]
 8001594:	4313      	orrs	r3, r2
 8001596:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001598:	4935      	ldr	r1, [pc, #212]	@ (8001670 <HAL_GPIO_Init+0x328>)
 800159a:	69fb      	ldr	r3, [r7, #28]
 800159c:	089b      	lsrs	r3, r3, #2
 800159e:	3302      	adds	r3, #2
 80015a0:	69ba      	ldr	r2, [r7, #24]
 80015a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80015a6:	4b3d      	ldr	r3, [pc, #244]	@ (800169c <HAL_GPIO_Init+0x354>)
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015ac:	693b      	ldr	r3, [r7, #16]
 80015ae:	43db      	mvns	r3, r3
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4013      	ands	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80015b6:	683b      	ldr	r3, [r7, #0]
 80015b8:	685b      	ldr	r3, [r3, #4]
 80015ba:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80015be:	2b00      	cmp	r3, #0
 80015c0:	d003      	beq.n	80015ca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80015c2:	69ba      	ldr	r2, [r7, #24]
 80015c4:	693b      	ldr	r3, [r7, #16]
 80015c6:	4313      	orrs	r3, r2
 80015c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80015ca:	4a34      	ldr	r2, [pc, #208]	@ (800169c <HAL_GPIO_Init+0x354>)
 80015cc:	69bb      	ldr	r3, [r7, #24]
 80015ce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80015d0:	4b32      	ldr	r3, [pc, #200]	@ (800169c <HAL_GPIO_Init+0x354>)
 80015d2:	68db      	ldr	r3, [r3, #12]
 80015d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80015d6:	693b      	ldr	r3, [r7, #16]
 80015d8:	43db      	mvns	r3, r3
 80015da:	69ba      	ldr	r2, [r7, #24]
 80015dc:	4013      	ands	r3, r2
 80015de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	685b      	ldr	r3, [r3, #4]
 80015e4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d003      	beq.n	80015f4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80015ec:	69ba      	ldr	r2, [r7, #24]
 80015ee:	693b      	ldr	r3, [r7, #16]
 80015f0:	4313      	orrs	r3, r2
 80015f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80015f4:	4a29      	ldr	r2, [pc, #164]	@ (800169c <HAL_GPIO_Init+0x354>)
 80015f6:	69bb      	ldr	r3, [r7, #24]
 80015f8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80015fa:	4b28      	ldr	r3, [pc, #160]	@ (800169c <HAL_GPIO_Init+0x354>)
 80015fc:	685b      	ldr	r3, [r3, #4]
 80015fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001600:	693b      	ldr	r3, [r7, #16]
 8001602:	43db      	mvns	r3, r3
 8001604:	69ba      	ldr	r2, [r7, #24]
 8001606:	4013      	ands	r3, r2
 8001608:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800160a:	683b      	ldr	r3, [r7, #0]
 800160c:	685b      	ldr	r3, [r3, #4]
 800160e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001612:	2b00      	cmp	r3, #0
 8001614:	d003      	beq.n	800161e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001616:	69ba      	ldr	r2, [r7, #24]
 8001618:	693b      	ldr	r3, [r7, #16]
 800161a:	4313      	orrs	r3, r2
 800161c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800161e:	4a1f      	ldr	r2, [pc, #124]	@ (800169c <HAL_GPIO_Init+0x354>)
 8001620:	69bb      	ldr	r3, [r7, #24]
 8001622:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001624:	4b1d      	ldr	r3, [pc, #116]	@ (800169c <HAL_GPIO_Init+0x354>)
 8001626:	681b      	ldr	r3, [r3, #0]
 8001628:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800162a:	693b      	ldr	r3, [r7, #16]
 800162c:	43db      	mvns	r3, r3
 800162e:	69ba      	ldr	r2, [r7, #24]
 8001630:	4013      	ands	r3, r2
 8001632:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001634:	683b      	ldr	r3, [r7, #0]
 8001636:	685b      	ldr	r3, [r3, #4]
 8001638:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800163c:	2b00      	cmp	r3, #0
 800163e:	d003      	beq.n	8001648 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	693b      	ldr	r3, [r7, #16]
 8001644:	4313      	orrs	r3, r2
 8001646:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001648:	4a14      	ldr	r2, [pc, #80]	@ (800169c <HAL_GPIO_Init+0x354>)
 800164a:	69bb      	ldr	r3, [r7, #24]
 800164c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800164e:	69fb      	ldr	r3, [r7, #28]
 8001650:	3301      	adds	r3, #1
 8001652:	61fb      	str	r3, [r7, #28]
 8001654:	69fb      	ldr	r3, [r7, #28]
 8001656:	2b0f      	cmp	r3, #15
 8001658:	f67f ae84 	bls.w	8001364 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800165c:	bf00      	nop
 800165e:	bf00      	nop
 8001660:	3724      	adds	r7, #36	@ 0x24
 8001662:	46bd      	mov	sp, r7
 8001664:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001668:	4770      	bx	lr
 800166a:	bf00      	nop
 800166c:	40023800 	.word	0x40023800
 8001670:	40013800 	.word	0x40013800
 8001674:	40020000 	.word	0x40020000
 8001678:	40020400 	.word	0x40020400
 800167c:	40020800 	.word	0x40020800
 8001680:	40020c00 	.word	0x40020c00
 8001684:	40021000 	.word	0x40021000
 8001688:	40021400 	.word	0x40021400
 800168c:	40021800 	.word	0x40021800
 8001690:	40021c00 	.word	0x40021c00
 8001694:	40022000 	.word	0x40022000
 8001698:	40022400 	.word	0x40022400
 800169c:	40013c00 	.word	0x40013c00

080016a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80016a0:	b480      	push	{r7}
 80016a2:	b083      	sub	sp, #12
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	460b      	mov	r3, r1
 80016aa:	807b      	strh	r3, [r7, #2]
 80016ac:	4613      	mov	r3, r2
 80016ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80016b0:	787b      	ldrb	r3, [r7, #1]
 80016b2:	2b00      	cmp	r3, #0
 80016b4:	d003      	beq.n	80016be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80016b6:	887a      	ldrh	r2, [r7, #2]
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80016bc:	e003      	b.n	80016c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80016be:	887b      	ldrh	r3, [r7, #2]
 80016c0:	041a      	lsls	r2, r3, #16
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	619a      	str	r2, [r3, #24]
}
 80016c6:	bf00      	nop
 80016c8:	370c      	adds	r7, #12
 80016ca:	46bd      	mov	sp, r7
 80016cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016d0:	4770      	bx	lr

080016d2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80016d2:	b480      	push	{r7}
 80016d4:	b085      	sub	sp, #20
 80016d6:	af00      	add	r7, sp, #0
 80016d8:	6078      	str	r0, [r7, #4]
 80016da:	460b      	mov	r3, r1
 80016dc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	695b      	ldr	r3, [r3, #20]
 80016e2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80016e4:	887a      	ldrh	r2, [r7, #2]
 80016e6:	68fb      	ldr	r3, [r7, #12]
 80016e8:	4013      	ands	r3, r2
 80016ea:	041a      	lsls	r2, r3, #16
 80016ec:	68fb      	ldr	r3, [r7, #12]
 80016ee:	43d9      	mvns	r1, r3
 80016f0:	887b      	ldrh	r3, [r7, #2]
 80016f2:	400b      	ands	r3, r1
 80016f4:	431a      	orrs	r2, r3
 80016f6:	687b      	ldr	r3, [r7, #4]
 80016f8:	619a      	str	r2, [r3, #24]
}
 80016fa:	bf00      	nop
 80016fc:	3714      	adds	r7, #20
 80016fe:	46bd      	mov	sp, r7
 8001700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001704:	4770      	bx	lr
	...

08001708 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b082      	sub	sp, #8
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8001712:	4b08      	ldr	r3, [pc, #32]	@ (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001714:	695a      	ldr	r2, [r3, #20]
 8001716:	88fb      	ldrh	r3, [r7, #6]
 8001718:	4013      	ands	r3, r2
 800171a:	2b00      	cmp	r3, #0
 800171c:	d006      	beq.n	800172c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800171e:	4a05      	ldr	r2, [pc, #20]	@ (8001734 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001724:	88fb      	ldrh	r3, [r7, #6]
 8001726:	4618      	mov	r0, r3
 8001728:	f7ff fabe 	bl	8000ca8 <HAL_GPIO_EXTI_Callback>
  }
}
 800172c:	bf00      	nop
 800172e:	3708      	adds	r7, #8
 8001730:	46bd      	mov	sp, r7
 8001732:	bd80      	pop	{r7, pc}
 8001734:	40013c00 	.word	0x40013c00

08001738 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8001738:	b580      	push	{r7, lr}
 800173a:	b082      	sub	sp, #8
 800173c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 800173e:	2300      	movs	r3, #0
 8001740:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8001742:	2300      	movs	r3, #0
 8001744:	603b      	str	r3, [r7, #0]
 8001746:	4b20      	ldr	r3, [pc, #128]	@ (80017c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800174a:	4a1f      	ldr	r2, [pc, #124]	@ (80017c8 <HAL_PWREx_EnableOverDrive+0x90>)
 800174c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001750:	6413      	str	r3, [r2, #64]	@ 0x40
 8001752:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <HAL_PWREx_EnableOverDrive+0x90>)
 8001754:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001756:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800175a:	603b      	str	r3, [r7, #0]
 800175c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800175e:	4b1b      	ldr	r3, [pc, #108]	@ (80017cc <HAL_PWREx_EnableOverDrive+0x94>)
 8001760:	2201      	movs	r2, #1
 8001762:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001764:	f7ff fcd2 	bl	800110c <HAL_GetTick>
 8001768:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800176a:	e009      	b.n	8001780 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800176c:	f7ff fcce 	bl	800110c <HAL_GetTick>
 8001770:	4602      	mov	r2, r0
 8001772:	687b      	ldr	r3, [r7, #4]
 8001774:	1ad3      	subs	r3, r2, r3
 8001776:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800177a:	d901      	bls.n	8001780 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e01f      	b.n	80017c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8001780:	4b13      	ldr	r3, [pc, #76]	@ (80017d0 <HAL_PWREx_EnableOverDrive+0x98>)
 8001782:	685b      	ldr	r3, [r3, #4]
 8001784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001788:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800178c:	d1ee      	bne.n	800176c <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 800178e:	4b11      	ldr	r3, [pc, #68]	@ (80017d4 <HAL_PWREx_EnableOverDrive+0x9c>)
 8001790:	2201      	movs	r2, #1
 8001792:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001794:	f7ff fcba 	bl	800110c <HAL_GetTick>
 8001798:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800179a:	e009      	b.n	80017b0 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 800179c:	f7ff fcb6 	bl	800110c <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80017aa:	d901      	bls.n	80017b0 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 80017ac:	2303      	movs	r3, #3
 80017ae:	e007      	b.n	80017c0 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80017b0:	4b07      	ldr	r3, [pc, #28]	@ (80017d0 <HAL_PWREx_EnableOverDrive+0x98>)
 80017b2:	685b      	ldr	r3, [r3, #4]
 80017b4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b8:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80017bc:	d1ee      	bne.n	800179c <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80017be:	2300      	movs	r3, #0
}
 80017c0:	4618      	mov	r0, r3
 80017c2:	3708      	adds	r7, #8
 80017c4:	46bd      	mov	sp, r7
 80017c6:	bd80      	pop	{r7, pc}
 80017c8:	40023800 	.word	0x40023800
 80017cc:	420e0040 	.word	0x420e0040
 80017d0:	40007000 	.word	0x40007000
 80017d4:	420e0044 	.word	0x420e0044

080017d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80017d8:	b580      	push	{r7, lr}
 80017da:	b086      	sub	sp, #24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d101      	bne.n	80017ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80017e6:	2301      	movs	r3, #1
 80017e8:	e267      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80017ea:	687b      	ldr	r3, [r7, #4]
 80017ec:	681b      	ldr	r3, [r3, #0]
 80017ee:	f003 0301 	and.w	r3, r3, #1
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d075      	beq.n	80018e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80017f6:	4b88      	ldr	r3, [pc, #544]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80017f8:	689b      	ldr	r3, [r3, #8]
 80017fa:	f003 030c 	and.w	r3, r3, #12
 80017fe:	2b04      	cmp	r3, #4
 8001800:	d00c      	beq.n	800181c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001802:	4b85      	ldr	r3, [pc, #532]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001804:	689b      	ldr	r3, [r3, #8]
 8001806:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800180a:	2b08      	cmp	r3, #8
 800180c:	d112      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800180e:	4b82      	ldr	r3, [pc, #520]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001810:	685b      	ldr	r3, [r3, #4]
 8001812:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001816:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800181a:	d10b      	bne.n	8001834 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800181c:	4b7e      	ldr	r3, [pc, #504]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001824:	2b00      	cmp	r3, #0
 8001826:	d05b      	beq.n	80018e0 <HAL_RCC_OscConfig+0x108>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	2b00      	cmp	r3, #0
 800182e:	d157      	bne.n	80018e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001830:	2301      	movs	r3, #1
 8001832:	e242      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	685b      	ldr	r3, [r3, #4]
 8001838:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800183c:	d106      	bne.n	800184c <HAL_RCC_OscConfig+0x74>
 800183e:	4b76      	ldr	r3, [pc, #472]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001840:	681b      	ldr	r3, [r3, #0]
 8001842:	4a75      	ldr	r2, [pc, #468]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001844:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001848:	6013      	str	r3, [r2, #0]
 800184a:	e01d      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	685b      	ldr	r3, [r3, #4]
 8001850:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001854:	d10c      	bne.n	8001870 <HAL_RCC_OscConfig+0x98>
 8001856:	4b70      	ldr	r3, [pc, #448]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	4a6f      	ldr	r2, [pc, #444]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800185c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001860:	6013      	str	r3, [r2, #0]
 8001862:	4b6d      	ldr	r3, [pc, #436]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	4a6c      	ldr	r2, [pc, #432]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001868:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800186c:	6013      	str	r3, [r2, #0]
 800186e:	e00b      	b.n	8001888 <HAL_RCC_OscConfig+0xb0>
 8001870:	4b69      	ldr	r3, [pc, #420]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001872:	681b      	ldr	r3, [r3, #0]
 8001874:	4a68      	ldr	r2, [pc, #416]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001876:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800187a:	6013      	str	r3, [r2, #0]
 800187c:	4b66      	ldr	r3, [pc, #408]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800187e:	681b      	ldr	r3, [r3, #0]
 8001880:	4a65      	ldr	r2, [pc, #404]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001882:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	685b      	ldr	r3, [r3, #4]
 800188c:	2b00      	cmp	r3, #0
 800188e:	d013      	beq.n	80018b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001890:	f7ff fc3c 	bl	800110c <HAL_GetTick>
 8001894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001896:	e008      	b.n	80018aa <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001898:	f7ff fc38 	bl	800110c <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	693b      	ldr	r3, [r7, #16]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	2b64      	cmp	r3, #100	@ 0x64
 80018a4:	d901      	bls.n	80018aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80018a6:	2303      	movs	r3, #3
 80018a8:	e207      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018aa:	4b5b      	ldr	r3, [pc, #364]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d0f0      	beq.n	8001898 <HAL_RCC_OscConfig+0xc0>
 80018b6:	e014      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018b8:	f7ff fc28 	bl	800110c <HAL_GetTick>
 80018bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018be:	e008      	b.n	80018d2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80018c0:	f7ff fc24 	bl	800110c <HAL_GetTick>
 80018c4:	4602      	mov	r2, r0
 80018c6:	693b      	ldr	r3, [r7, #16]
 80018c8:	1ad3      	subs	r3, r2, r3
 80018ca:	2b64      	cmp	r3, #100	@ 0x64
 80018cc:	d901      	bls.n	80018d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80018ce:	2303      	movs	r3, #3
 80018d0:	e1f3      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80018d2:	4b51      	ldr	r3, [pc, #324]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d1f0      	bne.n	80018c0 <HAL_RCC_OscConfig+0xe8>
 80018de:	e000      	b.n	80018e2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80018e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80018e2:	687b      	ldr	r3, [r7, #4]
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0302 	and.w	r3, r3, #2
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	d063      	beq.n	80019b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80018ee:	4b4a      	ldr	r3, [pc, #296]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018f0:	689b      	ldr	r3, [r3, #8]
 80018f2:	f003 030c 	and.w	r3, r3, #12
 80018f6:	2b00      	cmp	r3, #0
 80018f8:	d00b      	beq.n	8001912 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80018fa:	4b47      	ldr	r3, [pc, #284]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80018fc:	689b      	ldr	r3, [r3, #8]
 80018fe:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001902:	2b08      	cmp	r3, #8
 8001904:	d11c      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001906:	4b44      	ldr	r3, [pc, #272]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001908:	685b      	ldr	r3, [r3, #4]
 800190a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d116      	bne.n	8001940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001912:	4b41      	ldr	r3, [pc, #260]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0302 	and.w	r3, r3, #2
 800191a:	2b00      	cmp	r3, #0
 800191c:	d005      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	68db      	ldr	r3, [r3, #12]
 8001922:	2b01      	cmp	r3, #1
 8001924:	d001      	beq.n	800192a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001926:	2301      	movs	r3, #1
 8001928:	e1c7      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800192a:	4b3b      	ldr	r3, [pc, #236]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800192c:	681b      	ldr	r3, [r3, #0]
 800192e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	691b      	ldr	r3, [r3, #16]
 8001936:	00db      	lsls	r3, r3, #3
 8001938:	4937      	ldr	r1, [pc, #220]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800193a:	4313      	orrs	r3, r2
 800193c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800193e:	e03a      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	68db      	ldr	r3, [r3, #12]
 8001944:	2b00      	cmp	r3, #0
 8001946:	d020      	beq.n	800198a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001948:	4b34      	ldr	r3, [pc, #208]	@ (8001a1c <HAL_RCC_OscConfig+0x244>)
 800194a:	2201      	movs	r2, #1
 800194c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800194e:	f7ff fbdd 	bl	800110c <HAL_GetTick>
 8001952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001954:	e008      	b.n	8001968 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001956:	f7ff fbd9 	bl	800110c <HAL_GetTick>
 800195a:	4602      	mov	r2, r0
 800195c:	693b      	ldr	r3, [r7, #16]
 800195e:	1ad3      	subs	r3, r2, r3
 8001960:	2b02      	cmp	r3, #2
 8001962:	d901      	bls.n	8001968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001964:	2303      	movs	r3, #3
 8001966:	e1a8      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001968:	4b2b      	ldr	r3, [pc, #172]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0302 	and.w	r3, r3, #2
 8001970:	2b00      	cmp	r3, #0
 8001972:	d0f0      	beq.n	8001956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001974:	4b28      	ldr	r3, [pc, #160]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	691b      	ldr	r3, [r3, #16]
 8001980:	00db      	lsls	r3, r3, #3
 8001982:	4925      	ldr	r1, [pc, #148]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 8001984:	4313      	orrs	r3, r2
 8001986:	600b      	str	r3, [r1, #0]
 8001988:	e015      	b.n	80019b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800198a:	4b24      	ldr	r3, [pc, #144]	@ (8001a1c <HAL_RCC_OscConfig+0x244>)
 800198c:	2200      	movs	r2, #0
 800198e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001990:	f7ff fbbc 	bl	800110c <HAL_GetTick>
 8001994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001996:	e008      	b.n	80019aa <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001998:	f7ff fbb8 	bl	800110c <HAL_GetTick>
 800199c:	4602      	mov	r2, r0
 800199e:	693b      	ldr	r3, [r7, #16]
 80019a0:	1ad3      	subs	r3, r2, r3
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d901      	bls.n	80019aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80019a6:	2303      	movs	r3, #3
 80019a8:	e187      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80019aa:	4b1b      	ldr	r3, [pc, #108]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	f003 0302 	and.w	r3, r3, #2
 80019b2:	2b00      	cmp	r3, #0
 80019b4:	d1f0      	bne.n	8001998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	f003 0308 	and.w	r3, r3, #8
 80019be:	2b00      	cmp	r3, #0
 80019c0:	d036      	beq.n	8001a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	695b      	ldr	r3, [r3, #20]
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d016      	beq.n	80019f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80019ca:	4b15      	ldr	r3, [pc, #84]	@ (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019cc:	2201      	movs	r2, #1
 80019ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019d0:	f7ff fb9c 	bl	800110c <HAL_GetTick>
 80019d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019d6:	e008      	b.n	80019ea <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80019d8:	f7ff fb98 	bl	800110c <HAL_GetTick>
 80019dc:	4602      	mov	r2, r0
 80019de:	693b      	ldr	r3, [r7, #16]
 80019e0:	1ad3      	subs	r3, r2, r3
 80019e2:	2b02      	cmp	r3, #2
 80019e4:	d901      	bls.n	80019ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80019e6:	2303      	movs	r3, #3
 80019e8:	e167      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80019ea:	4b0b      	ldr	r3, [pc, #44]	@ (8001a18 <HAL_RCC_OscConfig+0x240>)
 80019ec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80019ee:	f003 0302 	and.w	r3, r3, #2
 80019f2:	2b00      	cmp	r3, #0
 80019f4:	d0f0      	beq.n	80019d8 <HAL_RCC_OscConfig+0x200>
 80019f6:	e01b      	b.n	8001a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80019f8:	4b09      	ldr	r3, [pc, #36]	@ (8001a20 <HAL_RCC_OscConfig+0x248>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80019fe:	f7ff fb85 	bl	800110c <HAL_GetTick>
 8001a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a04:	e00e      	b.n	8001a24 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001a06:	f7ff fb81 	bl	800110c <HAL_GetTick>
 8001a0a:	4602      	mov	r2, r0
 8001a0c:	693b      	ldr	r3, [r7, #16]
 8001a0e:	1ad3      	subs	r3, r2, r3
 8001a10:	2b02      	cmp	r3, #2
 8001a12:	d907      	bls.n	8001a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001a14:	2303      	movs	r3, #3
 8001a16:	e150      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001a18:	40023800 	.word	0x40023800
 8001a1c:	42470000 	.word	0x42470000
 8001a20:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001a24:	4b88      	ldr	r3, [pc, #544]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a26:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8001a28:	f003 0302 	and.w	r3, r3, #2
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d1ea      	bne.n	8001a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	681b      	ldr	r3, [r3, #0]
 8001a34:	f003 0304 	and.w	r3, r3, #4
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 8097 	beq.w	8001b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001a3e:	2300      	movs	r3, #0
 8001a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001a42:	4b81      	ldr	r3, [pc, #516]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a46:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d10f      	bne.n	8001a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001a4e:	2300      	movs	r3, #0
 8001a50:	60bb      	str	r3, [r7, #8]
 8001a52:	4b7d      	ldr	r3, [pc, #500]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a56:	4a7c      	ldr	r2, [pc, #496]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a58:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a5c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a5e:	4b7a      	ldr	r3, [pc, #488]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001a60:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a62:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a66:	60bb      	str	r3, [r7, #8]
 8001a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001a6a:	2301      	movs	r3, #1
 8001a6c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a6e:	4b77      	ldr	r3, [pc, #476]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d118      	bne.n	8001aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001a7a:	4b74      	ldr	r3, [pc, #464]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a7c:	681b      	ldr	r3, [r3, #0]
 8001a7e:	4a73      	ldr	r2, [pc, #460]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001a80:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001a86:	f7ff fb41 	bl	800110c <HAL_GetTick>
 8001a8a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001a8c:	e008      	b.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001a8e:	f7ff fb3d 	bl	800110c <HAL_GetTick>
 8001a92:	4602      	mov	r2, r0
 8001a94:	693b      	ldr	r3, [r7, #16]
 8001a96:	1ad3      	subs	r3, r2, r3
 8001a98:	2b02      	cmp	r3, #2
 8001a9a:	d901      	bls.n	8001aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	e10c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001aa0:	4b6a      	ldr	r3, [pc, #424]	@ (8001c4c <HAL_RCC_OscConfig+0x474>)
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d0f0      	beq.n	8001a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	689b      	ldr	r3, [r3, #8]
 8001ab0:	2b01      	cmp	r3, #1
 8001ab2:	d106      	bne.n	8001ac2 <HAL_RCC_OscConfig+0x2ea>
 8001ab4:	4b64      	ldr	r3, [pc, #400]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ab6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ab8:	4a63      	ldr	r2, [pc, #396]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aba:	f043 0301 	orr.w	r3, r3, #1
 8001abe:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ac0:	e01c      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	689b      	ldr	r3, [r3, #8]
 8001ac6:	2b05      	cmp	r3, #5
 8001ac8:	d10c      	bne.n	8001ae4 <HAL_RCC_OscConfig+0x30c>
 8001aca:	4b5f      	ldr	r3, [pc, #380]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001acc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ace:	4a5e      	ldr	r2, [pc, #376]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad0:	f043 0304 	orr.w	r3, r3, #4
 8001ad4:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ad6:	4b5c      	ldr	r3, [pc, #368]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ad8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ada:	4a5b      	ldr	r2, [pc, #364]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001adc:	f043 0301 	orr.w	r3, r3, #1
 8001ae0:	6713      	str	r3, [r2, #112]	@ 0x70
 8001ae2:	e00b      	b.n	8001afc <HAL_RCC_OscConfig+0x324>
 8001ae4:	4b58      	ldr	r3, [pc, #352]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001ae6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001ae8:	4a57      	ldr	r2, [pc, #348]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001aea:	f023 0301 	bic.w	r3, r3, #1
 8001aee:	6713      	str	r3, [r2, #112]	@ 0x70
 8001af0:	4b55      	ldr	r3, [pc, #340]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af2:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001af4:	4a54      	ldr	r2, [pc, #336]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001af6:	f023 0304 	bic.w	r3, r3, #4
 8001afa:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8001afc:	687b      	ldr	r3, [r7, #4]
 8001afe:	689b      	ldr	r3, [r3, #8]
 8001b00:	2b00      	cmp	r3, #0
 8001b02:	d015      	beq.n	8001b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001b04:	f7ff fb02 	bl	800110c <HAL_GetTick>
 8001b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b0a:	e00a      	b.n	8001b22 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b0c:	f7ff fafe 	bl	800110c <HAL_GetTick>
 8001b10:	4602      	mov	r2, r0
 8001b12:	693b      	ldr	r3, [r7, #16]
 8001b14:	1ad3      	subs	r3, r2, r3
 8001b16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b1a:	4293      	cmp	r3, r2
 8001b1c:	d901      	bls.n	8001b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001b1e:	2303      	movs	r3, #3
 8001b20:	e0cb      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001b22:	4b49      	ldr	r3, [pc, #292]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b26:	f003 0302 	and.w	r3, r3, #2
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d0ee      	beq.n	8001b0c <HAL_RCC_OscConfig+0x334>
 8001b2e:	e014      	b.n	8001b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001b30:	f7ff faec 	bl	800110c <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b36:	e00a      	b.n	8001b4e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001b38:	f7ff fae8 	bl	800110c <HAL_GetTick>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	1ad3      	subs	r3, r2, r3
 8001b42:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001b46:	4293      	cmp	r3, r2
 8001b48:	d901      	bls.n	8001b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8001b4a:	2303      	movs	r3, #3
 8001b4c:	e0b5      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001b4e:	4b3e      	ldr	r3, [pc, #248]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b50:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001b52:	f003 0302 	and.w	r3, r3, #2
 8001b56:	2b00      	cmp	r3, #0
 8001b58:	d1ee      	bne.n	8001b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001b5a:	7dfb      	ldrb	r3, [r7, #23]
 8001b5c:	2b01      	cmp	r3, #1
 8001b5e:	d105      	bne.n	8001b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001b60:	4b39      	ldr	r3, [pc, #228]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b62:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b64:	4a38      	ldr	r2, [pc, #224]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b66:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001b6a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	699b      	ldr	r3, [r3, #24]
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	f000 80a1 	beq.w	8001cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8001b76:	4b34      	ldr	r3, [pc, #208]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001b78:	689b      	ldr	r3, [r3, #8]
 8001b7a:	f003 030c 	and.w	r3, r3, #12
 8001b7e:	2b08      	cmp	r3, #8
 8001b80:	d05c      	beq.n	8001c3c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	699b      	ldr	r3, [r3, #24]
 8001b86:	2b02      	cmp	r3, #2
 8001b88:	d141      	bne.n	8001c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b8a:	4b31      	ldr	r3, [pc, #196]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001b90:	f7ff fabc 	bl	800110c <HAL_GetTick>
 8001b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b96:	e008      	b.n	8001baa <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b98:	f7ff fab8 	bl	800110c <HAL_GetTick>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	693b      	ldr	r3, [r7, #16]
 8001ba0:	1ad3      	subs	r3, r2, r3
 8001ba2:	2b02      	cmp	r3, #2
 8001ba4:	d901      	bls.n	8001baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001ba6:	2303      	movs	r3, #3
 8001ba8:	e087      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001baa:	4b27      	ldr	r3, [pc, #156]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d1f0      	bne.n	8001b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	69da      	ldr	r2, [r3, #28]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6a1b      	ldr	r3, [r3, #32]
 8001bbe:	431a      	orrs	r2, r3
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001bc4:	019b      	lsls	r3, r3, #6
 8001bc6:	431a      	orrs	r2, r3
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001bcc:	085b      	lsrs	r3, r3, #1
 8001bce:	3b01      	subs	r3, #1
 8001bd0:	041b      	lsls	r3, r3, #16
 8001bd2:	431a      	orrs	r2, r3
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001bd8:	061b      	lsls	r3, r3, #24
 8001bda:	491b      	ldr	r1, [pc, #108]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001bdc:	4313      	orrs	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001be0:	4b1b      	ldr	r3, [pc, #108]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001be2:	2201      	movs	r2, #1
 8001be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001be6:	f7ff fa91 	bl	800110c <HAL_GetTick>
 8001bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001bec:	e008      	b.n	8001c00 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001bee:	f7ff fa8d 	bl	800110c <HAL_GetTick>
 8001bf2:	4602      	mov	r2, r0
 8001bf4:	693b      	ldr	r3, [r7, #16]
 8001bf6:	1ad3      	subs	r3, r2, r3
 8001bf8:	2b02      	cmp	r3, #2
 8001bfa:	d901      	bls.n	8001c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8001bfc:	2303      	movs	r3, #3
 8001bfe:	e05c      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c00:	4b11      	ldr	r3, [pc, #68]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0f0      	beq.n	8001bee <HAL_RCC_OscConfig+0x416>
 8001c0c:	e054      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001c0e:	4b10      	ldr	r3, [pc, #64]	@ (8001c50 <HAL_RCC_OscConfig+0x478>)
 8001c10:	2200      	movs	r2, #0
 8001c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001c14:	f7ff fa7a 	bl	800110c <HAL_GetTick>
 8001c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c1a:	e008      	b.n	8001c2e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001c1c:	f7ff fa76 	bl	800110c <HAL_GetTick>
 8001c20:	4602      	mov	r2, r0
 8001c22:	693b      	ldr	r3, [r7, #16]
 8001c24:	1ad3      	subs	r3, r2, r3
 8001c26:	2b02      	cmp	r3, #2
 8001c28:	d901      	bls.n	8001c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8001c2a:	2303      	movs	r3, #3
 8001c2c:	e045      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_RCC_OscConfig+0x470>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d1f0      	bne.n	8001c1c <HAL_RCC_OscConfig+0x444>
 8001c3a:	e03d      	b.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	699b      	ldr	r3, [r3, #24]
 8001c40:	2b01      	cmp	r3, #1
 8001c42:	d107      	bne.n	8001c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001c44:	2301      	movs	r3, #1
 8001c46:	e038      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
 8001c48:	40023800 	.word	0x40023800
 8001c4c:	40007000 	.word	0x40007000
 8001c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001c54:	4b1b      	ldr	r3, [pc, #108]	@ (8001cc4 <HAL_RCC_OscConfig+0x4ec>)
 8001c56:	685b      	ldr	r3, [r3, #4]
 8001c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	699b      	ldr	r3, [r3, #24]
 8001c5e:	2b01      	cmp	r3, #1
 8001c60:	d028      	beq.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c62:	68fb      	ldr	r3, [r7, #12]
 8001c64:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001c6c:	429a      	cmp	r2, r3
 8001c6e:	d121      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001c7a:	429a      	cmp	r2, r3
 8001c7c:	d11a      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001c7e:	68fa      	ldr	r2, [r7, #12]
 8001c80:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001c84:	4013      	ands	r3, r2
 8001c86:	687a      	ldr	r2, [r7, #4]
 8001c88:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8001c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d111      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c9a:	085b      	lsrs	r3, r3, #1
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001ca0:	429a      	cmp	r2, r3
 8001ca2:	d107      	bne.n	8001cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001cb0:	429a      	cmp	r2, r3
 8001cb2:	d001      	beq.n	8001cb8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001cb4:	2301      	movs	r3, #1
 8001cb6:	e000      	b.n	8001cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	4618      	mov	r0, r3
 8001cbc:	3718      	adds	r7, #24
 8001cbe:	46bd      	mov	sp, r7
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	bf00      	nop
 8001cc4:	40023800 	.word	0x40023800

08001cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001cc8:	b580      	push	{r7, lr}
 8001cca:	b084      	sub	sp, #16
 8001ccc:	af00      	add	r7, sp, #0
 8001cce:	6078      	str	r0, [r7, #4]
 8001cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d101      	bne.n	8001cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001cd8:	2301      	movs	r3, #1
 8001cda:	e0cc      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001cdc:	4b68      	ldr	r3, [pc, #416]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cde:	681b      	ldr	r3, [r3, #0]
 8001ce0:	f003 030f 	and.w	r3, r3, #15
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	429a      	cmp	r2, r3
 8001ce8:	d90c      	bls.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001cea:	4b65      	ldr	r3, [pc, #404]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	b2d2      	uxtb	r2, r2
 8001cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf2:	4b63      	ldr	r3, [pc, #396]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	f003 030f 	and.w	r3, r3, #15
 8001cfa:	683a      	ldr	r2, [r7, #0]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d001      	beq.n	8001d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	e0b8      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	681b      	ldr	r3, [r3, #0]
 8001d08:	f003 0302 	and.w	r3, r3, #2
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	d020      	beq.n	8001d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	681b      	ldr	r3, [r3, #0]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d005      	beq.n	8001d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001d1c:	4b59      	ldr	r3, [pc, #356]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d1e:	689b      	ldr	r3, [r3, #8]
 8001d20:	4a58      	ldr	r2, [pc, #352]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d22:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8001d26:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	f003 0308 	and.w	r3, r3, #8
 8001d30:	2b00      	cmp	r3, #0
 8001d32:	d005      	beq.n	8001d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001d34:	4b53      	ldr	r3, [pc, #332]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d36:	689b      	ldr	r3, [r3, #8]
 8001d38:	4a52      	ldr	r2, [pc, #328]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d3a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8001d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001d40:	4b50      	ldr	r3, [pc, #320]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d42:	689b      	ldr	r3, [r3, #8]
 8001d44:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	689b      	ldr	r3, [r3, #8]
 8001d4c:	494d      	ldr	r1, [pc, #308]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d4e:	4313      	orrs	r3, r2
 8001d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	f003 0301 	and.w	r3, r3, #1
 8001d5a:	2b00      	cmp	r3, #0
 8001d5c:	d044      	beq.n	8001de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	685b      	ldr	r3, [r3, #4]
 8001d62:	2b01      	cmp	r3, #1
 8001d64:	d107      	bne.n	8001d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001d66:	4b47      	ldr	r3, [pc, #284]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d68:	681b      	ldr	r3, [r3, #0]
 8001d6a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d119      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e07f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	685b      	ldr	r3, [r3, #4]
 8001d7a:	2b02      	cmp	r3, #2
 8001d7c:	d003      	beq.n	8001d86 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001d82:	2b03      	cmp	r3, #3
 8001d84:	d107      	bne.n	8001d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001d86:	4b3f      	ldr	r3, [pc, #252]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d88:	681b      	ldr	r3, [r3, #0]
 8001d8a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001d8e:	2b00      	cmp	r3, #0
 8001d90:	d109      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001d92:	2301      	movs	r3, #1
 8001d94:	e06f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001d96:	4b3b      	ldr	r3, [pc, #236]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001d98:	681b      	ldr	r3, [r3, #0]
 8001d9a:	f003 0302 	and.w	r3, r3, #2
 8001d9e:	2b00      	cmp	r3, #0
 8001da0:	d101      	bne.n	8001da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001da2:	2301      	movs	r3, #1
 8001da4:	e067      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001da6:	4b37      	ldr	r3, [pc, #220]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001da8:	689b      	ldr	r3, [r3, #8]
 8001daa:	f023 0203 	bic.w	r2, r3, #3
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	685b      	ldr	r3, [r3, #4]
 8001db2:	4934      	ldr	r1, [pc, #208]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001db4:	4313      	orrs	r3, r2
 8001db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001db8:	f7ff f9a8 	bl	800110c <HAL_GetTick>
 8001dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dbe:	e00a      	b.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001dc0:	f7ff f9a4 	bl	800110c <HAL_GetTick>
 8001dc4:	4602      	mov	r2, r0
 8001dc6:	68fb      	ldr	r3, [r7, #12]
 8001dc8:	1ad3      	subs	r3, r2, r3
 8001dca:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d901      	bls.n	8001dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001dd2:	2303      	movs	r3, #3
 8001dd4:	e04f      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001dd6:	4b2b      	ldr	r3, [pc, #172]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001dd8:	689b      	ldr	r3, [r3, #8]
 8001dda:	f003 020c 	and.w	r2, r3, #12
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	685b      	ldr	r3, [r3, #4]
 8001de2:	009b      	lsls	r3, r3, #2
 8001de4:	429a      	cmp	r2, r3
 8001de6:	d1eb      	bne.n	8001dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001de8:	4b25      	ldr	r3, [pc, #148]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f003 030f 	and.w	r3, r3, #15
 8001df0:	683a      	ldr	r2, [r7, #0]
 8001df2:	429a      	cmp	r2, r3
 8001df4:	d20c      	bcs.n	8001e10 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001df6:	4b22      	ldr	r3, [pc, #136]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001df8:	683a      	ldr	r2, [r7, #0]
 8001dfa:	b2d2      	uxtb	r2, r2
 8001dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001dfe:	4b20      	ldr	r3, [pc, #128]	@ (8001e80 <HAL_RCC_ClockConfig+0x1b8>)
 8001e00:	681b      	ldr	r3, [r3, #0]
 8001e02:	f003 030f 	and.w	r3, r3, #15
 8001e06:	683a      	ldr	r2, [r7, #0]
 8001e08:	429a      	cmp	r2, r3
 8001e0a:	d001      	beq.n	8001e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8001e0c:	2301      	movs	r3, #1
 8001e0e:	e032      	b.n	8001e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	f003 0304 	and.w	r3, r3, #4
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d008      	beq.n	8001e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001e1c:	4b19      	ldr	r3, [pc, #100]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e1e:	689b      	ldr	r3, [r3, #8]
 8001e20:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	68db      	ldr	r3, [r3, #12]
 8001e28:	4916      	ldr	r1, [pc, #88]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e2a:	4313      	orrs	r3, r2
 8001e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001e2e:	687b      	ldr	r3, [r7, #4]
 8001e30:	681b      	ldr	r3, [r3, #0]
 8001e32:	f003 0308 	and.w	r3, r3, #8
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d009      	beq.n	8001e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8001e3a:	4b12      	ldr	r3, [pc, #72]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	691b      	ldr	r3, [r3, #16]
 8001e46:	00db      	lsls	r3, r3, #3
 8001e48:	490e      	ldr	r1, [pc, #56]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e4a:	4313      	orrs	r3, r2
 8001e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001e4e:	f000 f821 	bl	8001e94 <HAL_RCC_GetSysClockFreq>
 8001e52:	4602      	mov	r2, r0
 8001e54:	4b0b      	ldr	r3, [pc, #44]	@ (8001e84 <HAL_RCC_ClockConfig+0x1bc>)
 8001e56:	689b      	ldr	r3, [r3, #8]
 8001e58:	091b      	lsrs	r3, r3, #4
 8001e5a:	f003 030f 	and.w	r3, r3, #15
 8001e5e:	490a      	ldr	r1, [pc, #40]	@ (8001e88 <HAL_RCC_ClockConfig+0x1c0>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	fa22 f303 	lsr.w	r3, r2, r3
 8001e66:	4a09      	ldr	r2, [pc, #36]	@ (8001e8c <HAL_RCC_ClockConfig+0x1c4>)
 8001e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8001e6a:	4b09      	ldr	r3, [pc, #36]	@ (8001e90 <HAL_RCC_ClockConfig+0x1c8>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4618      	mov	r0, r3
 8001e70:	f7ff f908 	bl	8001084 <HAL_InitTick>

  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3710      	adds	r7, #16
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	bd80      	pop	{r7, pc}
 8001e7e:	bf00      	nop
 8001e80:	40023c00 	.word	0x40023c00
 8001e84:	40023800 	.word	0x40023800
 8001e88:	08003be0 	.word	0x08003be0
 8001e8c:	20000000 	.word	0x20000000
 8001e90:	20000004 	.word	0x20000004

08001e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e98:	b094      	sub	sp, #80	@ 0x50
 8001e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001ea4:	2300      	movs	r3, #0
 8001ea6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001eac:	4b79      	ldr	r3, [pc, #484]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eae:	689b      	ldr	r3, [r3, #8]
 8001eb0:	f003 030c 	and.w	r3, r3, #12
 8001eb4:	2b08      	cmp	r3, #8
 8001eb6:	d00d      	beq.n	8001ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8001eb8:	2b08      	cmp	r3, #8
 8001eba:	f200 80e1 	bhi.w	8002080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001ebe:	2b00      	cmp	r3, #0
 8001ec0:	d002      	beq.n	8001ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8001ec2:	2b04      	cmp	r3, #4
 8001ec4:	d003      	beq.n	8001ece <HAL_RCC_GetSysClockFreq+0x3a>
 8001ec6:	e0db      	b.n	8002080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001ec8:	4b73      	ldr	r3, [pc, #460]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x204>)
 8001eca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ecc:	e0db      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001ece:	4b73      	ldr	r3, [pc, #460]	@ (800209c <HAL_RCC_GetSysClockFreq+0x208>)
 8001ed0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001ed2:	e0d8      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001ed4:	4b6f      	ldr	r3, [pc, #444]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ed6:	685b      	ldr	r3, [r3, #4]
 8001ed8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001edc:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001ede:	4b6d      	ldr	r3, [pc, #436]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d063      	beq.n	8001fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001eea:	4b6a      	ldr	r3, [pc, #424]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001eec:	685b      	ldr	r3, [r3, #4]
 8001eee:	099b      	lsrs	r3, r3, #6
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001ef4:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001ef6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001efc:	633b      	str	r3, [r7, #48]	@ 0x30
 8001efe:	2300      	movs	r3, #0
 8001f00:	637b      	str	r3, [r7, #52]	@ 0x34
 8001f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001f06:	4622      	mov	r2, r4
 8001f08:	462b      	mov	r3, r5
 8001f0a:	f04f 0000 	mov.w	r0, #0
 8001f0e:	f04f 0100 	mov.w	r1, #0
 8001f12:	0159      	lsls	r1, r3, #5
 8001f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001f18:	0150      	lsls	r0, r2, #5
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	460b      	mov	r3, r1
 8001f1e:	4621      	mov	r1, r4
 8001f20:	1a51      	subs	r1, r2, r1
 8001f22:	6139      	str	r1, [r7, #16]
 8001f24:	4629      	mov	r1, r5
 8001f26:	eb63 0301 	sbc.w	r3, r3, r1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	f04f 0200 	mov.w	r2, #0
 8001f30:	f04f 0300 	mov.w	r3, #0
 8001f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001f38:	4659      	mov	r1, fp
 8001f3a:	018b      	lsls	r3, r1, #6
 8001f3c:	4651      	mov	r1, sl
 8001f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001f42:	4651      	mov	r1, sl
 8001f44:	018a      	lsls	r2, r1, #6
 8001f46:	4651      	mov	r1, sl
 8001f48:	ebb2 0801 	subs.w	r8, r2, r1
 8001f4c:	4659      	mov	r1, fp
 8001f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	eb18 0303 	adds.w	r3, r8, r3
 8001f70:	60bb      	str	r3, [r7, #8]
 8001f72:	462b      	mov	r3, r5
 8001f74:	eb49 0303 	adc.w	r3, r9, r3
 8001f78:	60fb      	str	r3, [r7, #12]
 8001f7a:	f04f 0200 	mov.w	r2, #0
 8001f7e:	f04f 0300 	mov.w	r3, #0
 8001f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001f86:	4629      	mov	r1, r5
 8001f88:	024b      	lsls	r3, r1, #9
 8001f8a:	4621      	mov	r1, r4
 8001f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001f90:	4621      	mov	r1, r4
 8001f92:	024a      	lsls	r2, r1, #9
 8001f94:	4610      	mov	r0, r2
 8001f96:	4619      	mov	r1, r3
 8001f98:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001f9a:	2200      	movs	r2, #0
 8001f9c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f9e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001fa4:	f7fe f974 	bl	8000290 <__aeabi_uldivmod>
 8001fa8:	4602      	mov	r2, r0
 8001faa:	460b      	mov	r3, r1
 8001fac:	4613      	mov	r3, r2
 8001fae:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001fb0:	e058      	b.n	8002064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001fb2:	4b38      	ldr	r3, [pc, #224]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8001fb4:	685b      	ldr	r3, [r3, #4]
 8001fb6:	099b      	lsrs	r3, r3, #6
 8001fb8:	2200      	movs	r2, #0
 8001fba:	4618      	mov	r0, r3
 8001fbc:	4611      	mov	r1, r2
 8001fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001fc2:	623b      	str	r3, [r7, #32]
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001fcc:	4642      	mov	r2, r8
 8001fce:	464b      	mov	r3, r9
 8001fd0:	f04f 0000 	mov.w	r0, #0
 8001fd4:	f04f 0100 	mov.w	r1, #0
 8001fd8:	0159      	lsls	r1, r3, #5
 8001fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001fde:	0150      	lsls	r0, r2, #5
 8001fe0:	4602      	mov	r2, r0
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8001fea:	4649      	mov	r1, r9
 8001fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8001ff0:	f04f 0200 	mov.w	r2, #0
 8001ff4:	f04f 0300 	mov.w	r3, #0
 8001ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002004:	ebb2 040a 	subs.w	r4, r2, sl
 8002008:	eb63 050b 	sbc.w	r5, r3, fp
 800200c:	f04f 0200 	mov.w	r2, #0
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	00eb      	lsls	r3, r5, #3
 8002016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800201a:	00e2      	lsls	r2, r4, #3
 800201c:	4614      	mov	r4, r2
 800201e:	461d      	mov	r5, r3
 8002020:	4643      	mov	r3, r8
 8002022:	18e3      	adds	r3, r4, r3
 8002024:	603b      	str	r3, [r7, #0]
 8002026:	464b      	mov	r3, r9
 8002028:	eb45 0303 	adc.w	r3, r5, r3
 800202c:	607b      	str	r3, [r7, #4]
 800202e:	f04f 0200 	mov.w	r2, #0
 8002032:	f04f 0300 	mov.w	r3, #0
 8002036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800203a:	4629      	mov	r1, r5
 800203c:	028b      	lsls	r3, r1, #10
 800203e:	4621      	mov	r1, r4
 8002040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002044:	4621      	mov	r1, r4
 8002046:	028a      	lsls	r2, r1, #10
 8002048:	4610      	mov	r0, r2
 800204a:	4619      	mov	r1, r3
 800204c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800204e:	2200      	movs	r2, #0
 8002050:	61bb      	str	r3, [r7, #24]
 8002052:	61fa      	str	r2, [r7, #28]
 8002054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002058:	f7fe f91a 	bl	8000290 <__aeabi_uldivmod>
 800205c:	4602      	mov	r2, r0
 800205e:	460b      	mov	r3, r1
 8002060:	4613      	mov	r3, r2
 8002062:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8002064:	4b0b      	ldr	r3, [pc, #44]	@ (8002094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002066:	685b      	ldr	r3, [r3, #4]
 8002068:	0c1b      	lsrs	r3, r3, #16
 800206a:	f003 0303 	and.w	r3, r3, #3
 800206e:	3301      	adds	r3, #1
 8002070:	005b      	lsls	r3, r3, #1
 8002072:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8002074:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002076:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8002078:	fbb2 f3f3 	udiv	r3, r2, r3
 800207c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800207e:	e002      	b.n	8002086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002080:	4b05      	ldr	r3, [pc, #20]	@ (8002098 <HAL_RCC_GetSysClockFreq+0x204>)
 8002082:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8002084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002086:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8002088:	4618      	mov	r0, r3
 800208a:	3750      	adds	r7, #80	@ 0x50
 800208c:	46bd      	mov	sp, r7
 800208e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002092:	bf00      	nop
 8002094:	40023800 	.word	0x40023800
 8002098:	00f42400 	.word	0x00f42400
 800209c:	007a1200 	.word	0x007a1200

080020a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2b00      	cmp	r3, #0
 80020ac:	d101      	bne.n	80020b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80020ae:	2301      	movs	r3, #1
 80020b0:	e07b      	b.n	80021aa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020b6:	2b00      	cmp	r3, #0
 80020b8:	d108      	bne.n	80020cc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	685b      	ldr	r3, [r3, #4]
 80020be:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80020c2:	d009      	beq.n	80020d8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	2200      	movs	r2, #0
 80020c8:	61da      	str	r2, [r3, #28]
 80020ca:	e005      	b.n	80020d8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	2200      	movs	r2, #0
 80020d0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	2200      	movs	r2, #0
 80020d6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	2200      	movs	r2, #0
 80020dc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80020e4:	b2db      	uxtb	r3, r3
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	d106      	bne.n	80020f8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80020ea:	687b      	ldr	r3, [r7, #4]
 80020ec:	2200      	movs	r2, #0
 80020ee:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80020f2:	6878      	ldr	r0, [r7, #4]
 80020f4:	f7fe fe1e 	bl	8000d34 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	2202      	movs	r2, #2
 80020fc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	681a      	ldr	r2, [r3, #0]
 8002106:	687b      	ldr	r3, [r7, #4]
 8002108:	681b      	ldr	r3, [r3, #0]
 800210a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800210e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	685b      	ldr	r3, [r3, #4]
 8002114:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	689b      	ldr	r3, [r3, #8]
 800211c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002120:	431a      	orrs	r2, r3
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	68db      	ldr	r3, [r3, #12]
 8002126:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800212a:	431a      	orrs	r2, r3
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	691b      	ldr	r3, [r3, #16]
 8002130:	f003 0302 	and.w	r3, r3, #2
 8002134:	431a      	orrs	r2, r3
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	695b      	ldr	r3, [r3, #20]
 800213a:	f003 0301 	and.w	r3, r3, #1
 800213e:	431a      	orrs	r2, r3
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	699b      	ldr	r3, [r3, #24]
 8002144:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002148:	431a      	orrs	r2, r3
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	69db      	ldr	r3, [r3, #28]
 800214e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002152:	431a      	orrs	r2, r3
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6a1b      	ldr	r3, [r3, #32]
 8002158:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800215c:	ea42 0103 	orr.w	r1, r2, r3
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002164:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	430a      	orrs	r2, r1
 800216e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	699b      	ldr	r3, [r3, #24]
 8002174:	0c1b      	lsrs	r3, r3, #16
 8002176:	f003 0104 	and.w	r1, r3, #4
 800217a:	687b      	ldr	r3, [r7, #4]
 800217c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217e:	f003 0210 	and.w	r2, r3, #16
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	430a      	orrs	r2, r1
 8002188:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	69da      	ldr	r2, [r3, #28]
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002198:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2201      	movs	r2, #1
 80021a4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3708      	adds	r7, #8
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}

080021b2 <HAL_SPI_Transmit>:
  * @param  Size amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021b2:	b580      	push	{r7, lr}
 80021b4:	b088      	sub	sp, #32
 80021b6:	af00      	add	r7, sp, #0
 80021b8:	60f8      	str	r0, [r7, #12]
 80021ba:	60b9      	str	r1, [r7, #8]
 80021bc:	603b      	str	r3, [r7, #0]
 80021be:	4613      	mov	r3, r2
 80021c0:	80fb      	strh	r3, [r7, #6]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80021c2:	f7fe ffa3 	bl	800110c <HAL_GetTick>
 80021c6:	61f8      	str	r0, [r7, #28]
  initial_TxXferCount = Size;
 80021c8:	88fb      	ldrh	r3, [r7, #6]
 80021ca:	837b      	strh	r3, [r7, #26]

  if (hspi->State != HAL_SPI_STATE_READY)
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b01      	cmp	r3, #1
 80021d6:	d001      	beq.n	80021dc <HAL_SPI_Transmit+0x2a>
  {
    return HAL_BUSY;
 80021d8:	2302      	movs	r3, #2
 80021da:	e12a      	b.n	8002432 <HAL_SPI_Transmit+0x280>
  }

  if ((pData == NULL) || (Size == 0U))
 80021dc:	68bb      	ldr	r3, [r7, #8]
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d002      	beq.n	80021e8 <HAL_SPI_Transmit+0x36>
 80021e2:	88fb      	ldrh	r3, [r7, #6]
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d101      	bne.n	80021ec <HAL_SPI_Transmit+0x3a>
  {
    return HAL_ERROR;
 80021e8:	2301      	movs	r3, #1
 80021ea:	e122      	b.n	8002432 <HAL_SPI_Transmit+0x280>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80021f2:	2b01      	cmp	r3, #1
 80021f4:	d101      	bne.n	80021fa <HAL_SPI_Transmit+0x48>
 80021f6:	2302      	movs	r3, #2
 80021f8:	e11b      	b.n	8002432 <HAL_SPI_Transmit+0x280>
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	2201      	movs	r2, #1
 80021fe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002202:	68fb      	ldr	r3, [r7, #12]
 8002204:	2203      	movs	r2, #3
 8002206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	2200      	movs	r2, #0
 800220e:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pTxBuffPtr  = (const uint8_t *)pData;
 8002210:	68fb      	ldr	r3, [r7, #12]
 8002212:	68ba      	ldr	r2, [r7, #8]
 8002214:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = Size;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	88fa      	ldrh	r2, [r7, #6]
 800221a:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = Size;
 800221c:	68fb      	ldr	r3, [r7, #12]
 800221e:	88fa      	ldrh	r2, [r7, #6]
 8002220:	86da      	strh	r2, [r3, #54]	@ 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002222:	68fb      	ldr	r3, [r7, #12]
 8002224:	2200      	movs	r2, #0
 8002226:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = 0U;
 8002228:	68fb      	ldr	r3, [r7, #12]
 800222a:	2200      	movs	r2, #0
 800222c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = 0U;
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	2200      	movs	r2, #0
 8002232:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxISR       = NULL;
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	2200      	movs	r2, #0
 8002238:	645a      	str	r2, [r3, #68]	@ 0x44
  hspi->RxISR       = NULL;
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2200      	movs	r2, #0
 800223e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002240:	68fb      	ldr	r3, [r7, #12]
 8002242:	689b      	ldr	r3, [r3, #8]
 8002244:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002248:	d10f      	bne.n	800226a <HAL_SPI_Transmit+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	681a      	ldr	r2, [r3, #0]
 8002250:	68fb      	ldr	r3, [r7, #12]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002258:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800225a:	68fb      	ldr	r3, [r7, #12]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	681a      	ldr	r2, [r3, #0]
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002268:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	681b      	ldr	r3, [r3, #0]
 8002270:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002274:	2b40      	cmp	r3, #64	@ 0x40
 8002276:	d007      	beq.n	8002288 <HAL_SPI_Transmit+0xd6>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681a      	ldr	r2, [r3, #0]
 800227e:	68fb      	ldr	r3, [r7, #12]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002286:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	68db      	ldr	r3, [r3, #12]
 800228c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002290:	d152      	bne.n	8002338 <HAL_SPI_Transmit+0x186>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	685b      	ldr	r3, [r3, #4]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <HAL_SPI_Transmit+0xee>
 800229a:	8b7b      	ldrh	r3, [r7, #26]
 800229c:	2b01      	cmp	r3, #1
 800229e:	d145      	bne.n	800232c <HAL_SPI_Transmit+0x17a>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022a4:	881a      	ldrh	r2, [r3, #0]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80022ac:	68fb      	ldr	r3, [r7, #12]
 80022ae:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022b0:	1c9a      	adds	r2, r3, #2
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80022b6:	68fb      	ldr	r3, [r7, #12]
 80022b8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ba:	b29b      	uxth	r3, r3
 80022bc:	3b01      	subs	r3, #1
 80022be:	b29a      	uxth	r2, r3
 80022c0:	68fb      	ldr	r3, [r7, #12]
 80022c2:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80022c4:	e032      	b.n	800232c <HAL_SPI_Transmit+0x17a>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	689b      	ldr	r3, [r3, #8]
 80022cc:	f003 0302 	and.w	r3, r3, #2
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d112      	bne.n	80022fa <HAL_SPI_Transmit+0x148>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80022d4:	68fb      	ldr	r3, [r7, #12]
 80022d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022d8:	881a      	ldrh	r2, [r3, #0]
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80022e4:	1c9a      	adds	r2, r3, #2
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80022ea:	68fb      	ldr	r3, [r7, #12]
 80022ec:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80022ee:	b29b      	uxth	r3, r3
 80022f0:	3b01      	subs	r3, #1
 80022f2:	b29a      	uxth	r2, r3
 80022f4:	68fb      	ldr	r3, [r7, #12]
 80022f6:	86da      	strh	r2, [r3, #54]	@ 0x36
 80022f8:	e018      	b.n	800232c <HAL_SPI_Transmit+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80022fa:	f7fe ff07 	bl	800110c <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	69fb      	ldr	r3, [r7, #28]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	683a      	ldr	r2, [r7, #0]
 8002306:	429a      	cmp	r2, r3
 8002308:	d803      	bhi.n	8002312 <HAL_SPI_Transmit+0x160>
 800230a:	683b      	ldr	r3, [r7, #0]
 800230c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002310:	d102      	bne.n	8002318 <HAL_SPI_Transmit+0x166>
 8002312:	683b      	ldr	r3, [r7, #0]
 8002314:	2b00      	cmp	r3, #0
 8002316:	d109      	bne.n	800232c <HAL_SPI_Transmit+0x17a>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	2201      	movs	r2, #1
 800231c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	2200      	movs	r2, #0
 8002324:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e082      	b.n	8002432 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002330:	b29b      	uxth	r3, r3
 8002332:	2b00      	cmp	r3, #0
 8002334:	d1c7      	bne.n	80022c6 <HAL_SPI_Transmit+0x114>
 8002336:	e053      	b.n	80023e0 <HAL_SPI_Transmit+0x22e>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002338:	68fb      	ldr	r3, [r7, #12]
 800233a:	685b      	ldr	r3, [r3, #4]
 800233c:	2b00      	cmp	r3, #0
 800233e:	d002      	beq.n	8002346 <HAL_SPI_Transmit+0x194>
 8002340:	8b7b      	ldrh	r3, [r7, #26]
 8002342:	2b01      	cmp	r3, #1
 8002344:	d147      	bne.n	80023d6 <HAL_SPI_Transmit+0x224>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800234a:	68fb      	ldr	r3, [r7, #12]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	330c      	adds	r3, #12
 8002350:	7812      	ldrb	r2, [r2, #0]
 8002352:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002354:	68fb      	ldr	r3, [r7, #12]
 8002356:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002358:	1c5a      	adds	r2, r3, #1
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002362:	b29b      	uxth	r3, r3
 8002364:	3b01      	subs	r3, #1
 8002366:	b29a      	uxth	r2, r3
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	86da      	strh	r2, [r3, #54]	@ 0x36
    }
    while (hspi->TxXferCount > 0U)
 800236c:	e033      	b.n	80023d6 <HAL_SPI_Transmit+0x224>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	689b      	ldr	r3, [r3, #8]
 8002374:	f003 0302 	and.w	r3, r3, #2
 8002378:	2b02      	cmp	r3, #2
 800237a:	d113      	bne.n	80023a4 <HAL_SPI_Transmit+0x1f2>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002380:	68fb      	ldr	r3, [r7, #12]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	330c      	adds	r3, #12
 8002386:	7812      	ldrb	r2, [r2, #0]
 8002388:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800238e:	1c5a      	adds	r2, r3, #1
 8002390:	68fb      	ldr	r3, [r7, #12]
 8002392:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002398:	b29b      	uxth	r3, r3
 800239a:	3b01      	subs	r3, #1
 800239c:	b29a      	uxth	r2, r3
 800239e:	68fb      	ldr	r3, [r7, #12]
 80023a0:	86da      	strh	r2, [r3, #54]	@ 0x36
 80023a2:	e018      	b.n	80023d6 <HAL_SPI_Transmit+0x224>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80023a4:	f7fe feb2 	bl	800110c <HAL_GetTick>
 80023a8:	4602      	mov	r2, r0
 80023aa:	69fb      	ldr	r3, [r7, #28]
 80023ac:	1ad3      	subs	r3, r2, r3
 80023ae:	683a      	ldr	r2, [r7, #0]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	d803      	bhi.n	80023bc <HAL_SPI_Transmit+0x20a>
 80023b4:	683b      	ldr	r3, [r7, #0]
 80023b6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023ba:	d102      	bne.n	80023c2 <HAL_SPI_Transmit+0x210>
 80023bc:	683b      	ldr	r3, [r7, #0]
 80023be:	2b00      	cmp	r3, #0
 80023c0:	d109      	bne.n	80023d6 <HAL_SPI_Transmit+0x224>
        {
          hspi->State = HAL_SPI_STATE_READY;
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	2201      	movs	r2, #1
 80023c6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80023ca:	68fb      	ldr	r3, [r7, #12]
 80023cc:	2200      	movs	r2, #0
 80023ce:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80023d2:	2303      	movs	r3, #3
 80023d4:	e02d      	b.n	8002432 <HAL_SPI_Transmit+0x280>
    while (hspi->TxXferCount > 0U)
 80023d6:	68fb      	ldr	r3, [r7, #12]
 80023d8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80023da:	b29b      	uxth	r3, r3
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d1c6      	bne.n	800236e <HAL_SPI_Transmit+0x1bc>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80023e0:	69fa      	ldr	r2, [r7, #28]
 80023e2:	6839      	ldr	r1, [r7, #0]
 80023e4:	68f8      	ldr	r0, [r7, #12]
 80023e6:	f000 fbd9 	bl	8002b9c <SPI_EndRxTxTransaction>
 80023ea:	4603      	mov	r3, r0
 80023ec:	2b00      	cmp	r3, #0
 80023ee:	d002      	beq.n	80023f6 <HAL_SPI_Transmit+0x244>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	2220      	movs	r2, #32
 80023f4:	655a      	str	r2, [r3, #84]	@ 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80023f6:	68fb      	ldr	r3, [r7, #12]
 80023f8:	689b      	ldr	r3, [r3, #8]
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d10a      	bne.n	8002414 <HAL_SPI_Transmit+0x262>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	68fb      	ldr	r3, [r7, #12]
 8002404:	681b      	ldr	r3, [r3, #0]
 8002406:	68db      	ldr	r3, [r3, #12]
 8002408:	617b      	str	r3, [r7, #20]
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681b      	ldr	r3, [r3, #0]
 800240e:	689b      	ldr	r3, [r3, #8]
 8002410:	617b      	str	r3, [r7, #20]
 8002412:	697b      	ldr	r3, [r7, #20]
  }

  hspi->State = HAL_SPI_STATE_READY;
 8002414:	68fb      	ldr	r3, [r7, #12]
 8002416:	2201      	movs	r2, #1
 8002418:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800241c:	68fb      	ldr	r3, [r7, #12]
 800241e:	2200      	movs	r2, #0
 8002420:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002428:	2b00      	cmp	r3, #0
 800242a:	d001      	beq.n	8002430 <HAL_SPI_Transmit+0x27e>
  {
    return HAL_ERROR;
 800242c:	2301      	movs	r3, #1
 800242e:	e000      	b.n	8002432 <HAL_SPI_Transmit+0x280>
  }
  else
  {
    return HAL_OK;
 8002430:	2300      	movs	r3, #0
  }
}
 8002432:	4618      	mov	r0, r3
 8002434:	3720      	adds	r7, #32
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}

0800243a <HAL_SPI_Receive>:
  * @note   In master mode, if the direction is set to SPI_DIRECTION_2LINES
  *         the receive buffer is written to data register (DR) to generate
  *         clock pulses and receive data
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800243a:	b580      	push	{r7, lr}
 800243c:	b088      	sub	sp, #32
 800243e:	af02      	add	r7, sp, #8
 8002440:	60f8      	str	r0, [r7, #12]
 8002442:	60b9      	str	r1, [r7, #8]
 8002444:	603b      	str	r3, [r7, #0]
 8002446:	4613      	mov	r3, r2
 8002448:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;

  if (hspi->State != HAL_SPI_STATE_READY)
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002450:	b2db      	uxtb	r3, r3
 8002452:	2b01      	cmp	r3, #1
 8002454:	d001      	beq.n	800245a <HAL_SPI_Receive+0x20>
  {
    return HAL_BUSY;
 8002456:	2302      	movs	r3, #2
 8002458:	e104      	b.n	8002664 <HAL_SPI_Receive+0x22a>
  }

  if ((pData == NULL) || (Size == 0U))
 800245a:	68bb      	ldr	r3, [r7, #8]
 800245c:	2b00      	cmp	r3, #0
 800245e:	d002      	beq.n	8002466 <HAL_SPI_Receive+0x2c>
 8002460:	88fb      	ldrh	r3, [r7, #6]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_SPI_Receive+0x30>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e0fc      	b.n	8002664 <HAL_SPI_Receive+0x22a>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002472:	d112      	bne.n	800249a <HAL_SPI_Receive+0x60>
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	689b      	ldr	r3, [r3, #8]
 8002478:	2b00      	cmp	r3, #0
 800247a:	d10e      	bne.n	800249a <HAL_SPI_Receive+0x60>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800247c:	68fb      	ldr	r3, [r7, #12]
 800247e:	2204      	movs	r2, #4
 8002480:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002484:	88fa      	ldrh	r2, [r7, #6]
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	9300      	str	r3, [sp, #0]
 800248a:	4613      	mov	r3, r2
 800248c:	68ba      	ldr	r2, [r7, #8]
 800248e:	68b9      	ldr	r1, [r7, #8]
 8002490:	68f8      	ldr	r0, [r7, #12]
 8002492:	f000 f8eb 	bl	800266c <HAL_SPI_TransmitReceive>
 8002496:	4603      	mov	r3, r0
 8002498:	e0e4      	b.n	8002664 <HAL_SPI_Receive+0x22a>
  }

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800249a:	f7fe fe37 	bl	800110c <HAL_GetTick>
 800249e:	6178      	str	r0, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hspi);
 80024a0:	68fb      	ldr	r3, [r7, #12]
 80024a2:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d101      	bne.n	80024ae <HAL_SPI_Receive+0x74>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e0da      	b.n	8002664 <HAL_SPI_Receive+0x22a>
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	2201      	movs	r2, #1
 80024b2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	2204      	movs	r2, #4
 80024ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	68ba      	ldr	r2, [r7, #8]
 80024c8:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	88fa      	ldrh	r2, [r7, #6]
 80024ce:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 80024d0:	68fb      	ldr	r3, [r7, #12]
 80024d2:	88fa      	ldrh	r2, [r7, #6]
 80024d4:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80024d6:	68fb      	ldr	r3, [r7, #12]
 80024d8:	2200      	movs	r2, #0
 80024da:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	2200      	movs	r2, #0
 80024e0:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 80024e2:	68fb      	ldr	r3, [r7, #12]
 80024e4:	2200      	movs	r2, #0
 80024e6:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	2200      	movs	r2, #0
 80024ec:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 80024ee:	68fb      	ldr	r3, [r7, #12]
 80024f0:	2200      	movs	r2, #0
 80024f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	689b      	ldr	r3, [r3, #8]
 80024f8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80024fc:	d10f      	bne.n	800251e <HAL_SPI_Receive+0xe4>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	681a      	ldr	r2, [r3, #0]
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800250c:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	681a      	ldr	r2, [r3, #0]
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	681b      	ldr	r3, [r3, #0]
 8002518:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 800251c:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800251e:	68fb      	ldr	r3, [r7, #12]
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002528:	2b40      	cmp	r3, #64	@ 0x40
 800252a:	d007      	beq.n	800253c <HAL_SPI_Receive+0x102>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800252c:	68fb      	ldr	r3, [r7, #12]
 800252e:	681b      	ldr	r3, [r3, #0]
 8002530:	681a      	ldr	r2, [r3, #0]
 8002532:	68fb      	ldr	r3, [r7, #12]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800253a:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	68db      	ldr	r3, [r3, #12]
 8002540:	2b00      	cmp	r3, #0
 8002542:	d170      	bne.n	8002626 <HAL_SPI_Receive+0x1ec>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002544:	e035      	b.n	80025b2 <HAL_SPI_Receive+0x178>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	681b      	ldr	r3, [r3, #0]
 800254a:	689b      	ldr	r3, [r3, #8]
 800254c:	f003 0301 	and.w	r3, r3, #1
 8002550:	2b01      	cmp	r3, #1
 8002552:	d115      	bne.n	8002580 <HAL_SPI_Receive+0x146>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002554:	68fb      	ldr	r3, [r7, #12]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	f103 020c 	add.w	r2, r3, #12
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002560:	7812      	ldrb	r2, [r2, #0]
 8002562:	b2d2      	uxtb	r2, r2
 8002564:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800256a:	1c5a      	adds	r2, r3, #1
 800256c:	68fb      	ldr	r3, [r7, #12]
 800256e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002574:	b29b      	uxth	r3, r3
 8002576:	3b01      	subs	r3, #1
 8002578:	b29a      	uxth	r2, r3
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	87da      	strh	r2, [r3, #62]	@ 0x3e
 800257e:	e018      	b.n	80025b2 <HAL_SPI_Receive+0x178>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002580:	f7fe fdc4 	bl	800110c <HAL_GetTick>
 8002584:	4602      	mov	r2, r0
 8002586:	697b      	ldr	r3, [r7, #20]
 8002588:	1ad3      	subs	r3, r2, r3
 800258a:	683a      	ldr	r2, [r7, #0]
 800258c:	429a      	cmp	r2, r3
 800258e:	d803      	bhi.n	8002598 <HAL_SPI_Receive+0x15e>
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002596:	d102      	bne.n	800259e <HAL_SPI_Receive+0x164>
 8002598:	683b      	ldr	r3, [r7, #0]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d109      	bne.n	80025b2 <HAL_SPI_Receive+0x178>
        {
          hspi->State = HAL_SPI_STATE_READY;
 800259e:	68fb      	ldr	r3, [r7, #12]
 80025a0:	2201      	movs	r2, #1
 80025a2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 80025ae:	2303      	movs	r3, #3
 80025b0:	e058      	b.n	8002664 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 80025b2:	68fb      	ldr	r3, [r7, #12]
 80025b4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025b6:	b29b      	uxth	r3, r3
 80025b8:	2b00      	cmp	r3, #0
 80025ba:	d1c4      	bne.n	8002546 <HAL_SPI_Receive+0x10c>
 80025bc:	e038      	b.n	8002630 <HAL_SPI_Receive+0x1f6>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	f003 0301 	and.w	r3, r3, #1
 80025c8:	2b01      	cmp	r3, #1
 80025ca:	d113      	bne.n	80025f4 <HAL_SPI_Receive+0x1ba>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	68da      	ldr	r2, [r3, #12]
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025d6:	b292      	uxth	r2, r2
 80025d8:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80025da:	68fb      	ldr	r3, [r7, #12]
 80025dc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025de:	1c9a      	adds	r2, r3, #2
 80025e0:	68fb      	ldr	r3, [r7, #12]
 80025e2:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80025e4:	68fb      	ldr	r3, [r7, #12]
 80025e6:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80025e8:	b29b      	uxth	r3, r3
 80025ea:	3b01      	subs	r3, #1
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	87da      	strh	r2, [r3, #62]	@ 0x3e
 80025f2:	e018      	b.n	8002626 <HAL_SPI_Receive+0x1ec>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80025f4:	f7fe fd8a 	bl	800110c <HAL_GetTick>
 80025f8:	4602      	mov	r2, r0
 80025fa:	697b      	ldr	r3, [r7, #20]
 80025fc:	1ad3      	subs	r3, r2, r3
 80025fe:	683a      	ldr	r2, [r7, #0]
 8002600:	429a      	cmp	r2, r3
 8002602:	d803      	bhi.n	800260c <HAL_SPI_Receive+0x1d2>
 8002604:	683b      	ldr	r3, [r7, #0]
 8002606:	f1b3 3fff 	cmp.w	r3, #4294967295
 800260a:	d102      	bne.n	8002612 <HAL_SPI_Receive+0x1d8>
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b00      	cmp	r3, #0
 8002610:	d109      	bne.n	8002626 <HAL_SPI_Receive+0x1ec>
        {
          hspi->State = HAL_SPI_STATE_READY;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	2201      	movs	r2, #1
 8002616:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          __HAL_UNLOCK(hspi);
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	2200      	movs	r2, #0
 800261e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
          return HAL_TIMEOUT;
 8002622:	2303      	movs	r3, #3
 8002624:	e01e      	b.n	8002664 <HAL_SPI_Receive+0x22a>
    while (hspi->RxXferCount > 0U)
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800262a:	b29b      	uxth	r3, r3
 800262c:	2b00      	cmp	r3, #0
 800262e:	d1c6      	bne.n	80025be <HAL_SPI_Receive+0x184>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002630:	697a      	ldr	r2, [r7, #20]
 8002632:	6839      	ldr	r1, [r7, #0]
 8002634:	68f8      	ldr	r0, [r7, #12]
 8002636:	f000 fa4b 	bl	8002ad0 <SPI_EndRxTransaction>
 800263a:	4603      	mov	r3, r0
 800263c:	2b00      	cmp	r3, #0
 800263e:	d002      	beq.n	8002646 <HAL_SPI_Receive+0x20c>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	2220      	movs	r2, #32
 8002644:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  hspi->State = HAL_SPI_STATE_READY;
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	2201      	movs	r2, #1
 800264a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	2200      	movs	r2, #0
 8002652:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002656:	68fb      	ldr	r3, [r7, #12]
 8002658:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800265a:	2b00      	cmp	r3, #0
 800265c:	d001      	beq.n	8002662 <HAL_SPI_Receive+0x228>
  {
    return HAL_ERROR;
 800265e:	2301      	movs	r3, #1
 8002660:	e000      	b.n	8002664 <HAL_SPI_Receive+0x22a>
  }
  else
  {
    return HAL_OK;
 8002662:	2300      	movs	r3, #0
  }
}
 8002664:	4618      	mov	r0, r3
 8002666:	3718      	adds	r7, #24
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b08a      	sub	sp, #40	@ 0x28
 8002670:	af00      	add	r7, sp, #0
 8002672:	60f8      	str	r0, [r7, #12]
 8002674:	60b9      	str	r1, [r7, #8]
 8002676:	607a      	str	r2, [r7, #4]
 8002678:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800267a:	2301      	movs	r3, #1
 800267c:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800267e:	f7fe fd45 	bl	800110c <HAL_GetTick>
 8002682:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800268a:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 800268c:	68fb      	ldr	r3, [r7, #12]
 800268e:	685b      	ldr	r3, [r3, #4]
 8002690:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8002692:	887b      	ldrh	r3, [r7, #2]
 8002694:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002696:	7ffb      	ldrb	r3, [r7, #31]
 8002698:	2b01      	cmp	r3, #1
 800269a:	d00c      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x4a>
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80026a2:	d106      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	689b      	ldr	r3, [r3, #8]
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d102      	bne.n	80026b2 <HAL_SPI_TransmitReceive+0x46>
 80026ac:	7ffb      	ldrb	r3, [r7, #31]
 80026ae:	2b04      	cmp	r3, #4
 80026b0:	d001      	beq.n	80026b6 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80026b2:	2302      	movs	r3, #2
 80026b4:	e17f      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80026b6:	68bb      	ldr	r3, [r7, #8]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d005      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x5c>
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	2b00      	cmp	r3, #0
 80026c0:	d002      	beq.n	80026c8 <HAL_SPI_TransmitReceive+0x5c>
 80026c2:	887b      	ldrh	r3, [r7, #2]
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d101      	bne.n	80026cc <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80026c8:	2301      	movs	r3, #1
 80026ca:	e174      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80026d2:	2b01      	cmp	r3, #1
 80026d4:	d101      	bne.n	80026da <HAL_SPI_TransmitReceive+0x6e>
 80026d6:	2302      	movs	r3, #2
 80026d8:	e16d      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	2201      	movs	r2, #1
 80026de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80026e2:	68fb      	ldr	r3, [r7, #12]
 80026e4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026e8:	b2db      	uxtb	r3, r3
 80026ea:	2b04      	cmp	r3, #4
 80026ec:	d003      	beq.n	80026f6 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	2205      	movs	r2, #5
 80026f2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	2200      	movs	r2, #0
 80026fa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002702:	68fb      	ldr	r3, [r7, #12]
 8002704:	887a      	ldrh	r2, [r7, #2]
 8002706:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	887a      	ldrh	r2, [r7, #2]
 800270c:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	68ba      	ldr	r2, [r7, #8]
 8002712:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	887a      	ldrh	r2, [r7, #2]
 8002718:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800271a:	68fb      	ldr	r3, [r7, #12]
 800271c:	887a      	ldrh	r2, [r7, #2]
 800271e:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002720:	68fb      	ldr	r3, [r7, #12]
 8002722:	2200      	movs	r2, #0
 8002724:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002726:	68fb      	ldr	r3, [r7, #12]
 8002728:	2200      	movs	r2, #0
 800272a:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800272c:	68fb      	ldr	r3, [r7, #12]
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002736:	2b40      	cmp	r3, #64	@ 0x40
 8002738:	d007      	beq.n	800274a <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	681a      	ldr	r2, [r3, #0]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002748:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800274a:	68fb      	ldr	r3, [r7, #12]
 800274c:	68db      	ldr	r3, [r3, #12]
 800274e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002752:	d17e      	bne.n	8002852 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d002      	beq.n	8002762 <HAL_SPI_TransmitReceive+0xf6>
 800275c:	8afb      	ldrh	r3, [r7, #22]
 800275e:	2b01      	cmp	r3, #1
 8002760:	d16c      	bne.n	800283c <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8002762:	68fb      	ldr	r3, [r7, #12]
 8002764:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002766:	881a      	ldrh	r2, [r3, #0]
 8002768:	68fb      	ldr	r3, [r7, #12]
 800276a:	681b      	ldr	r3, [r3, #0]
 800276c:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002772:	1c9a      	adds	r2, r3, #2
 8002774:	68fb      	ldr	r3, [r7, #12]
 8002776:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002778:	68fb      	ldr	r3, [r7, #12]
 800277a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800277c:	b29b      	uxth	r3, r3
 800277e:	3b01      	subs	r3, #1
 8002780:	b29a      	uxth	r2, r3
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002786:	e059      	b.n	800283c <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	689b      	ldr	r3, [r3, #8]
 800278e:	f003 0302 	and.w	r3, r3, #2
 8002792:	2b02      	cmp	r3, #2
 8002794:	d11b      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x162>
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800279a:	b29b      	uxth	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d016      	beq.n	80027ce <HAL_SPI_TransmitReceive+0x162>
 80027a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027a2:	2b01      	cmp	r3, #1
 80027a4:	d113      	bne.n	80027ce <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	881a      	ldrh	r2, [r3, #0]
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	1c9a      	adds	r2, r3, #2
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80027c0:	b29b      	uxth	r3, r3
 80027c2:	3b01      	subs	r3, #1
 80027c4:	b29a      	uxth	r2, r3
 80027c6:	68fb      	ldr	r3, [r7, #12]
 80027c8:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80027ca:	2300      	movs	r3, #0
 80027cc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80027ce:	68fb      	ldr	r3, [r7, #12]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	689b      	ldr	r3, [r3, #8]
 80027d4:	f003 0301 	and.w	r3, r3, #1
 80027d8:	2b01      	cmp	r3, #1
 80027da:	d119      	bne.n	8002810 <HAL_SPI_TransmitReceive+0x1a4>
 80027dc:	68fb      	ldr	r3, [r7, #12]
 80027de:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80027e0:	b29b      	uxth	r3, r3
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d014      	beq.n	8002810 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	68da      	ldr	r2, [r3, #12]
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f0:	b292      	uxth	r2, r2
 80027f2:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80027f8:	1c9a      	adds	r2, r3, #2
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002802:	b29b      	uxth	r3, r3
 8002804:	3b01      	subs	r3, #1
 8002806:	b29a      	uxth	r2, r3
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800280c:	2301      	movs	r3, #1
 800280e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8002810:	f7fe fc7c 	bl	800110c <HAL_GetTick>
 8002814:	4602      	mov	r2, r0
 8002816:	6a3b      	ldr	r3, [r7, #32]
 8002818:	1ad3      	subs	r3, r2, r3
 800281a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800281c:	429a      	cmp	r2, r3
 800281e:	d80d      	bhi.n	800283c <HAL_SPI_TransmitReceive+0x1d0>
 8002820:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002822:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002826:	d009      	beq.n	800283c <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002828:	68fb      	ldr	r3, [r7, #12]
 800282a:	2201      	movs	r2, #1
 800282c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	2200      	movs	r2, #0
 8002834:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002838:	2303      	movs	r3, #3
 800283a:	e0bc      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002840:	b29b      	uxth	r3, r3
 8002842:	2b00      	cmp	r3, #0
 8002844:	d1a0      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x11c>
 8002846:	68fb      	ldr	r3, [r7, #12]
 8002848:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800284a:	b29b      	uxth	r3, r3
 800284c:	2b00      	cmp	r3, #0
 800284e:	d19b      	bne.n	8002788 <HAL_SPI_TransmitReceive+0x11c>
 8002850:	e082      	b.n	8002958 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	685b      	ldr	r3, [r3, #4]
 8002856:	2b00      	cmp	r3, #0
 8002858:	d002      	beq.n	8002860 <HAL_SPI_TransmitReceive+0x1f4>
 800285a:	8afb      	ldrh	r3, [r7, #22]
 800285c:	2b01      	cmp	r3, #1
 800285e:	d171      	bne.n	8002944 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8002860:	68fb      	ldr	r3, [r7, #12]
 8002862:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	330c      	adds	r3, #12
 800286a:	7812      	ldrb	r2, [r2, #0]
 800286c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002872:	1c5a      	adds	r2, r3, #1
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800287c:	b29b      	uxth	r3, r3
 800287e:	3b01      	subs	r3, #1
 8002880:	b29a      	uxth	r2, r3
 8002882:	68fb      	ldr	r3, [r7, #12]
 8002884:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002886:	e05d      	b.n	8002944 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002888:	68fb      	ldr	r3, [r7, #12]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	689b      	ldr	r3, [r3, #8]
 800288e:	f003 0302 	and.w	r3, r3, #2
 8002892:	2b02      	cmp	r3, #2
 8002894:	d11c      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x264>
 8002896:	68fb      	ldr	r3, [r7, #12]
 8002898:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800289a:	b29b      	uxth	r3, r3
 800289c:	2b00      	cmp	r3, #0
 800289e:	d017      	beq.n	80028d0 <HAL_SPI_TransmitReceive+0x264>
 80028a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028a2:	2b01      	cmp	r3, #1
 80028a4:	d114      	bne.n	80028d0 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80028aa:	68fb      	ldr	r3, [r7, #12]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	330c      	adds	r3, #12
 80028b0:	7812      	ldrb	r2, [r2, #0]
 80028b2:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028b8:	1c5a      	adds	r2, r3, #1
 80028ba:	68fb      	ldr	r3, [r7, #12]
 80028bc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80028c2:	b29b      	uxth	r3, r3
 80028c4:	3b01      	subs	r3, #1
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80028cc:	2300      	movs	r3, #0
 80028ce:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80028d0:	68fb      	ldr	r3, [r7, #12]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	689b      	ldr	r3, [r3, #8]
 80028d6:	f003 0301 	and.w	r3, r3, #1
 80028da:	2b01      	cmp	r3, #1
 80028dc:	d119      	bne.n	8002912 <HAL_SPI_TransmitReceive+0x2a6>
 80028de:	68fb      	ldr	r3, [r7, #12]
 80028e0:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80028e2:	b29b      	uxth	r3, r3
 80028e4:	2b00      	cmp	r3, #0
 80028e6:	d014      	beq.n	8002912 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68da      	ldr	r2, [r3, #12]
 80028ee:	68fb      	ldr	r3, [r7, #12]
 80028f0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028f2:	b2d2      	uxtb	r2, r2
 80028f4:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80028fa:	1c5a      	adds	r2, r3, #1
 80028fc:	68fb      	ldr	r3, [r7, #12]
 80028fe:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002900:	68fb      	ldr	r3, [r7, #12]
 8002902:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002904:	b29b      	uxth	r3, r3
 8002906:	3b01      	subs	r3, #1
 8002908:	b29a      	uxth	r2, r3
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800290e:	2301      	movs	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8002912:	f7fe fbfb 	bl	800110c <HAL_GetTick>
 8002916:	4602      	mov	r2, r0
 8002918:	6a3b      	ldr	r3, [r7, #32]
 800291a:	1ad3      	subs	r3, r2, r3
 800291c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800291e:	429a      	cmp	r2, r3
 8002920:	d803      	bhi.n	800292a <HAL_SPI_TransmitReceive+0x2be>
 8002922:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002924:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002928:	d102      	bne.n	8002930 <HAL_SPI_TransmitReceive+0x2c4>
 800292a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800292c:	2b00      	cmp	r3, #0
 800292e:	d109      	bne.n	8002944 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8002938:	68fb      	ldr	r3, [r7, #12]
 800293a:	2200      	movs	r2, #0
 800293c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8002940:	2303      	movs	r3, #3
 8002942:	e038      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002944:	68fb      	ldr	r3, [r7, #12]
 8002946:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002948:	b29b      	uxth	r3, r3
 800294a:	2b00      	cmp	r3, #0
 800294c:	d19c      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x21c>
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002952:	b29b      	uxth	r3, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	d197      	bne.n	8002888 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002958:	6a3a      	ldr	r2, [r7, #32]
 800295a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800295c:	68f8      	ldr	r0, [r7, #12]
 800295e:	f000 f91d 	bl	8002b9c <SPI_EndRxTxTransaction>
 8002962:	4603      	mov	r3, r0
 8002964:	2b00      	cmp	r3, #0
 8002966:	d008      	beq.n	800297a <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	2220      	movs	r2, #32
 800296c:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	2200      	movs	r2, #0
 8002972:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
 8002978:	e01d      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	2b00      	cmp	r3, #0
 8002980:	d10a      	bne.n	8002998 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002982:	2300      	movs	r3, #0
 8002984:	613b      	str	r3, [r7, #16]
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	681b      	ldr	r3, [r3, #0]
 800298a:	68db      	ldr	r3, [r3, #12]
 800298c:	613b      	str	r3, [r7, #16]
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	689b      	ldr	r3, [r3, #8]
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	2201      	movs	r2, #1
 800299c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2200      	movs	r2, #0
 80029a4:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d001      	beq.n	80029b4 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80029b0:	2301      	movs	r3, #1
 80029b2:	e000      	b.n	80029b6 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80029b4:	2300      	movs	r3, #0
  }
}
 80029b6:	4618      	mov	r0, r3
 80029b8:	3728      	adds	r7, #40	@ 0x28
 80029ba:	46bd      	mov	sp, r7
 80029bc:	bd80      	pop	{r7, pc}
	...

080029c0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b088      	sub	sp, #32
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	60f8      	str	r0, [r7, #12]
 80029c8:	60b9      	str	r1, [r7, #8]
 80029ca:	603b      	str	r3, [r7, #0]
 80029cc:	4613      	mov	r3, r2
 80029ce:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80029d0:	f7fe fb9c 	bl	800110c <HAL_GetTick>
 80029d4:	4602      	mov	r2, r0
 80029d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80029d8:	1a9b      	subs	r3, r3, r2
 80029da:	683a      	ldr	r2, [r7, #0]
 80029dc:	4413      	add	r3, r2
 80029de:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80029e0:	f7fe fb94 	bl	800110c <HAL_GetTick>
 80029e4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80029e6:	4b39      	ldr	r3, [pc, #228]	@ (8002acc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	015b      	lsls	r3, r3, #5
 80029ec:	0d1b      	lsrs	r3, r3, #20
 80029ee:	69fa      	ldr	r2, [r7, #28]
 80029f0:	fb02 f303 	mul.w	r3, r2, r3
 80029f4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80029f6:	e055      	b.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029fe:	d051      	beq.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002a00:	f7fe fb84 	bl	800110c <HAL_GetTick>
 8002a04:	4602      	mov	r2, r0
 8002a06:	69bb      	ldr	r3, [r7, #24]
 8002a08:	1ad3      	subs	r3, r2, r3
 8002a0a:	69fa      	ldr	r2, [r7, #28]
 8002a0c:	429a      	cmp	r2, r3
 8002a0e:	d902      	bls.n	8002a16 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002a10:	69fb      	ldr	r3, [r7, #28]
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d13d      	bne.n	8002a92 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	685a      	ldr	r2, [r3, #4]
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8002a24:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	685b      	ldr	r3, [r3, #4]
 8002a2a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002a2e:	d111      	bne.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	689b      	ldr	r3, [r3, #8]
 8002a34:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002a38:	d004      	beq.n	8002a44 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	689b      	ldr	r3, [r3, #8]
 8002a3e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002a42:	d107      	bne.n	8002a54 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	681a      	ldr	r2, [r3, #0]
 8002a4a:	68fb      	ldr	r3, [r7, #12]
 8002a4c:	681b      	ldr	r3, [r3, #0]
 8002a4e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002a52:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002a58:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002a5c:	d10f      	bne.n	8002a7e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002a5e:	68fb      	ldr	r3, [r7, #12]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	681a      	ldr	r2, [r3, #0]
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8002a6c:	601a      	str	r2, [r3, #0]
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	681a      	ldr	r2, [r3, #0]
 8002a74:	68fb      	ldr	r3, [r7, #12]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8002a7c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	2201      	movs	r2, #1
 8002a82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002a86:	68fb      	ldr	r3, [r7, #12]
 8002a88:	2200      	movs	r2, #0
 8002a8a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8002a8e:	2303      	movs	r3, #3
 8002a90:	e018      	b.n	8002ac4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002a92:	697b      	ldr	r3, [r7, #20]
 8002a94:	2b00      	cmp	r3, #0
 8002a96:	d102      	bne.n	8002a9e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	61fb      	str	r3, [r7, #28]
 8002a9c:	e002      	b.n	8002aa4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	3b01      	subs	r3, #1
 8002aa2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002aa4:	68fb      	ldr	r3, [r7, #12]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	689a      	ldr	r2, [r3, #8]
 8002aaa:	68bb      	ldr	r3, [r7, #8]
 8002aac:	4013      	ands	r3, r2
 8002aae:	68ba      	ldr	r2, [r7, #8]
 8002ab0:	429a      	cmp	r2, r3
 8002ab2:	bf0c      	ite	eq
 8002ab4:	2301      	moveq	r3, #1
 8002ab6:	2300      	movne	r3, #0
 8002ab8:	b2db      	uxtb	r3, r3
 8002aba:	461a      	mov	r2, r3
 8002abc:	79fb      	ldrb	r3, [r7, #7]
 8002abe:	429a      	cmp	r2, r3
 8002ac0:	d19a      	bne.n	80029f8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8002ac2:	2300      	movs	r3, #0
}
 8002ac4:	4618      	mov	r0, r3
 8002ac6:	3720      	adds	r7, #32
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	20000000 	.word	0x20000000

08002ad0 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8002ad0:	b580      	push	{r7, lr}
 8002ad2:	b086      	sub	sp, #24
 8002ad4:	af02      	add	r7, sp, #8
 8002ad6:	60f8      	str	r0, [r7, #12]
 8002ad8:	60b9      	str	r1, [r7, #8]
 8002ada:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ae4:	d111      	bne.n	8002b0a <SPI_EndRxTransaction+0x3a>
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	689b      	ldr	r3, [r3, #8]
 8002aea:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002aee:	d004      	beq.n	8002afa <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002af0:	68fb      	ldr	r3, [r7, #12]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002af8:	d107      	bne.n	8002b0a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	681a      	ldr	r2, [r3, #0]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002b08:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	685b      	ldr	r3, [r3, #4]
 8002b0e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b12:	d12a      	bne.n	8002b6a <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	689b      	ldr	r3, [r3, #8]
 8002b18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002b1c:	d012      	beq.n	8002b44 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	9300      	str	r3, [sp, #0]
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	2200      	movs	r2, #0
 8002b26:	2180      	movs	r1, #128	@ 0x80
 8002b28:	68f8      	ldr	r0, [r7, #12]
 8002b2a:	f7ff ff49 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002b2e:	4603      	mov	r3, r0
 8002b30:	2b00      	cmp	r3, #0
 8002b32:	d02d      	beq.n	8002b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b34:	68fb      	ldr	r3, [r7, #12]
 8002b36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b38:	f043 0220 	orr.w	r2, r3, #32
 8002b3c:	68fb      	ldr	r3, [r7, #12]
 8002b3e:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b40:	2303      	movs	r3, #3
 8002b42:	e026      	b.n	8002b92 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	9300      	str	r3, [sp, #0]
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	2101      	movs	r1, #1
 8002b4e:	68f8      	ldr	r0, [r7, #12]
 8002b50:	f7ff ff36 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d01a      	beq.n	8002b90 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b5e:	f043 0220 	orr.w	r2, r3, #32
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8002b66:	2303      	movs	r3, #3
 8002b68:	e013      	b.n	8002b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	9300      	str	r3, [sp, #0]
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	2200      	movs	r2, #0
 8002b72:	2101      	movs	r1, #1
 8002b74:	68f8      	ldr	r0, [r7, #12]
 8002b76:	f7ff ff23 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002b7a:	4603      	mov	r3, r0
 8002b7c:	2b00      	cmp	r3, #0
 8002b7e:	d007      	beq.n	8002b90 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002b80:	68fb      	ldr	r3, [r7, #12]
 8002b82:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002b84:	f043 0220 	orr.w	r2, r3, #32
 8002b88:	68fb      	ldr	r3, [r7, #12]
 8002b8a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002b8c:	2303      	movs	r3, #3
 8002b8e:	e000      	b.n	8002b92 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8002b90:	2300      	movs	r3, #0
}
 8002b92:	4618      	mov	r0, r3
 8002b94:	3710      	adds	r7, #16
 8002b96:	46bd      	mov	sp, r7
 8002b98:	bd80      	pop	{r7, pc}
	...

08002b9c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8002b9c:	b580      	push	{r7, lr}
 8002b9e:	b088      	sub	sp, #32
 8002ba0:	af02      	add	r7, sp, #8
 8002ba2:	60f8      	str	r0, [r7, #12]
 8002ba4:	60b9      	str	r1, [r7, #8]
 8002ba6:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	9300      	str	r3, [sp, #0]
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	2201      	movs	r2, #1
 8002bb0:	2102      	movs	r1, #2
 8002bb2:	68f8      	ldr	r0, [r7, #12]
 8002bb4:	f7ff ff04 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d007      	beq.n	8002bce <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002bbe:	68fb      	ldr	r3, [r7, #12]
 8002bc0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002bc2:	f043 0220 	orr.w	r2, r3, #32
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8002bca:	2303      	movs	r3, #3
 8002bcc:	e032      	b.n	8002c34 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8002bce:	4b1b      	ldr	r3, [pc, #108]	@ (8002c3c <SPI_EndRxTxTransaction+0xa0>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a1b      	ldr	r2, [pc, #108]	@ (8002c40 <SPI_EndRxTxTransaction+0xa4>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0d5b      	lsrs	r3, r3, #21
 8002bda:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8002bde:	fb02 f303 	mul.w	r3, r2, r3
 8002be2:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002be4:	68fb      	ldr	r3, [r7, #12]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002bec:	d112      	bne.n	8002c14 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	9300      	str	r3, [sp, #0]
 8002bf2:	68bb      	ldr	r3, [r7, #8]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	2180      	movs	r1, #128	@ 0x80
 8002bf8:	68f8      	ldr	r0, [r7, #12]
 8002bfa:	f7ff fee1 	bl	80029c0 <SPI_WaitFlagStateUntilTimeout>
 8002bfe:	4603      	mov	r3, r0
 8002c00:	2b00      	cmp	r3, #0
 8002c02:	d016      	beq.n	8002c32 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002c08:	f043 0220 	orr.w	r2, r3, #32
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8002c10:	2303      	movs	r3, #3
 8002c12:	e00f      	b.n	8002c34 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8002c14:	697b      	ldr	r3, [r7, #20]
 8002c16:	2b00      	cmp	r3, #0
 8002c18:	d00a      	beq.n	8002c30 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	3b01      	subs	r3, #1
 8002c1e:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689b      	ldr	r3, [r3, #8]
 8002c26:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c2a:	2b80      	cmp	r3, #128	@ 0x80
 8002c2c:	d0f2      	beq.n	8002c14 <SPI_EndRxTxTransaction+0x78>
 8002c2e:	e000      	b.n	8002c32 <SPI_EndRxTxTransaction+0x96>
        break;
 8002c30:	bf00      	nop
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	20000000 	.word	0x20000000
 8002c40:	165e9f81 	.word	0x165e9f81

08002c44 <std>:
 8002c44:	2300      	movs	r3, #0
 8002c46:	b510      	push	{r4, lr}
 8002c48:	4604      	mov	r4, r0
 8002c4a:	e9c0 3300 	strd	r3, r3, [r0]
 8002c4e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002c52:	6083      	str	r3, [r0, #8]
 8002c54:	8181      	strh	r1, [r0, #12]
 8002c56:	6643      	str	r3, [r0, #100]	@ 0x64
 8002c58:	81c2      	strh	r2, [r0, #14]
 8002c5a:	6183      	str	r3, [r0, #24]
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	2208      	movs	r2, #8
 8002c60:	305c      	adds	r0, #92	@ 0x5c
 8002c62:	f000 f9f9 	bl	8003058 <memset>
 8002c66:	4b0d      	ldr	r3, [pc, #52]	@ (8002c9c <std+0x58>)
 8002c68:	6263      	str	r3, [r4, #36]	@ 0x24
 8002c6a:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca0 <std+0x5c>)
 8002c6c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002c6e:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca4 <std+0x60>)
 8002c70:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002c72:	4b0d      	ldr	r3, [pc, #52]	@ (8002ca8 <std+0x64>)
 8002c74:	6323      	str	r3, [r4, #48]	@ 0x30
 8002c76:	4b0d      	ldr	r3, [pc, #52]	@ (8002cac <std+0x68>)
 8002c78:	6224      	str	r4, [r4, #32]
 8002c7a:	429c      	cmp	r4, r3
 8002c7c:	d006      	beq.n	8002c8c <std+0x48>
 8002c7e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002c82:	4294      	cmp	r4, r2
 8002c84:	d002      	beq.n	8002c8c <std+0x48>
 8002c86:	33d0      	adds	r3, #208	@ 0xd0
 8002c88:	429c      	cmp	r4, r3
 8002c8a:	d105      	bne.n	8002c98 <std+0x54>
 8002c8c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002c90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002c94:	f000 ba58 	b.w	8003148 <__retarget_lock_init_recursive>
 8002c98:	bd10      	pop	{r4, pc}
 8002c9a:	bf00      	nop
 8002c9c:	08002ea9 	.word	0x08002ea9
 8002ca0:	08002ecb 	.word	0x08002ecb
 8002ca4:	08002f03 	.word	0x08002f03
 8002ca8:	08002f27 	.word	0x08002f27
 8002cac:	200000e4 	.word	0x200000e4

08002cb0 <stdio_exit_handler>:
 8002cb0:	4a02      	ldr	r2, [pc, #8]	@ (8002cbc <stdio_exit_handler+0xc>)
 8002cb2:	4903      	ldr	r1, [pc, #12]	@ (8002cc0 <stdio_exit_handler+0x10>)
 8002cb4:	4803      	ldr	r0, [pc, #12]	@ (8002cc4 <stdio_exit_handler+0x14>)
 8002cb6:	f000 b869 	b.w	8002d8c <_fwalk_sglue>
 8002cba:	bf00      	nop
 8002cbc:	2000000c 	.word	0x2000000c
 8002cc0:	080039e5 	.word	0x080039e5
 8002cc4:	2000001c 	.word	0x2000001c

08002cc8 <cleanup_stdio>:
 8002cc8:	6841      	ldr	r1, [r0, #4]
 8002cca:	4b0c      	ldr	r3, [pc, #48]	@ (8002cfc <cleanup_stdio+0x34>)
 8002ccc:	4299      	cmp	r1, r3
 8002cce:	b510      	push	{r4, lr}
 8002cd0:	4604      	mov	r4, r0
 8002cd2:	d001      	beq.n	8002cd8 <cleanup_stdio+0x10>
 8002cd4:	f000 fe86 	bl	80039e4 <_fflush_r>
 8002cd8:	68a1      	ldr	r1, [r4, #8]
 8002cda:	4b09      	ldr	r3, [pc, #36]	@ (8002d00 <cleanup_stdio+0x38>)
 8002cdc:	4299      	cmp	r1, r3
 8002cde:	d002      	beq.n	8002ce6 <cleanup_stdio+0x1e>
 8002ce0:	4620      	mov	r0, r4
 8002ce2:	f000 fe7f 	bl	80039e4 <_fflush_r>
 8002ce6:	68e1      	ldr	r1, [r4, #12]
 8002ce8:	4b06      	ldr	r3, [pc, #24]	@ (8002d04 <cleanup_stdio+0x3c>)
 8002cea:	4299      	cmp	r1, r3
 8002cec:	d004      	beq.n	8002cf8 <cleanup_stdio+0x30>
 8002cee:	4620      	mov	r0, r4
 8002cf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002cf4:	f000 be76 	b.w	80039e4 <_fflush_r>
 8002cf8:	bd10      	pop	{r4, pc}
 8002cfa:	bf00      	nop
 8002cfc:	200000e4 	.word	0x200000e4
 8002d00:	2000014c 	.word	0x2000014c
 8002d04:	200001b4 	.word	0x200001b4

08002d08 <global_stdio_init.part.0>:
 8002d08:	b510      	push	{r4, lr}
 8002d0a:	4b0b      	ldr	r3, [pc, #44]	@ (8002d38 <global_stdio_init.part.0+0x30>)
 8002d0c:	4c0b      	ldr	r4, [pc, #44]	@ (8002d3c <global_stdio_init.part.0+0x34>)
 8002d0e:	4a0c      	ldr	r2, [pc, #48]	@ (8002d40 <global_stdio_init.part.0+0x38>)
 8002d10:	601a      	str	r2, [r3, #0]
 8002d12:	4620      	mov	r0, r4
 8002d14:	2200      	movs	r2, #0
 8002d16:	2104      	movs	r1, #4
 8002d18:	f7ff ff94 	bl	8002c44 <std>
 8002d1c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002d20:	2201      	movs	r2, #1
 8002d22:	2109      	movs	r1, #9
 8002d24:	f7ff ff8e 	bl	8002c44 <std>
 8002d28:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002d2c:	2202      	movs	r2, #2
 8002d2e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d32:	2112      	movs	r1, #18
 8002d34:	f7ff bf86 	b.w	8002c44 <std>
 8002d38:	2000021c 	.word	0x2000021c
 8002d3c:	200000e4 	.word	0x200000e4
 8002d40:	08002cb1 	.word	0x08002cb1

08002d44 <__sfp_lock_acquire>:
 8002d44:	4801      	ldr	r0, [pc, #4]	@ (8002d4c <__sfp_lock_acquire+0x8>)
 8002d46:	f000 ba00 	b.w	800314a <__retarget_lock_acquire_recursive>
 8002d4a:	bf00      	nop
 8002d4c:	20000225 	.word	0x20000225

08002d50 <__sfp_lock_release>:
 8002d50:	4801      	ldr	r0, [pc, #4]	@ (8002d58 <__sfp_lock_release+0x8>)
 8002d52:	f000 b9fb 	b.w	800314c <__retarget_lock_release_recursive>
 8002d56:	bf00      	nop
 8002d58:	20000225 	.word	0x20000225

08002d5c <__sinit>:
 8002d5c:	b510      	push	{r4, lr}
 8002d5e:	4604      	mov	r4, r0
 8002d60:	f7ff fff0 	bl	8002d44 <__sfp_lock_acquire>
 8002d64:	6a23      	ldr	r3, [r4, #32]
 8002d66:	b11b      	cbz	r3, 8002d70 <__sinit+0x14>
 8002d68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d6c:	f7ff bff0 	b.w	8002d50 <__sfp_lock_release>
 8002d70:	4b04      	ldr	r3, [pc, #16]	@ (8002d84 <__sinit+0x28>)
 8002d72:	6223      	str	r3, [r4, #32]
 8002d74:	4b04      	ldr	r3, [pc, #16]	@ (8002d88 <__sinit+0x2c>)
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d1f5      	bne.n	8002d68 <__sinit+0xc>
 8002d7c:	f7ff ffc4 	bl	8002d08 <global_stdio_init.part.0>
 8002d80:	e7f2      	b.n	8002d68 <__sinit+0xc>
 8002d82:	bf00      	nop
 8002d84:	08002cc9 	.word	0x08002cc9
 8002d88:	2000021c 	.word	0x2000021c

08002d8c <_fwalk_sglue>:
 8002d8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002d90:	4607      	mov	r7, r0
 8002d92:	4688      	mov	r8, r1
 8002d94:	4614      	mov	r4, r2
 8002d96:	2600      	movs	r6, #0
 8002d98:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002d9c:	f1b9 0901 	subs.w	r9, r9, #1
 8002da0:	d505      	bpl.n	8002dae <_fwalk_sglue+0x22>
 8002da2:	6824      	ldr	r4, [r4, #0]
 8002da4:	2c00      	cmp	r4, #0
 8002da6:	d1f7      	bne.n	8002d98 <_fwalk_sglue+0xc>
 8002da8:	4630      	mov	r0, r6
 8002daa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002dae:	89ab      	ldrh	r3, [r5, #12]
 8002db0:	2b01      	cmp	r3, #1
 8002db2:	d907      	bls.n	8002dc4 <_fwalk_sglue+0x38>
 8002db4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002db8:	3301      	adds	r3, #1
 8002dba:	d003      	beq.n	8002dc4 <_fwalk_sglue+0x38>
 8002dbc:	4629      	mov	r1, r5
 8002dbe:	4638      	mov	r0, r7
 8002dc0:	47c0      	blx	r8
 8002dc2:	4306      	orrs	r6, r0
 8002dc4:	3568      	adds	r5, #104	@ 0x68
 8002dc6:	e7e9      	b.n	8002d9c <_fwalk_sglue+0x10>

08002dc8 <iprintf>:
 8002dc8:	b40f      	push	{r0, r1, r2, r3}
 8002dca:	b507      	push	{r0, r1, r2, lr}
 8002dcc:	4906      	ldr	r1, [pc, #24]	@ (8002de8 <iprintf+0x20>)
 8002dce:	ab04      	add	r3, sp, #16
 8002dd0:	6808      	ldr	r0, [r1, #0]
 8002dd2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002dd6:	6881      	ldr	r1, [r0, #8]
 8002dd8:	9301      	str	r3, [sp, #4]
 8002dda:	f000 fadb 	bl	8003394 <_vfiprintf_r>
 8002dde:	b003      	add	sp, #12
 8002de0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002de4:	b004      	add	sp, #16
 8002de6:	4770      	bx	lr
 8002de8:	20000018 	.word	0x20000018

08002dec <_puts_r>:
 8002dec:	6a03      	ldr	r3, [r0, #32]
 8002dee:	b570      	push	{r4, r5, r6, lr}
 8002df0:	6884      	ldr	r4, [r0, #8]
 8002df2:	4605      	mov	r5, r0
 8002df4:	460e      	mov	r6, r1
 8002df6:	b90b      	cbnz	r3, 8002dfc <_puts_r+0x10>
 8002df8:	f7ff ffb0 	bl	8002d5c <__sinit>
 8002dfc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002dfe:	07db      	lsls	r3, r3, #31
 8002e00:	d405      	bmi.n	8002e0e <_puts_r+0x22>
 8002e02:	89a3      	ldrh	r3, [r4, #12]
 8002e04:	0598      	lsls	r0, r3, #22
 8002e06:	d402      	bmi.n	8002e0e <_puts_r+0x22>
 8002e08:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e0a:	f000 f99e 	bl	800314a <__retarget_lock_acquire_recursive>
 8002e0e:	89a3      	ldrh	r3, [r4, #12]
 8002e10:	0719      	lsls	r1, r3, #28
 8002e12:	d502      	bpl.n	8002e1a <_puts_r+0x2e>
 8002e14:	6923      	ldr	r3, [r4, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d135      	bne.n	8002e86 <_puts_r+0x9a>
 8002e1a:	4621      	mov	r1, r4
 8002e1c:	4628      	mov	r0, r5
 8002e1e:	f000 f8c5 	bl	8002fac <__swsetup_r>
 8002e22:	b380      	cbz	r0, 8002e86 <_puts_r+0x9a>
 8002e24:	f04f 35ff 	mov.w	r5, #4294967295
 8002e28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8002e2a:	07da      	lsls	r2, r3, #31
 8002e2c:	d405      	bmi.n	8002e3a <_puts_r+0x4e>
 8002e2e:	89a3      	ldrh	r3, [r4, #12]
 8002e30:	059b      	lsls	r3, r3, #22
 8002e32:	d402      	bmi.n	8002e3a <_puts_r+0x4e>
 8002e34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8002e36:	f000 f989 	bl	800314c <__retarget_lock_release_recursive>
 8002e3a:	4628      	mov	r0, r5
 8002e3c:	bd70      	pop	{r4, r5, r6, pc}
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	da04      	bge.n	8002e4c <_puts_r+0x60>
 8002e42:	69a2      	ldr	r2, [r4, #24]
 8002e44:	429a      	cmp	r2, r3
 8002e46:	dc17      	bgt.n	8002e78 <_puts_r+0x8c>
 8002e48:	290a      	cmp	r1, #10
 8002e4a:	d015      	beq.n	8002e78 <_puts_r+0x8c>
 8002e4c:	6823      	ldr	r3, [r4, #0]
 8002e4e:	1c5a      	adds	r2, r3, #1
 8002e50:	6022      	str	r2, [r4, #0]
 8002e52:	7019      	strb	r1, [r3, #0]
 8002e54:	68a3      	ldr	r3, [r4, #8]
 8002e56:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8002e5a:	3b01      	subs	r3, #1
 8002e5c:	60a3      	str	r3, [r4, #8]
 8002e5e:	2900      	cmp	r1, #0
 8002e60:	d1ed      	bne.n	8002e3e <_puts_r+0x52>
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	da11      	bge.n	8002e8a <_puts_r+0x9e>
 8002e66:	4622      	mov	r2, r4
 8002e68:	210a      	movs	r1, #10
 8002e6a:	4628      	mov	r0, r5
 8002e6c:	f000 f85f 	bl	8002f2e <__swbuf_r>
 8002e70:	3001      	adds	r0, #1
 8002e72:	d0d7      	beq.n	8002e24 <_puts_r+0x38>
 8002e74:	250a      	movs	r5, #10
 8002e76:	e7d7      	b.n	8002e28 <_puts_r+0x3c>
 8002e78:	4622      	mov	r2, r4
 8002e7a:	4628      	mov	r0, r5
 8002e7c:	f000 f857 	bl	8002f2e <__swbuf_r>
 8002e80:	3001      	adds	r0, #1
 8002e82:	d1e7      	bne.n	8002e54 <_puts_r+0x68>
 8002e84:	e7ce      	b.n	8002e24 <_puts_r+0x38>
 8002e86:	3e01      	subs	r6, #1
 8002e88:	e7e4      	b.n	8002e54 <_puts_r+0x68>
 8002e8a:	6823      	ldr	r3, [r4, #0]
 8002e8c:	1c5a      	adds	r2, r3, #1
 8002e8e:	6022      	str	r2, [r4, #0]
 8002e90:	220a      	movs	r2, #10
 8002e92:	701a      	strb	r2, [r3, #0]
 8002e94:	e7ee      	b.n	8002e74 <_puts_r+0x88>
	...

08002e98 <puts>:
 8002e98:	4b02      	ldr	r3, [pc, #8]	@ (8002ea4 <puts+0xc>)
 8002e9a:	4601      	mov	r1, r0
 8002e9c:	6818      	ldr	r0, [r3, #0]
 8002e9e:	f7ff bfa5 	b.w	8002dec <_puts_r>
 8002ea2:	bf00      	nop
 8002ea4:	20000018 	.word	0x20000018

08002ea8 <__sread>:
 8002ea8:	b510      	push	{r4, lr}
 8002eaa:	460c      	mov	r4, r1
 8002eac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002eb0:	f000 f8fc 	bl	80030ac <_read_r>
 8002eb4:	2800      	cmp	r0, #0
 8002eb6:	bfab      	itete	ge
 8002eb8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eba:	89a3      	ldrhlt	r3, [r4, #12]
 8002ebc:	181b      	addge	r3, r3, r0
 8002ebe:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ec2:	bfac      	ite	ge
 8002ec4:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002ec6:	81a3      	strhlt	r3, [r4, #12]
 8002ec8:	bd10      	pop	{r4, pc}

08002eca <__swrite>:
 8002eca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002ece:	461f      	mov	r7, r3
 8002ed0:	898b      	ldrh	r3, [r1, #12]
 8002ed2:	05db      	lsls	r3, r3, #23
 8002ed4:	4605      	mov	r5, r0
 8002ed6:	460c      	mov	r4, r1
 8002ed8:	4616      	mov	r6, r2
 8002eda:	d505      	bpl.n	8002ee8 <__swrite+0x1e>
 8002edc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee0:	2302      	movs	r3, #2
 8002ee2:	2200      	movs	r2, #0
 8002ee4:	f000 f8d0 	bl	8003088 <_lseek_r>
 8002ee8:	89a3      	ldrh	r3, [r4, #12]
 8002eea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002eee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002ef2:	81a3      	strh	r3, [r4, #12]
 8002ef4:	4632      	mov	r2, r6
 8002ef6:	463b      	mov	r3, r7
 8002ef8:	4628      	mov	r0, r5
 8002efa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002efe:	f000 b8e7 	b.w	80030d0 <_write_r>

08002f02 <__sseek>:
 8002f02:	b510      	push	{r4, lr}
 8002f04:	460c      	mov	r4, r1
 8002f06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f0a:	f000 f8bd 	bl	8003088 <_lseek_r>
 8002f0e:	1c43      	adds	r3, r0, #1
 8002f10:	89a3      	ldrh	r3, [r4, #12]
 8002f12:	bf15      	itete	ne
 8002f14:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f16:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f1a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f1e:	81a3      	strheq	r3, [r4, #12]
 8002f20:	bf18      	it	ne
 8002f22:	81a3      	strhne	r3, [r4, #12]
 8002f24:	bd10      	pop	{r4, pc}

08002f26 <__sclose>:
 8002f26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f2a:	f000 b89d 	b.w	8003068 <_close_r>

08002f2e <__swbuf_r>:
 8002f2e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002f30:	460e      	mov	r6, r1
 8002f32:	4614      	mov	r4, r2
 8002f34:	4605      	mov	r5, r0
 8002f36:	b118      	cbz	r0, 8002f40 <__swbuf_r+0x12>
 8002f38:	6a03      	ldr	r3, [r0, #32]
 8002f3a:	b90b      	cbnz	r3, 8002f40 <__swbuf_r+0x12>
 8002f3c:	f7ff ff0e 	bl	8002d5c <__sinit>
 8002f40:	69a3      	ldr	r3, [r4, #24]
 8002f42:	60a3      	str	r3, [r4, #8]
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	071a      	lsls	r2, r3, #28
 8002f48:	d501      	bpl.n	8002f4e <__swbuf_r+0x20>
 8002f4a:	6923      	ldr	r3, [r4, #16]
 8002f4c:	b943      	cbnz	r3, 8002f60 <__swbuf_r+0x32>
 8002f4e:	4621      	mov	r1, r4
 8002f50:	4628      	mov	r0, r5
 8002f52:	f000 f82b 	bl	8002fac <__swsetup_r>
 8002f56:	b118      	cbz	r0, 8002f60 <__swbuf_r+0x32>
 8002f58:	f04f 37ff 	mov.w	r7, #4294967295
 8002f5c:	4638      	mov	r0, r7
 8002f5e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002f60:	6823      	ldr	r3, [r4, #0]
 8002f62:	6922      	ldr	r2, [r4, #16]
 8002f64:	1a98      	subs	r0, r3, r2
 8002f66:	6963      	ldr	r3, [r4, #20]
 8002f68:	b2f6      	uxtb	r6, r6
 8002f6a:	4283      	cmp	r3, r0
 8002f6c:	4637      	mov	r7, r6
 8002f6e:	dc05      	bgt.n	8002f7c <__swbuf_r+0x4e>
 8002f70:	4621      	mov	r1, r4
 8002f72:	4628      	mov	r0, r5
 8002f74:	f000 fd36 	bl	80039e4 <_fflush_r>
 8002f78:	2800      	cmp	r0, #0
 8002f7a:	d1ed      	bne.n	8002f58 <__swbuf_r+0x2a>
 8002f7c:	68a3      	ldr	r3, [r4, #8]
 8002f7e:	3b01      	subs	r3, #1
 8002f80:	60a3      	str	r3, [r4, #8]
 8002f82:	6823      	ldr	r3, [r4, #0]
 8002f84:	1c5a      	adds	r2, r3, #1
 8002f86:	6022      	str	r2, [r4, #0]
 8002f88:	701e      	strb	r6, [r3, #0]
 8002f8a:	6962      	ldr	r2, [r4, #20]
 8002f8c:	1c43      	adds	r3, r0, #1
 8002f8e:	429a      	cmp	r2, r3
 8002f90:	d004      	beq.n	8002f9c <__swbuf_r+0x6e>
 8002f92:	89a3      	ldrh	r3, [r4, #12]
 8002f94:	07db      	lsls	r3, r3, #31
 8002f96:	d5e1      	bpl.n	8002f5c <__swbuf_r+0x2e>
 8002f98:	2e0a      	cmp	r6, #10
 8002f9a:	d1df      	bne.n	8002f5c <__swbuf_r+0x2e>
 8002f9c:	4621      	mov	r1, r4
 8002f9e:	4628      	mov	r0, r5
 8002fa0:	f000 fd20 	bl	80039e4 <_fflush_r>
 8002fa4:	2800      	cmp	r0, #0
 8002fa6:	d0d9      	beq.n	8002f5c <__swbuf_r+0x2e>
 8002fa8:	e7d6      	b.n	8002f58 <__swbuf_r+0x2a>
	...

08002fac <__swsetup_r>:
 8002fac:	b538      	push	{r3, r4, r5, lr}
 8002fae:	4b29      	ldr	r3, [pc, #164]	@ (8003054 <__swsetup_r+0xa8>)
 8002fb0:	4605      	mov	r5, r0
 8002fb2:	6818      	ldr	r0, [r3, #0]
 8002fb4:	460c      	mov	r4, r1
 8002fb6:	b118      	cbz	r0, 8002fc0 <__swsetup_r+0x14>
 8002fb8:	6a03      	ldr	r3, [r0, #32]
 8002fba:	b90b      	cbnz	r3, 8002fc0 <__swsetup_r+0x14>
 8002fbc:	f7ff fece 	bl	8002d5c <__sinit>
 8002fc0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002fc4:	0719      	lsls	r1, r3, #28
 8002fc6:	d422      	bmi.n	800300e <__swsetup_r+0x62>
 8002fc8:	06da      	lsls	r2, r3, #27
 8002fca:	d407      	bmi.n	8002fdc <__swsetup_r+0x30>
 8002fcc:	2209      	movs	r2, #9
 8002fce:	602a      	str	r2, [r5, #0]
 8002fd0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002fd4:	81a3      	strh	r3, [r4, #12]
 8002fd6:	f04f 30ff 	mov.w	r0, #4294967295
 8002fda:	e033      	b.n	8003044 <__swsetup_r+0x98>
 8002fdc:	0758      	lsls	r0, r3, #29
 8002fde:	d512      	bpl.n	8003006 <__swsetup_r+0x5a>
 8002fe0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8002fe2:	b141      	cbz	r1, 8002ff6 <__swsetup_r+0x4a>
 8002fe4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8002fe8:	4299      	cmp	r1, r3
 8002fea:	d002      	beq.n	8002ff2 <__swsetup_r+0x46>
 8002fec:	4628      	mov	r0, r5
 8002fee:	f000 f8af 	bl	8003150 <_free_r>
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	6363      	str	r3, [r4, #52]	@ 0x34
 8002ff6:	89a3      	ldrh	r3, [r4, #12]
 8002ff8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8002ffc:	81a3      	strh	r3, [r4, #12]
 8002ffe:	2300      	movs	r3, #0
 8003000:	6063      	str	r3, [r4, #4]
 8003002:	6923      	ldr	r3, [r4, #16]
 8003004:	6023      	str	r3, [r4, #0]
 8003006:	89a3      	ldrh	r3, [r4, #12]
 8003008:	f043 0308 	orr.w	r3, r3, #8
 800300c:	81a3      	strh	r3, [r4, #12]
 800300e:	6923      	ldr	r3, [r4, #16]
 8003010:	b94b      	cbnz	r3, 8003026 <__swsetup_r+0x7a>
 8003012:	89a3      	ldrh	r3, [r4, #12]
 8003014:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003018:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800301c:	d003      	beq.n	8003026 <__swsetup_r+0x7a>
 800301e:	4621      	mov	r1, r4
 8003020:	4628      	mov	r0, r5
 8003022:	f000 fd2d 	bl	8003a80 <__smakebuf_r>
 8003026:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800302a:	f013 0201 	ands.w	r2, r3, #1
 800302e:	d00a      	beq.n	8003046 <__swsetup_r+0x9a>
 8003030:	2200      	movs	r2, #0
 8003032:	60a2      	str	r2, [r4, #8]
 8003034:	6962      	ldr	r2, [r4, #20]
 8003036:	4252      	negs	r2, r2
 8003038:	61a2      	str	r2, [r4, #24]
 800303a:	6922      	ldr	r2, [r4, #16]
 800303c:	b942      	cbnz	r2, 8003050 <__swsetup_r+0xa4>
 800303e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003042:	d1c5      	bne.n	8002fd0 <__swsetup_r+0x24>
 8003044:	bd38      	pop	{r3, r4, r5, pc}
 8003046:	0799      	lsls	r1, r3, #30
 8003048:	bf58      	it	pl
 800304a:	6962      	ldrpl	r2, [r4, #20]
 800304c:	60a2      	str	r2, [r4, #8]
 800304e:	e7f4      	b.n	800303a <__swsetup_r+0x8e>
 8003050:	2000      	movs	r0, #0
 8003052:	e7f7      	b.n	8003044 <__swsetup_r+0x98>
 8003054:	20000018 	.word	0x20000018

08003058 <memset>:
 8003058:	4402      	add	r2, r0
 800305a:	4603      	mov	r3, r0
 800305c:	4293      	cmp	r3, r2
 800305e:	d100      	bne.n	8003062 <memset+0xa>
 8003060:	4770      	bx	lr
 8003062:	f803 1b01 	strb.w	r1, [r3], #1
 8003066:	e7f9      	b.n	800305c <memset+0x4>

08003068 <_close_r>:
 8003068:	b538      	push	{r3, r4, r5, lr}
 800306a:	4d06      	ldr	r5, [pc, #24]	@ (8003084 <_close_r+0x1c>)
 800306c:	2300      	movs	r3, #0
 800306e:	4604      	mov	r4, r0
 8003070:	4608      	mov	r0, r1
 8003072:	602b      	str	r3, [r5, #0]
 8003074:	f7fd ff3d 	bl	8000ef2 <_close>
 8003078:	1c43      	adds	r3, r0, #1
 800307a:	d102      	bne.n	8003082 <_close_r+0x1a>
 800307c:	682b      	ldr	r3, [r5, #0]
 800307e:	b103      	cbz	r3, 8003082 <_close_r+0x1a>
 8003080:	6023      	str	r3, [r4, #0]
 8003082:	bd38      	pop	{r3, r4, r5, pc}
 8003084:	20000220 	.word	0x20000220

08003088 <_lseek_r>:
 8003088:	b538      	push	{r3, r4, r5, lr}
 800308a:	4d07      	ldr	r5, [pc, #28]	@ (80030a8 <_lseek_r+0x20>)
 800308c:	4604      	mov	r4, r0
 800308e:	4608      	mov	r0, r1
 8003090:	4611      	mov	r1, r2
 8003092:	2200      	movs	r2, #0
 8003094:	602a      	str	r2, [r5, #0]
 8003096:	461a      	mov	r2, r3
 8003098:	f7fd ff52 	bl	8000f40 <_lseek>
 800309c:	1c43      	adds	r3, r0, #1
 800309e:	d102      	bne.n	80030a6 <_lseek_r+0x1e>
 80030a0:	682b      	ldr	r3, [r5, #0]
 80030a2:	b103      	cbz	r3, 80030a6 <_lseek_r+0x1e>
 80030a4:	6023      	str	r3, [r4, #0]
 80030a6:	bd38      	pop	{r3, r4, r5, pc}
 80030a8:	20000220 	.word	0x20000220

080030ac <_read_r>:
 80030ac:	b538      	push	{r3, r4, r5, lr}
 80030ae:	4d07      	ldr	r5, [pc, #28]	@ (80030cc <_read_r+0x20>)
 80030b0:	4604      	mov	r4, r0
 80030b2:	4608      	mov	r0, r1
 80030b4:	4611      	mov	r1, r2
 80030b6:	2200      	movs	r2, #0
 80030b8:	602a      	str	r2, [r5, #0]
 80030ba:	461a      	mov	r2, r3
 80030bc:	f7fd fee0 	bl	8000e80 <_read>
 80030c0:	1c43      	adds	r3, r0, #1
 80030c2:	d102      	bne.n	80030ca <_read_r+0x1e>
 80030c4:	682b      	ldr	r3, [r5, #0]
 80030c6:	b103      	cbz	r3, 80030ca <_read_r+0x1e>
 80030c8:	6023      	str	r3, [r4, #0]
 80030ca:	bd38      	pop	{r3, r4, r5, pc}
 80030cc:	20000220 	.word	0x20000220

080030d0 <_write_r>:
 80030d0:	b538      	push	{r3, r4, r5, lr}
 80030d2:	4d07      	ldr	r5, [pc, #28]	@ (80030f0 <_write_r+0x20>)
 80030d4:	4604      	mov	r4, r0
 80030d6:	4608      	mov	r0, r1
 80030d8:	4611      	mov	r1, r2
 80030da:	2200      	movs	r2, #0
 80030dc:	602a      	str	r2, [r5, #0]
 80030de:	461a      	mov	r2, r3
 80030e0:	f7fd feeb 	bl	8000eba <_write>
 80030e4:	1c43      	adds	r3, r0, #1
 80030e6:	d102      	bne.n	80030ee <_write_r+0x1e>
 80030e8:	682b      	ldr	r3, [r5, #0]
 80030ea:	b103      	cbz	r3, 80030ee <_write_r+0x1e>
 80030ec:	6023      	str	r3, [r4, #0]
 80030ee:	bd38      	pop	{r3, r4, r5, pc}
 80030f0:	20000220 	.word	0x20000220

080030f4 <__errno>:
 80030f4:	4b01      	ldr	r3, [pc, #4]	@ (80030fc <__errno+0x8>)
 80030f6:	6818      	ldr	r0, [r3, #0]
 80030f8:	4770      	bx	lr
 80030fa:	bf00      	nop
 80030fc:	20000018 	.word	0x20000018

08003100 <__libc_init_array>:
 8003100:	b570      	push	{r4, r5, r6, lr}
 8003102:	4d0d      	ldr	r5, [pc, #52]	@ (8003138 <__libc_init_array+0x38>)
 8003104:	4c0d      	ldr	r4, [pc, #52]	@ (800313c <__libc_init_array+0x3c>)
 8003106:	1b64      	subs	r4, r4, r5
 8003108:	10a4      	asrs	r4, r4, #2
 800310a:	2600      	movs	r6, #0
 800310c:	42a6      	cmp	r6, r4
 800310e:	d109      	bne.n	8003124 <__libc_init_array+0x24>
 8003110:	4d0b      	ldr	r5, [pc, #44]	@ (8003140 <__libc_init_array+0x40>)
 8003112:	4c0c      	ldr	r4, [pc, #48]	@ (8003144 <__libc_init_array+0x44>)
 8003114:	f000 fd22 	bl	8003b5c <_init>
 8003118:	1b64      	subs	r4, r4, r5
 800311a:	10a4      	asrs	r4, r4, #2
 800311c:	2600      	movs	r6, #0
 800311e:	42a6      	cmp	r6, r4
 8003120:	d105      	bne.n	800312e <__libc_init_array+0x2e>
 8003122:	bd70      	pop	{r4, r5, r6, pc}
 8003124:	f855 3b04 	ldr.w	r3, [r5], #4
 8003128:	4798      	blx	r3
 800312a:	3601      	adds	r6, #1
 800312c:	e7ee      	b.n	800310c <__libc_init_array+0xc>
 800312e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003132:	4798      	blx	r3
 8003134:	3601      	adds	r6, #1
 8003136:	e7f2      	b.n	800311e <__libc_init_array+0x1e>
 8003138:	08003c2c 	.word	0x08003c2c
 800313c:	08003c2c 	.word	0x08003c2c
 8003140:	08003c2c 	.word	0x08003c2c
 8003144:	08003c30 	.word	0x08003c30

08003148 <__retarget_lock_init_recursive>:
 8003148:	4770      	bx	lr

0800314a <__retarget_lock_acquire_recursive>:
 800314a:	4770      	bx	lr

0800314c <__retarget_lock_release_recursive>:
 800314c:	4770      	bx	lr
	...

08003150 <_free_r>:
 8003150:	b538      	push	{r3, r4, r5, lr}
 8003152:	4605      	mov	r5, r0
 8003154:	2900      	cmp	r1, #0
 8003156:	d041      	beq.n	80031dc <_free_r+0x8c>
 8003158:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800315c:	1f0c      	subs	r4, r1, #4
 800315e:	2b00      	cmp	r3, #0
 8003160:	bfb8      	it	lt
 8003162:	18e4      	addlt	r4, r4, r3
 8003164:	f000 f8e0 	bl	8003328 <__malloc_lock>
 8003168:	4a1d      	ldr	r2, [pc, #116]	@ (80031e0 <_free_r+0x90>)
 800316a:	6813      	ldr	r3, [r2, #0]
 800316c:	b933      	cbnz	r3, 800317c <_free_r+0x2c>
 800316e:	6063      	str	r3, [r4, #4]
 8003170:	6014      	str	r4, [r2, #0]
 8003172:	4628      	mov	r0, r5
 8003174:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003178:	f000 b8dc 	b.w	8003334 <__malloc_unlock>
 800317c:	42a3      	cmp	r3, r4
 800317e:	d908      	bls.n	8003192 <_free_r+0x42>
 8003180:	6820      	ldr	r0, [r4, #0]
 8003182:	1821      	adds	r1, r4, r0
 8003184:	428b      	cmp	r3, r1
 8003186:	bf01      	itttt	eq
 8003188:	6819      	ldreq	r1, [r3, #0]
 800318a:	685b      	ldreq	r3, [r3, #4]
 800318c:	1809      	addeq	r1, r1, r0
 800318e:	6021      	streq	r1, [r4, #0]
 8003190:	e7ed      	b.n	800316e <_free_r+0x1e>
 8003192:	461a      	mov	r2, r3
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	b10b      	cbz	r3, 800319c <_free_r+0x4c>
 8003198:	42a3      	cmp	r3, r4
 800319a:	d9fa      	bls.n	8003192 <_free_r+0x42>
 800319c:	6811      	ldr	r1, [r2, #0]
 800319e:	1850      	adds	r0, r2, r1
 80031a0:	42a0      	cmp	r0, r4
 80031a2:	d10b      	bne.n	80031bc <_free_r+0x6c>
 80031a4:	6820      	ldr	r0, [r4, #0]
 80031a6:	4401      	add	r1, r0
 80031a8:	1850      	adds	r0, r2, r1
 80031aa:	4283      	cmp	r3, r0
 80031ac:	6011      	str	r1, [r2, #0]
 80031ae:	d1e0      	bne.n	8003172 <_free_r+0x22>
 80031b0:	6818      	ldr	r0, [r3, #0]
 80031b2:	685b      	ldr	r3, [r3, #4]
 80031b4:	6053      	str	r3, [r2, #4]
 80031b6:	4408      	add	r0, r1
 80031b8:	6010      	str	r0, [r2, #0]
 80031ba:	e7da      	b.n	8003172 <_free_r+0x22>
 80031bc:	d902      	bls.n	80031c4 <_free_r+0x74>
 80031be:	230c      	movs	r3, #12
 80031c0:	602b      	str	r3, [r5, #0]
 80031c2:	e7d6      	b.n	8003172 <_free_r+0x22>
 80031c4:	6820      	ldr	r0, [r4, #0]
 80031c6:	1821      	adds	r1, r4, r0
 80031c8:	428b      	cmp	r3, r1
 80031ca:	bf04      	itt	eq
 80031cc:	6819      	ldreq	r1, [r3, #0]
 80031ce:	685b      	ldreq	r3, [r3, #4]
 80031d0:	6063      	str	r3, [r4, #4]
 80031d2:	bf04      	itt	eq
 80031d4:	1809      	addeq	r1, r1, r0
 80031d6:	6021      	streq	r1, [r4, #0]
 80031d8:	6054      	str	r4, [r2, #4]
 80031da:	e7ca      	b.n	8003172 <_free_r+0x22>
 80031dc:	bd38      	pop	{r3, r4, r5, pc}
 80031de:	bf00      	nop
 80031e0:	2000022c 	.word	0x2000022c

080031e4 <sbrk_aligned>:
 80031e4:	b570      	push	{r4, r5, r6, lr}
 80031e6:	4e0f      	ldr	r6, [pc, #60]	@ (8003224 <sbrk_aligned+0x40>)
 80031e8:	460c      	mov	r4, r1
 80031ea:	6831      	ldr	r1, [r6, #0]
 80031ec:	4605      	mov	r5, r0
 80031ee:	b911      	cbnz	r1, 80031f6 <sbrk_aligned+0x12>
 80031f0:	f000 fca4 	bl	8003b3c <_sbrk_r>
 80031f4:	6030      	str	r0, [r6, #0]
 80031f6:	4621      	mov	r1, r4
 80031f8:	4628      	mov	r0, r5
 80031fa:	f000 fc9f 	bl	8003b3c <_sbrk_r>
 80031fe:	1c43      	adds	r3, r0, #1
 8003200:	d103      	bne.n	800320a <sbrk_aligned+0x26>
 8003202:	f04f 34ff 	mov.w	r4, #4294967295
 8003206:	4620      	mov	r0, r4
 8003208:	bd70      	pop	{r4, r5, r6, pc}
 800320a:	1cc4      	adds	r4, r0, #3
 800320c:	f024 0403 	bic.w	r4, r4, #3
 8003210:	42a0      	cmp	r0, r4
 8003212:	d0f8      	beq.n	8003206 <sbrk_aligned+0x22>
 8003214:	1a21      	subs	r1, r4, r0
 8003216:	4628      	mov	r0, r5
 8003218:	f000 fc90 	bl	8003b3c <_sbrk_r>
 800321c:	3001      	adds	r0, #1
 800321e:	d1f2      	bne.n	8003206 <sbrk_aligned+0x22>
 8003220:	e7ef      	b.n	8003202 <sbrk_aligned+0x1e>
 8003222:	bf00      	nop
 8003224:	20000228 	.word	0x20000228

08003228 <_malloc_r>:
 8003228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800322c:	1ccd      	adds	r5, r1, #3
 800322e:	f025 0503 	bic.w	r5, r5, #3
 8003232:	3508      	adds	r5, #8
 8003234:	2d0c      	cmp	r5, #12
 8003236:	bf38      	it	cc
 8003238:	250c      	movcc	r5, #12
 800323a:	2d00      	cmp	r5, #0
 800323c:	4606      	mov	r6, r0
 800323e:	db01      	blt.n	8003244 <_malloc_r+0x1c>
 8003240:	42a9      	cmp	r1, r5
 8003242:	d904      	bls.n	800324e <_malloc_r+0x26>
 8003244:	230c      	movs	r3, #12
 8003246:	6033      	str	r3, [r6, #0]
 8003248:	2000      	movs	r0, #0
 800324a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800324e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003324 <_malloc_r+0xfc>
 8003252:	f000 f869 	bl	8003328 <__malloc_lock>
 8003256:	f8d8 3000 	ldr.w	r3, [r8]
 800325a:	461c      	mov	r4, r3
 800325c:	bb44      	cbnz	r4, 80032b0 <_malloc_r+0x88>
 800325e:	4629      	mov	r1, r5
 8003260:	4630      	mov	r0, r6
 8003262:	f7ff ffbf 	bl	80031e4 <sbrk_aligned>
 8003266:	1c43      	adds	r3, r0, #1
 8003268:	4604      	mov	r4, r0
 800326a:	d158      	bne.n	800331e <_malloc_r+0xf6>
 800326c:	f8d8 4000 	ldr.w	r4, [r8]
 8003270:	4627      	mov	r7, r4
 8003272:	2f00      	cmp	r7, #0
 8003274:	d143      	bne.n	80032fe <_malloc_r+0xd6>
 8003276:	2c00      	cmp	r4, #0
 8003278:	d04b      	beq.n	8003312 <_malloc_r+0xea>
 800327a:	6823      	ldr	r3, [r4, #0]
 800327c:	4639      	mov	r1, r7
 800327e:	4630      	mov	r0, r6
 8003280:	eb04 0903 	add.w	r9, r4, r3
 8003284:	f000 fc5a 	bl	8003b3c <_sbrk_r>
 8003288:	4581      	cmp	r9, r0
 800328a:	d142      	bne.n	8003312 <_malloc_r+0xea>
 800328c:	6821      	ldr	r1, [r4, #0]
 800328e:	1a6d      	subs	r5, r5, r1
 8003290:	4629      	mov	r1, r5
 8003292:	4630      	mov	r0, r6
 8003294:	f7ff ffa6 	bl	80031e4 <sbrk_aligned>
 8003298:	3001      	adds	r0, #1
 800329a:	d03a      	beq.n	8003312 <_malloc_r+0xea>
 800329c:	6823      	ldr	r3, [r4, #0]
 800329e:	442b      	add	r3, r5
 80032a0:	6023      	str	r3, [r4, #0]
 80032a2:	f8d8 3000 	ldr.w	r3, [r8]
 80032a6:	685a      	ldr	r2, [r3, #4]
 80032a8:	bb62      	cbnz	r2, 8003304 <_malloc_r+0xdc>
 80032aa:	f8c8 7000 	str.w	r7, [r8]
 80032ae:	e00f      	b.n	80032d0 <_malloc_r+0xa8>
 80032b0:	6822      	ldr	r2, [r4, #0]
 80032b2:	1b52      	subs	r2, r2, r5
 80032b4:	d420      	bmi.n	80032f8 <_malloc_r+0xd0>
 80032b6:	2a0b      	cmp	r2, #11
 80032b8:	d917      	bls.n	80032ea <_malloc_r+0xc2>
 80032ba:	1961      	adds	r1, r4, r5
 80032bc:	42a3      	cmp	r3, r4
 80032be:	6025      	str	r5, [r4, #0]
 80032c0:	bf18      	it	ne
 80032c2:	6059      	strne	r1, [r3, #4]
 80032c4:	6863      	ldr	r3, [r4, #4]
 80032c6:	bf08      	it	eq
 80032c8:	f8c8 1000 	streq.w	r1, [r8]
 80032cc:	5162      	str	r2, [r4, r5]
 80032ce:	604b      	str	r3, [r1, #4]
 80032d0:	4630      	mov	r0, r6
 80032d2:	f000 f82f 	bl	8003334 <__malloc_unlock>
 80032d6:	f104 000b 	add.w	r0, r4, #11
 80032da:	1d23      	adds	r3, r4, #4
 80032dc:	f020 0007 	bic.w	r0, r0, #7
 80032e0:	1ac2      	subs	r2, r0, r3
 80032e2:	bf1c      	itt	ne
 80032e4:	1a1b      	subne	r3, r3, r0
 80032e6:	50a3      	strne	r3, [r4, r2]
 80032e8:	e7af      	b.n	800324a <_malloc_r+0x22>
 80032ea:	6862      	ldr	r2, [r4, #4]
 80032ec:	42a3      	cmp	r3, r4
 80032ee:	bf0c      	ite	eq
 80032f0:	f8c8 2000 	streq.w	r2, [r8]
 80032f4:	605a      	strne	r2, [r3, #4]
 80032f6:	e7eb      	b.n	80032d0 <_malloc_r+0xa8>
 80032f8:	4623      	mov	r3, r4
 80032fa:	6864      	ldr	r4, [r4, #4]
 80032fc:	e7ae      	b.n	800325c <_malloc_r+0x34>
 80032fe:	463c      	mov	r4, r7
 8003300:	687f      	ldr	r7, [r7, #4]
 8003302:	e7b6      	b.n	8003272 <_malloc_r+0x4a>
 8003304:	461a      	mov	r2, r3
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	42a3      	cmp	r3, r4
 800330a:	d1fb      	bne.n	8003304 <_malloc_r+0xdc>
 800330c:	2300      	movs	r3, #0
 800330e:	6053      	str	r3, [r2, #4]
 8003310:	e7de      	b.n	80032d0 <_malloc_r+0xa8>
 8003312:	230c      	movs	r3, #12
 8003314:	6033      	str	r3, [r6, #0]
 8003316:	4630      	mov	r0, r6
 8003318:	f000 f80c 	bl	8003334 <__malloc_unlock>
 800331c:	e794      	b.n	8003248 <_malloc_r+0x20>
 800331e:	6005      	str	r5, [r0, #0]
 8003320:	e7d6      	b.n	80032d0 <_malloc_r+0xa8>
 8003322:	bf00      	nop
 8003324:	2000022c 	.word	0x2000022c

08003328 <__malloc_lock>:
 8003328:	4801      	ldr	r0, [pc, #4]	@ (8003330 <__malloc_lock+0x8>)
 800332a:	f7ff bf0e 	b.w	800314a <__retarget_lock_acquire_recursive>
 800332e:	bf00      	nop
 8003330:	20000224 	.word	0x20000224

08003334 <__malloc_unlock>:
 8003334:	4801      	ldr	r0, [pc, #4]	@ (800333c <__malloc_unlock+0x8>)
 8003336:	f7ff bf09 	b.w	800314c <__retarget_lock_release_recursive>
 800333a:	bf00      	nop
 800333c:	20000224 	.word	0x20000224

08003340 <__sfputc_r>:
 8003340:	6893      	ldr	r3, [r2, #8]
 8003342:	3b01      	subs	r3, #1
 8003344:	2b00      	cmp	r3, #0
 8003346:	b410      	push	{r4}
 8003348:	6093      	str	r3, [r2, #8]
 800334a:	da08      	bge.n	800335e <__sfputc_r+0x1e>
 800334c:	6994      	ldr	r4, [r2, #24]
 800334e:	42a3      	cmp	r3, r4
 8003350:	db01      	blt.n	8003356 <__sfputc_r+0x16>
 8003352:	290a      	cmp	r1, #10
 8003354:	d103      	bne.n	800335e <__sfputc_r+0x1e>
 8003356:	f85d 4b04 	ldr.w	r4, [sp], #4
 800335a:	f7ff bde8 	b.w	8002f2e <__swbuf_r>
 800335e:	6813      	ldr	r3, [r2, #0]
 8003360:	1c58      	adds	r0, r3, #1
 8003362:	6010      	str	r0, [r2, #0]
 8003364:	7019      	strb	r1, [r3, #0]
 8003366:	4608      	mov	r0, r1
 8003368:	f85d 4b04 	ldr.w	r4, [sp], #4
 800336c:	4770      	bx	lr

0800336e <__sfputs_r>:
 800336e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003370:	4606      	mov	r6, r0
 8003372:	460f      	mov	r7, r1
 8003374:	4614      	mov	r4, r2
 8003376:	18d5      	adds	r5, r2, r3
 8003378:	42ac      	cmp	r4, r5
 800337a:	d101      	bne.n	8003380 <__sfputs_r+0x12>
 800337c:	2000      	movs	r0, #0
 800337e:	e007      	b.n	8003390 <__sfputs_r+0x22>
 8003380:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003384:	463a      	mov	r2, r7
 8003386:	4630      	mov	r0, r6
 8003388:	f7ff ffda 	bl	8003340 <__sfputc_r>
 800338c:	1c43      	adds	r3, r0, #1
 800338e:	d1f3      	bne.n	8003378 <__sfputs_r+0xa>
 8003390:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08003394 <_vfiprintf_r>:
 8003394:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003398:	460d      	mov	r5, r1
 800339a:	b09d      	sub	sp, #116	@ 0x74
 800339c:	4614      	mov	r4, r2
 800339e:	4698      	mov	r8, r3
 80033a0:	4606      	mov	r6, r0
 80033a2:	b118      	cbz	r0, 80033ac <_vfiprintf_r+0x18>
 80033a4:	6a03      	ldr	r3, [r0, #32]
 80033a6:	b90b      	cbnz	r3, 80033ac <_vfiprintf_r+0x18>
 80033a8:	f7ff fcd8 	bl	8002d5c <__sinit>
 80033ac:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033ae:	07d9      	lsls	r1, r3, #31
 80033b0:	d405      	bmi.n	80033be <_vfiprintf_r+0x2a>
 80033b2:	89ab      	ldrh	r3, [r5, #12]
 80033b4:	059a      	lsls	r2, r3, #22
 80033b6:	d402      	bmi.n	80033be <_vfiprintf_r+0x2a>
 80033b8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033ba:	f7ff fec6 	bl	800314a <__retarget_lock_acquire_recursive>
 80033be:	89ab      	ldrh	r3, [r5, #12]
 80033c0:	071b      	lsls	r3, r3, #28
 80033c2:	d501      	bpl.n	80033c8 <_vfiprintf_r+0x34>
 80033c4:	692b      	ldr	r3, [r5, #16]
 80033c6:	b99b      	cbnz	r3, 80033f0 <_vfiprintf_r+0x5c>
 80033c8:	4629      	mov	r1, r5
 80033ca:	4630      	mov	r0, r6
 80033cc:	f7ff fdee 	bl	8002fac <__swsetup_r>
 80033d0:	b170      	cbz	r0, 80033f0 <_vfiprintf_r+0x5c>
 80033d2:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80033d4:	07dc      	lsls	r4, r3, #31
 80033d6:	d504      	bpl.n	80033e2 <_vfiprintf_r+0x4e>
 80033d8:	f04f 30ff 	mov.w	r0, #4294967295
 80033dc:	b01d      	add	sp, #116	@ 0x74
 80033de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80033e2:	89ab      	ldrh	r3, [r5, #12]
 80033e4:	0598      	lsls	r0, r3, #22
 80033e6:	d4f7      	bmi.n	80033d8 <_vfiprintf_r+0x44>
 80033e8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80033ea:	f7ff feaf 	bl	800314c <__retarget_lock_release_recursive>
 80033ee:	e7f3      	b.n	80033d8 <_vfiprintf_r+0x44>
 80033f0:	2300      	movs	r3, #0
 80033f2:	9309      	str	r3, [sp, #36]	@ 0x24
 80033f4:	2320      	movs	r3, #32
 80033f6:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80033fa:	f8cd 800c 	str.w	r8, [sp, #12]
 80033fe:	2330      	movs	r3, #48	@ 0x30
 8003400:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80035b0 <_vfiprintf_r+0x21c>
 8003404:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003408:	f04f 0901 	mov.w	r9, #1
 800340c:	4623      	mov	r3, r4
 800340e:	469a      	mov	sl, r3
 8003410:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003414:	b10a      	cbz	r2, 800341a <_vfiprintf_r+0x86>
 8003416:	2a25      	cmp	r2, #37	@ 0x25
 8003418:	d1f9      	bne.n	800340e <_vfiprintf_r+0x7a>
 800341a:	ebba 0b04 	subs.w	fp, sl, r4
 800341e:	d00b      	beq.n	8003438 <_vfiprintf_r+0xa4>
 8003420:	465b      	mov	r3, fp
 8003422:	4622      	mov	r2, r4
 8003424:	4629      	mov	r1, r5
 8003426:	4630      	mov	r0, r6
 8003428:	f7ff ffa1 	bl	800336e <__sfputs_r>
 800342c:	3001      	adds	r0, #1
 800342e:	f000 80a7 	beq.w	8003580 <_vfiprintf_r+0x1ec>
 8003432:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003434:	445a      	add	r2, fp
 8003436:	9209      	str	r2, [sp, #36]	@ 0x24
 8003438:	f89a 3000 	ldrb.w	r3, [sl]
 800343c:	2b00      	cmp	r3, #0
 800343e:	f000 809f 	beq.w	8003580 <_vfiprintf_r+0x1ec>
 8003442:	2300      	movs	r3, #0
 8003444:	f04f 32ff 	mov.w	r2, #4294967295
 8003448:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800344c:	f10a 0a01 	add.w	sl, sl, #1
 8003450:	9304      	str	r3, [sp, #16]
 8003452:	9307      	str	r3, [sp, #28]
 8003454:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003458:	931a      	str	r3, [sp, #104]	@ 0x68
 800345a:	4654      	mov	r4, sl
 800345c:	2205      	movs	r2, #5
 800345e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003462:	4853      	ldr	r0, [pc, #332]	@ (80035b0 <_vfiprintf_r+0x21c>)
 8003464:	f7fc fec4 	bl	80001f0 <memchr>
 8003468:	9a04      	ldr	r2, [sp, #16]
 800346a:	b9d8      	cbnz	r0, 80034a4 <_vfiprintf_r+0x110>
 800346c:	06d1      	lsls	r1, r2, #27
 800346e:	bf44      	itt	mi
 8003470:	2320      	movmi	r3, #32
 8003472:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003476:	0713      	lsls	r3, r2, #28
 8003478:	bf44      	itt	mi
 800347a:	232b      	movmi	r3, #43	@ 0x2b
 800347c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003480:	f89a 3000 	ldrb.w	r3, [sl]
 8003484:	2b2a      	cmp	r3, #42	@ 0x2a
 8003486:	d015      	beq.n	80034b4 <_vfiprintf_r+0x120>
 8003488:	9a07      	ldr	r2, [sp, #28]
 800348a:	4654      	mov	r4, sl
 800348c:	2000      	movs	r0, #0
 800348e:	f04f 0c0a 	mov.w	ip, #10
 8003492:	4621      	mov	r1, r4
 8003494:	f811 3b01 	ldrb.w	r3, [r1], #1
 8003498:	3b30      	subs	r3, #48	@ 0x30
 800349a:	2b09      	cmp	r3, #9
 800349c:	d94b      	bls.n	8003536 <_vfiprintf_r+0x1a2>
 800349e:	b1b0      	cbz	r0, 80034ce <_vfiprintf_r+0x13a>
 80034a0:	9207      	str	r2, [sp, #28]
 80034a2:	e014      	b.n	80034ce <_vfiprintf_r+0x13a>
 80034a4:	eba0 0308 	sub.w	r3, r0, r8
 80034a8:	fa09 f303 	lsl.w	r3, r9, r3
 80034ac:	4313      	orrs	r3, r2
 80034ae:	9304      	str	r3, [sp, #16]
 80034b0:	46a2      	mov	sl, r4
 80034b2:	e7d2      	b.n	800345a <_vfiprintf_r+0xc6>
 80034b4:	9b03      	ldr	r3, [sp, #12]
 80034b6:	1d19      	adds	r1, r3, #4
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	9103      	str	r1, [sp, #12]
 80034bc:	2b00      	cmp	r3, #0
 80034be:	bfbb      	ittet	lt
 80034c0:	425b      	neglt	r3, r3
 80034c2:	f042 0202 	orrlt.w	r2, r2, #2
 80034c6:	9307      	strge	r3, [sp, #28]
 80034c8:	9307      	strlt	r3, [sp, #28]
 80034ca:	bfb8      	it	lt
 80034cc:	9204      	strlt	r2, [sp, #16]
 80034ce:	7823      	ldrb	r3, [r4, #0]
 80034d0:	2b2e      	cmp	r3, #46	@ 0x2e
 80034d2:	d10a      	bne.n	80034ea <_vfiprintf_r+0x156>
 80034d4:	7863      	ldrb	r3, [r4, #1]
 80034d6:	2b2a      	cmp	r3, #42	@ 0x2a
 80034d8:	d132      	bne.n	8003540 <_vfiprintf_r+0x1ac>
 80034da:	9b03      	ldr	r3, [sp, #12]
 80034dc:	1d1a      	adds	r2, r3, #4
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	9203      	str	r2, [sp, #12]
 80034e2:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80034e6:	3402      	adds	r4, #2
 80034e8:	9305      	str	r3, [sp, #20]
 80034ea:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80035c0 <_vfiprintf_r+0x22c>
 80034ee:	7821      	ldrb	r1, [r4, #0]
 80034f0:	2203      	movs	r2, #3
 80034f2:	4650      	mov	r0, sl
 80034f4:	f7fc fe7c 	bl	80001f0 <memchr>
 80034f8:	b138      	cbz	r0, 800350a <_vfiprintf_r+0x176>
 80034fa:	9b04      	ldr	r3, [sp, #16]
 80034fc:	eba0 000a 	sub.w	r0, r0, sl
 8003500:	2240      	movs	r2, #64	@ 0x40
 8003502:	4082      	lsls	r2, r0
 8003504:	4313      	orrs	r3, r2
 8003506:	3401      	adds	r4, #1
 8003508:	9304      	str	r3, [sp, #16]
 800350a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800350e:	4829      	ldr	r0, [pc, #164]	@ (80035b4 <_vfiprintf_r+0x220>)
 8003510:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003514:	2206      	movs	r2, #6
 8003516:	f7fc fe6b 	bl	80001f0 <memchr>
 800351a:	2800      	cmp	r0, #0
 800351c:	d03f      	beq.n	800359e <_vfiprintf_r+0x20a>
 800351e:	4b26      	ldr	r3, [pc, #152]	@ (80035b8 <_vfiprintf_r+0x224>)
 8003520:	bb1b      	cbnz	r3, 800356a <_vfiprintf_r+0x1d6>
 8003522:	9b03      	ldr	r3, [sp, #12]
 8003524:	3307      	adds	r3, #7
 8003526:	f023 0307 	bic.w	r3, r3, #7
 800352a:	3308      	adds	r3, #8
 800352c:	9303      	str	r3, [sp, #12]
 800352e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8003530:	443b      	add	r3, r7
 8003532:	9309      	str	r3, [sp, #36]	@ 0x24
 8003534:	e76a      	b.n	800340c <_vfiprintf_r+0x78>
 8003536:	fb0c 3202 	mla	r2, ip, r2, r3
 800353a:	460c      	mov	r4, r1
 800353c:	2001      	movs	r0, #1
 800353e:	e7a8      	b.n	8003492 <_vfiprintf_r+0xfe>
 8003540:	2300      	movs	r3, #0
 8003542:	3401      	adds	r4, #1
 8003544:	9305      	str	r3, [sp, #20]
 8003546:	4619      	mov	r1, r3
 8003548:	f04f 0c0a 	mov.w	ip, #10
 800354c:	4620      	mov	r0, r4
 800354e:	f810 2b01 	ldrb.w	r2, [r0], #1
 8003552:	3a30      	subs	r2, #48	@ 0x30
 8003554:	2a09      	cmp	r2, #9
 8003556:	d903      	bls.n	8003560 <_vfiprintf_r+0x1cc>
 8003558:	2b00      	cmp	r3, #0
 800355a:	d0c6      	beq.n	80034ea <_vfiprintf_r+0x156>
 800355c:	9105      	str	r1, [sp, #20]
 800355e:	e7c4      	b.n	80034ea <_vfiprintf_r+0x156>
 8003560:	fb0c 2101 	mla	r1, ip, r1, r2
 8003564:	4604      	mov	r4, r0
 8003566:	2301      	movs	r3, #1
 8003568:	e7f0      	b.n	800354c <_vfiprintf_r+0x1b8>
 800356a:	ab03      	add	r3, sp, #12
 800356c:	9300      	str	r3, [sp, #0]
 800356e:	462a      	mov	r2, r5
 8003570:	4b12      	ldr	r3, [pc, #72]	@ (80035bc <_vfiprintf_r+0x228>)
 8003572:	a904      	add	r1, sp, #16
 8003574:	4630      	mov	r0, r6
 8003576:	f3af 8000 	nop.w
 800357a:	4607      	mov	r7, r0
 800357c:	1c78      	adds	r0, r7, #1
 800357e:	d1d6      	bne.n	800352e <_vfiprintf_r+0x19a>
 8003580:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8003582:	07d9      	lsls	r1, r3, #31
 8003584:	d405      	bmi.n	8003592 <_vfiprintf_r+0x1fe>
 8003586:	89ab      	ldrh	r3, [r5, #12]
 8003588:	059a      	lsls	r2, r3, #22
 800358a:	d402      	bmi.n	8003592 <_vfiprintf_r+0x1fe>
 800358c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800358e:	f7ff fddd 	bl	800314c <__retarget_lock_release_recursive>
 8003592:	89ab      	ldrh	r3, [r5, #12]
 8003594:	065b      	lsls	r3, r3, #25
 8003596:	f53f af1f 	bmi.w	80033d8 <_vfiprintf_r+0x44>
 800359a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800359c:	e71e      	b.n	80033dc <_vfiprintf_r+0x48>
 800359e:	ab03      	add	r3, sp, #12
 80035a0:	9300      	str	r3, [sp, #0]
 80035a2:	462a      	mov	r2, r5
 80035a4:	4b05      	ldr	r3, [pc, #20]	@ (80035bc <_vfiprintf_r+0x228>)
 80035a6:	a904      	add	r1, sp, #16
 80035a8:	4630      	mov	r0, r6
 80035aa:	f000 f879 	bl	80036a0 <_printf_i>
 80035ae:	e7e4      	b.n	800357a <_vfiprintf_r+0x1e6>
 80035b0:	08003bf0 	.word	0x08003bf0
 80035b4:	08003bfa 	.word	0x08003bfa
 80035b8:	00000000 	.word	0x00000000
 80035bc:	0800336f 	.word	0x0800336f
 80035c0:	08003bf6 	.word	0x08003bf6

080035c4 <_printf_common>:
 80035c4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80035c8:	4616      	mov	r6, r2
 80035ca:	4698      	mov	r8, r3
 80035cc:	688a      	ldr	r2, [r1, #8]
 80035ce:	690b      	ldr	r3, [r1, #16]
 80035d0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80035d4:	4293      	cmp	r3, r2
 80035d6:	bfb8      	it	lt
 80035d8:	4613      	movlt	r3, r2
 80035da:	6033      	str	r3, [r6, #0]
 80035dc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80035e0:	4607      	mov	r7, r0
 80035e2:	460c      	mov	r4, r1
 80035e4:	b10a      	cbz	r2, 80035ea <_printf_common+0x26>
 80035e6:	3301      	adds	r3, #1
 80035e8:	6033      	str	r3, [r6, #0]
 80035ea:	6823      	ldr	r3, [r4, #0]
 80035ec:	0699      	lsls	r1, r3, #26
 80035ee:	bf42      	ittt	mi
 80035f0:	6833      	ldrmi	r3, [r6, #0]
 80035f2:	3302      	addmi	r3, #2
 80035f4:	6033      	strmi	r3, [r6, #0]
 80035f6:	6825      	ldr	r5, [r4, #0]
 80035f8:	f015 0506 	ands.w	r5, r5, #6
 80035fc:	d106      	bne.n	800360c <_printf_common+0x48>
 80035fe:	f104 0a19 	add.w	sl, r4, #25
 8003602:	68e3      	ldr	r3, [r4, #12]
 8003604:	6832      	ldr	r2, [r6, #0]
 8003606:	1a9b      	subs	r3, r3, r2
 8003608:	42ab      	cmp	r3, r5
 800360a:	dc26      	bgt.n	800365a <_printf_common+0x96>
 800360c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8003610:	6822      	ldr	r2, [r4, #0]
 8003612:	3b00      	subs	r3, #0
 8003614:	bf18      	it	ne
 8003616:	2301      	movne	r3, #1
 8003618:	0692      	lsls	r2, r2, #26
 800361a:	d42b      	bmi.n	8003674 <_printf_common+0xb0>
 800361c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8003620:	4641      	mov	r1, r8
 8003622:	4638      	mov	r0, r7
 8003624:	47c8      	blx	r9
 8003626:	3001      	adds	r0, #1
 8003628:	d01e      	beq.n	8003668 <_printf_common+0xa4>
 800362a:	6823      	ldr	r3, [r4, #0]
 800362c:	6922      	ldr	r2, [r4, #16]
 800362e:	f003 0306 	and.w	r3, r3, #6
 8003632:	2b04      	cmp	r3, #4
 8003634:	bf02      	ittt	eq
 8003636:	68e5      	ldreq	r5, [r4, #12]
 8003638:	6833      	ldreq	r3, [r6, #0]
 800363a:	1aed      	subeq	r5, r5, r3
 800363c:	68a3      	ldr	r3, [r4, #8]
 800363e:	bf0c      	ite	eq
 8003640:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003644:	2500      	movne	r5, #0
 8003646:	4293      	cmp	r3, r2
 8003648:	bfc4      	itt	gt
 800364a:	1a9b      	subgt	r3, r3, r2
 800364c:	18ed      	addgt	r5, r5, r3
 800364e:	2600      	movs	r6, #0
 8003650:	341a      	adds	r4, #26
 8003652:	42b5      	cmp	r5, r6
 8003654:	d11a      	bne.n	800368c <_printf_common+0xc8>
 8003656:	2000      	movs	r0, #0
 8003658:	e008      	b.n	800366c <_printf_common+0xa8>
 800365a:	2301      	movs	r3, #1
 800365c:	4652      	mov	r2, sl
 800365e:	4641      	mov	r1, r8
 8003660:	4638      	mov	r0, r7
 8003662:	47c8      	blx	r9
 8003664:	3001      	adds	r0, #1
 8003666:	d103      	bne.n	8003670 <_printf_common+0xac>
 8003668:	f04f 30ff 	mov.w	r0, #4294967295
 800366c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003670:	3501      	adds	r5, #1
 8003672:	e7c6      	b.n	8003602 <_printf_common+0x3e>
 8003674:	18e1      	adds	r1, r4, r3
 8003676:	1c5a      	adds	r2, r3, #1
 8003678:	2030      	movs	r0, #48	@ 0x30
 800367a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800367e:	4422      	add	r2, r4
 8003680:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003684:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003688:	3302      	adds	r3, #2
 800368a:	e7c7      	b.n	800361c <_printf_common+0x58>
 800368c:	2301      	movs	r3, #1
 800368e:	4622      	mov	r2, r4
 8003690:	4641      	mov	r1, r8
 8003692:	4638      	mov	r0, r7
 8003694:	47c8      	blx	r9
 8003696:	3001      	adds	r0, #1
 8003698:	d0e6      	beq.n	8003668 <_printf_common+0xa4>
 800369a:	3601      	adds	r6, #1
 800369c:	e7d9      	b.n	8003652 <_printf_common+0x8e>
	...

080036a0 <_printf_i>:
 80036a0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80036a4:	7e0f      	ldrb	r7, [r1, #24]
 80036a6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80036a8:	2f78      	cmp	r7, #120	@ 0x78
 80036aa:	4691      	mov	r9, r2
 80036ac:	4680      	mov	r8, r0
 80036ae:	460c      	mov	r4, r1
 80036b0:	469a      	mov	sl, r3
 80036b2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80036b6:	d807      	bhi.n	80036c8 <_printf_i+0x28>
 80036b8:	2f62      	cmp	r7, #98	@ 0x62
 80036ba:	d80a      	bhi.n	80036d2 <_printf_i+0x32>
 80036bc:	2f00      	cmp	r7, #0
 80036be:	f000 80d1 	beq.w	8003864 <_printf_i+0x1c4>
 80036c2:	2f58      	cmp	r7, #88	@ 0x58
 80036c4:	f000 80b8 	beq.w	8003838 <_printf_i+0x198>
 80036c8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80036cc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80036d0:	e03a      	b.n	8003748 <_printf_i+0xa8>
 80036d2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80036d6:	2b15      	cmp	r3, #21
 80036d8:	d8f6      	bhi.n	80036c8 <_printf_i+0x28>
 80036da:	a101      	add	r1, pc, #4	@ (adr r1, 80036e0 <_printf_i+0x40>)
 80036dc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80036e0:	08003739 	.word	0x08003739
 80036e4:	0800374d 	.word	0x0800374d
 80036e8:	080036c9 	.word	0x080036c9
 80036ec:	080036c9 	.word	0x080036c9
 80036f0:	080036c9 	.word	0x080036c9
 80036f4:	080036c9 	.word	0x080036c9
 80036f8:	0800374d 	.word	0x0800374d
 80036fc:	080036c9 	.word	0x080036c9
 8003700:	080036c9 	.word	0x080036c9
 8003704:	080036c9 	.word	0x080036c9
 8003708:	080036c9 	.word	0x080036c9
 800370c:	0800384b 	.word	0x0800384b
 8003710:	08003777 	.word	0x08003777
 8003714:	08003805 	.word	0x08003805
 8003718:	080036c9 	.word	0x080036c9
 800371c:	080036c9 	.word	0x080036c9
 8003720:	0800386d 	.word	0x0800386d
 8003724:	080036c9 	.word	0x080036c9
 8003728:	08003777 	.word	0x08003777
 800372c:	080036c9 	.word	0x080036c9
 8003730:	080036c9 	.word	0x080036c9
 8003734:	0800380d 	.word	0x0800380d
 8003738:	6833      	ldr	r3, [r6, #0]
 800373a:	1d1a      	adds	r2, r3, #4
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	6032      	str	r2, [r6, #0]
 8003740:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003744:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003748:	2301      	movs	r3, #1
 800374a:	e09c      	b.n	8003886 <_printf_i+0x1e6>
 800374c:	6833      	ldr	r3, [r6, #0]
 800374e:	6820      	ldr	r0, [r4, #0]
 8003750:	1d19      	adds	r1, r3, #4
 8003752:	6031      	str	r1, [r6, #0]
 8003754:	0606      	lsls	r6, r0, #24
 8003756:	d501      	bpl.n	800375c <_printf_i+0xbc>
 8003758:	681d      	ldr	r5, [r3, #0]
 800375a:	e003      	b.n	8003764 <_printf_i+0xc4>
 800375c:	0645      	lsls	r5, r0, #25
 800375e:	d5fb      	bpl.n	8003758 <_printf_i+0xb8>
 8003760:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003764:	2d00      	cmp	r5, #0
 8003766:	da03      	bge.n	8003770 <_printf_i+0xd0>
 8003768:	232d      	movs	r3, #45	@ 0x2d
 800376a:	426d      	negs	r5, r5
 800376c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8003770:	4858      	ldr	r0, [pc, #352]	@ (80038d4 <_printf_i+0x234>)
 8003772:	230a      	movs	r3, #10
 8003774:	e011      	b.n	800379a <_printf_i+0xfa>
 8003776:	6821      	ldr	r1, [r4, #0]
 8003778:	6833      	ldr	r3, [r6, #0]
 800377a:	0608      	lsls	r0, r1, #24
 800377c:	f853 5b04 	ldr.w	r5, [r3], #4
 8003780:	d402      	bmi.n	8003788 <_printf_i+0xe8>
 8003782:	0649      	lsls	r1, r1, #25
 8003784:	bf48      	it	mi
 8003786:	b2ad      	uxthmi	r5, r5
 8003788:	2f6f      	cmp	r7, #111	@ 0x6f
 800378a:	4852      	ldr	r0, [pc, #328]	@ (80038d4 <_printf_i+0x234>)
 800378c:	6033      	str	r3, [r6, #0]
 800378e:	bf14      	ite	ne
 8003790:	230a      	movne	r3, #10
 8003792:	2308      	moveq	r3, #8
 8003794:	2100      	movs	r1, #0
 8003796:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800379a:	6866      	ldr	r6, [r4, #4]
 800379c:	60a6      	str	r6, [r4, #8]
 800379e:	2e00      	cmp	r6, #0
 80037a0:	db05      	blt.n	80037ae <_printf_i+0x10e>
 80037a2:	6821      	ldr	r1, [r4, #0]
 80037a4:	432e      	orrs	r6, r5
 80037a6:	f021 0104 	bic.w	r1, r1, #4
 80037aa:	6021      	str	r1, [r4, #0]
 80037ac:	d04b      	beq.n	8003846 <_printf_i+0x1a6>
 80037ae:	4616      	mov	r6, r2
 80037b0:	fbb5 f1f3 	udiv	r1, r5, r3
 80037b4:	fb03 5711 	mls	r7, r3, r1, r5
 80037b8:	5dc7      	ldrb	r7, [r0, r7]
 80037ba:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80037be:	462f      	mov	r7, r5
 80037c0:	42bb      	cmp	r3, r7
 80037c2:	460d      	mov	r5, r1
 80037c4:	d9f4      	bls.n	80037b0 <_printf_i+0x110>
 80037c6:	2b08      	cmp	r3, #8
 80037c8:	d10b      	bne.n	80037e2 <_printf_i+0x142>
 80037ca:	6823      	ldr	r3, [r4, #0]
 80037cc:	07df      	lsls	r7, r3, #31
 80037ce:	d508      	bpl.n	80037e2 <_printf_i+0x142>
 80037d0:	6923      	ldr	r3, [r4, #16]
 80037d2:	6861      	ldr	r1, [r4, #4]
 80037d4:	4299      	cmp	r1, r3
 80037d6:	bfde      	ittt	le
 80037d8:	2330      	movle	r3, #48	@ 0x30
 80037da:	f806 3c01 	strble.w	r3, [r6, #-1]
 80037de:	f106 36ff 	addle.w	r6, r6, #4294967295
 80037e2:	1b92      	subs	r2, r2, r6
 80037e4:	6122      	str	r2, [r4, #16]
 80037e6:	f8cd a000 	str.w	sl, [sp]
 80037ea:	464b      	mov	r3, r9
 80037ec:	aa03      	add	r2, sp, #12
 80037ee:	4621      	mov	r1, r4
 80037f0:	4640      	mov	r0, r8
 80037f2:	f7ff fee7 	bl	80035c4 <_printf_common>
 80037f6:	3001      	adds	r0, #1
 80037f8:	d14a      	bne.n	8003890 <_printf_i+0x1f0>
 80037fa:	f04f 30ff 	mov.w	r0, #4294967295
 80037fe:	b004      	add	sp, #16
 8003800:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003804:	6823      	ldr	r3, [r4, #0]
 8003806:	f043 0320 	orr.w	r3, r3, #32
 800380a:	6023      	str	r3, [r4, #0]
 800380c:	4832      	ldr	r0, [pc, #200]	@ (80038d8 <_printf_i+0x238>)
 800380e:	2778      	movs	r7, #120	@ 0x78
 8003810:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003814:	6823      	ldr	r3, [r4, #0]
 8003816:	6831      	ldr	r1, [r6, #0]
 8003818:	061f      	lsls	r7, r3, #24
 800381a:	f851 5b04 	ldr.w	r5, [r1], #4
 800381e:	d402      	bmi.n	8003826 <_printf_i+0x186>
 8003820:	065f      	lsls	r7, r3, #25
 8003822:	bf48      	it	mi
 8003824:	b2ad      	uxthmi	r5, r5
 8003826:	6031      	str	r1, [r6, #0]
 8003828:	07d9      	lsls	r1, r3, #31
 800382a:	bf44      	itt	mi
 800382c:	f043 0320 	orrmi.w	r3, r3, #32
 8003830:	6023      	strmi	r3, [r4, #0]
 8003832:	b11d      	cbz	r5, 800383c <_printf_i+0x19c>
 8003834:	2310      	movs	r3, #16
 8003836:	e7ad      	b.n	8003794 <_printf_i+0xf4>
 8003838:	4826      	ldr	r0, [pc, #152]	@ (80038d4 <_printf_i+0x234>)
 800383a:	e7e9      	b.n	8003810 <_printf_i+0x170>
 800383c:	6823      	ldr	r3, [r4, #0]
 800383e:	f023 0320 	bic.w	r3, r3, #32
 8003842:	6023      	str	r3, [r4, #0]
 8003844:	e7f6      	b.n	8003834 <_printf_i+0x194>
 8003846:	4616      	mov	r6, r2
 8003848:	e7bd      	b.n	80037c6 <_printf_i+0x126>
 800384a:	6833      	ldr	r3, [r6, #0]
 800384c:	6825      	ldr	r5, [r4, #0]
 800384e:	6961      	ldr	r1, [r4, #20]
 8003850:	1d18      	adds	r0, r3, #4
 8003852:	6030      	str	r0, [r6, #0]
 8003854:	062e      	lsls	r6, r5, #24
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	d501      	bpl.n	800385e <_printf_i+0x1be>
 800385a:	6019      	str	r1, [r3, #0]
 800385c:	e002      	b.n	8003864 <_printf_i+0x1c4>
 800385e:	0668      	lsls	r0, r5, #25
 8003860:	d5fb      	bpl.n	800385a <_printf_i+0x1ba>
 8003862:	8019      	strh	r1, [r3, #0]
 8003864:	2300      	movs	r3, #0
 8003866:	6123      	str	r3, [r4, #16]
 8003868:	4616      	mov	r6, r2
 800386a:	e7bc      	b.n	80037e6 <_printf_i+0x146>
 800386c:	6833      	ldr	r3, [r6, #0]
 800386e:	1d1a      	adds	r2, r3, #4
 8003870:	6032      	str	r2, [r6, #0]
 8003872:	681e      	ldr	r6, [r3, #0]
 8003874:	6862      	ldr	r2, [r4, #4]
 8003876:	2100      	movs	r1, #0
 8003878:	4630      	mov	r0, r6
 800387a:	f7fc fcb9 	bl	80001f0 <memchr>
 800387e:	b108      	cbz	r0, 8003884 <_printf_i+0x1e4>
 8003880:	1b80      	subs	r0, r0, r6
 8003882:	6060      	str	r0, [r4, #4]
 8003884:	6863      	ldr	r3, [r4, #4]
 8003886:	6123      	str	r3, [r4, #16]
 8003888:	2300      	movs	r3, #0
 800388a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800388e:	e7aa      	b.n	80037e6 <_printf_i+0x146>
 8003890:	6923      	ldr	r3, [r4, #16]
 8003892:	4632      	mov	r2, r6
 8003894:	4649      	mov	r1, r9
 8003896:	4640      	mov	r0, r8
 8003898:	47d0      	blx	sl
 800389a:	3001      	adds	r0, #1
 800389c:	d0ad      	beq.n	80037fa <_printf_i+0x15a>
 800389e:	6823      	ldr	r3, [r4, #0]
 80038a0:	079b      	lsls	r3, r3, #30
 80038a2:	d413      	bmi.n	80038cc <_printf_i+0x22c>
 80038a4:	68e0      	ldr	r0, [r4, #12]
 80038a6:	9b03      	ldr	r3, [sp, #12]
 80038a8:	4298      	cmp	r0, r3
 80038aa:	bfb8      	it	lt
 80038ac:	4618      	movlt	r0, r3
 80038ae:	e7a6      	b.n	80037fe <_printf_i+0x15e>
 80038b0:	2301      	movs	r3, #1
 80038b2:	4632      	mov	r2, r6
 80038b4:	4649      	mov	r1, r9
 80038b6:	4640      	mov	r0, r8
 80038b8:	47d0      	blx	sl
 80038ba:	3001      	adds	r0, #1
 80038bc:	d09d      	beq.n	80037fa <_printf_i+0x15a>
 80038be:	3501      	adds	r5, #1
 80038c0:	68e3      	ldr	r3, [r4, #12]
 80038c2:	9903      	ldr	r1, [sp, #12]
 80038c4:	1a5b      	subs	r3, r3, r1
 80038c6:	42ab      	cmp	r3, r5
 80038c8:	dcf2      	bgt.n	80038b0 <_printf_i+0x210>
 80038ca:	e7eb      	b.n	80038a4 <_printf_i+0x204>
 80038cc:	2500      	movs	r5, #0
 80038ce:	f104 0619 	add.w	r6, r4, #25
 80038d2:	e7f5      	b.n	80038c0 <_printf_i+0x220>
 80038d4:	08003c01 	.word	0x08003c01
 80038d8:	08003c12 	.word	0x08003c12

080038dc <__sflush_r>:
 80038dc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80038e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80038e4:	0716      	lsls	r6, r2, #28
 80038e6:	4605      	mov	r5, r0
 80038e8:	460c      	mov	r4, r1
 80038ea:	d454      	bmi.n	8003996 <__sflush_r+0xba>
 80038ec:	684b      	ldr	r3, [r1, #4]
 80038ee:	2b00      	cmp	r3, #0
 80038f0:	dc02      	bgt.n	80038f8 <__sflush_r+0x1c>
 80038f2:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	dd48      	ble.n	800398a <__sflush_r+0xae>
 80038f8:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80038fa:	2e00      	cmp	r6, #0
 80038fc:	d045      	beq.n	800398a <__sflush_r+0xae>
 80038fe:	2300      	movs	r3, #0
 8003900:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003904:	682f      	ldr	r7, [r5, #0]
 8003906:	6a21      	ldr	r1, [r4, #32]
 8003908:	602b      	str	r3, [r5, #0]
 800390a:	d030      	beq.n	800396e <__sflush_r+0x92>
 800390c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800390e:	89a3      	ldrh	r3, [r4, #12]
 8003910:	0759      	lsls	r1, r3, #29
 8003912:	d505      	bpl.n	8003920 <__sflush_r+0x44>
 8003914:	6863      	ldr	r3, [r4, #4]
 8003916:	1ad2      	subs	r2, r2, r3
 8003918:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800391a:	b10b      	cbz	r3, 8003920 <__sflush_r+0x44>
 800391c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800391e:	1ad2      	subs	r2, r2, r3
 8003920:	2300      	movs	r3, #0
 8003922:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003924:	6a21      	ldr	r1, [r4, #32]
 8003926:	4628      	mov	r0, r5
 8003928:	47b0      	blx	r6
 800392a:	1c43      	adds	r3, r0, #1
 800392c:	89a3      	ldrh	r3, [r4, #12]
 800392e:	d106      	bne.n	800393e <__sflush_r+0x62>
 8003930:	6829      	ldr	r1, [r5, #0]
 8003932:	291d      	cmp	r1, #29
 8003934:	d82b      	bhi.n	800398e <__sflush_r+0xb2>
 8003936:	4a2a      	ldr	r2, [pc, #168]	@ (80039e0 <__sflush_r+0x104>)
 8003938:	40ca      	lsrs	r2, r1
 800393a:	07d6      	lsls	r6, r2, #31
 800393c:	d527      	bpl.n	800398e <__sflush_r+0xb2>
 800393e:	2200      	movs	r2, #0
 8003940:	6062      	str	r2, [r4, #4]
 8003942:	04d9      	lsls	r1, r3, #19
 8003944:	6922      	ldr	r2, [r4, #16]
 8003946:	6022      	str	r2, [r4, #0]
 8003948:	d504      	bpl.n	8003954 <__sflush_r+0x78>
 800394a:	1c42      	adds	r2, r0, #1
 800394c:	d101      	bne.n	8003952 <__sflush_r+0x76>
 800394e:	682b      	ldr	r3, [r5, #0]
 8003950:	b903      	cbnz	r3, 8003954 <__sflush_r+0x78>
 8003952:	6560      	str	r0, [r4, #84]	@ 0x54
 8003954:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003956:	602f      	str	r7, [r5, #0]
 8003958:	b1b9      	cbz	r1, 800398a <__sflush_r+0xae>
 800395a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800395e:	4299      	cmp	r1, r3
 8003960:	d002      	beq.n	8003968 <__sflush_r+0x8c>
 8003962:	4628      	mov	r0, r5
 8003964:	f7ff fbf4 	bl	8003150 <_free_r>
 8003968:	2300      	movs	r3, #0
 800396a:	6363      	str	r3, [r4, #52]	@ 0x34
 800396c:	e00d      	b.n	800398a <__sflush_r+0xae>
 800396e:	2301      	movs	r3, #1
 8003970:	4628      	mov	r0, r5
 8003972:	47b0      	blx	r6
 8003974:	4602      	mov	r2, r0
 8003976:	1c50      	adds	r0, r2, #1
 8003978:	d1c9      	bne.n	800390e <__sflush_r+0x32>
 800397a:	682b      	ldr	r3, [r5, #0]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d0c6      	beq.n	800390e <__sflush_r+0x32>
 8003980:	2b1d      	cmp	r3, #29
 8003982:	d001      	beq.n	8003988 <__sflush_r+0xac>
 8003984:	2b16      	cmp	r3, #22
 8003986:	d11e      	bne.n	80039c6 <__sflush_r+0xea>
 8003988:	602f      	str	r7, [r5, #0]
 800398a:	2000      	movs	r0, #0
 800398c:	e022      	b.n	80039d4 <__sflush_r+0xf8>
 800398e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8003992:	b21b      	sxth	r3, r3
 8003994:	e01b      	b.n	80039ce <__sflush_r+0xf2>
 8003996:	690f      	ldr	r7, [r1, #16]
 8003998:	2f00      	cmp	r7, #0
 800399a:	d0f6      	beq.n	800398a <__sflush_r+0xae>
 800399c:	0793      	lsls	r3, r2, #30
 800399e:	680e      	ldr	r6, [r1, #0]
 80039a0:	bf08      	it	eq
 80039a2:	694b      	ldreq	r3, [r1, #20]
 80039a4:	600f      	str	r7, [r1, #0]
 80039a6:	bf18      	it	ne
 80039a8:	2300      	movne	r3, #0
 80039aa:	eba6 0807 	sub.w	r8, r6, r7
 80039ae:	608b      	str	r3, [r1, #8]
 80039b0:	f1b8 0f00 	cmp.w	r8, #0
 80039b4:	dde9      	ble.n	800398a <__sflush_r+0xae>
 80039b6:	6a21      	ldr	r1, [r4, #32]
 80039b8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80039ba:	4643      	mov	r3, r8
 80039bc:	463a      	mov	r2, r7
 80039be:	4628      	mov	r0, r5
 80039c0:	47b0      	blx	r6
 80039c2:	2800      	cmp	r0, #0
 80039c4:	dc08      	bgt.n	80039d8 <__sflush_r+0xfc>
 80039c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039ca:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039ce:	81a3      	strh	r3, [r4, #12]
 80039d0:	f04f 30ff 	mov.w	r0, #4294967295
 80039d4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80039d8:	4407      	add	r7, r0
 80039da:	eba8 0800 	sub.w	r8, r8, r0
 80039de:	e7e7      	b.n	80039b0 <__sflush_r+0xd4>
 80039e0:	20400001 	.word	0x20400001

080039e4 <_fflush_r>:
 80039e4:	b538      	push	{r3, r4, r5, lr}
 80039e6:	690b      	ldr	r3, [r1, #16]
 80039e8:	4605      	mov	r5, r0
 80039ea:	460c      	mov	r4, r1
 80039ec:	b913      	cbnz	r3, 80039f4 <_fflush_r+0x10>
 80039ee:	2500      	movs	r5, #0
 80039f0:	4628      	mov	r0, r5
 80039f2:	bd38      	pop	{r3, r4, r5, pc}
 80039f4:	b118      	cbz	r0, 80039fe <_fflush_r+0x1a>
 80039f6:	6a03      	ldr	r3, [r0, #32]
 80039f8:	b90b      	cbnz	r3, 80039fe <_fflush_r+0x1a>
 80039fa:	f7ff f9af 	bl	8002d5c <__sinit>
 80039fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d0f3      	beq.n	80039ee <_fflush_r+0xa>
 8003a06:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003a08:	07d0      	lsls	r0, r2, #31
 8003a0a:	d404      	bmi.n	8003a16 <_fflush_r+0x32>
 8003a0c:	0599      	lsls	r1, r3, #22
 8003a0e:	d402      	bmi.n	8003a16 <_fflush_r+0x32>
 8003a10:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a12:	f7ff fb9a 	bl	800314a <__retarget_lock_acquire_recursive>
 8003a16:	4628      	mov	r0, r5
 8003a18:	4621      	mov	r1, r4
 8003a1a:	f7ff ff5f 	bl	80038dc <__sflush_r>
 8003a1e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003a20:	07da      	lsls	r2, r3, #31
 8003a22:	4605      	mov	r5, r0
 8003a24:	d4e4      	bmi.n	80039f0 <_fflush_r+0xc>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	059b      	lsls	r3, r3, #22
 8003a2a:	d4e1      	bmi.n	80039f0 <_fflush_r+0xc>
 8003a2c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003a2e:	f7ff fb8d 	bl	800314c <__retarget_lock_release_recursive>
 8003a32:	e7dd      	b.n	80039f0 <_fflush_r+0xc>

08003a34 <__swhatbuf_r>:
 8003a34:	b570      	push	{r4, r5, r6, lr}
 8003a36:	460c      	mov	r4, r1
 8003a38:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a3c:	2900      	cmp	r1, #0
 8003a3e:	b096      	sub	sp, #88	@ 0x58
 8003a40:	4615      	mov	r5, r2
 8003a42:	461e      	mov	r6, r3
 8003a44:	da0d      	bge.n	8003a62 <__swhatbuf_r+0x2e>
 8003a46:	89a3      	ldrh	r3, [r4, #12]
 8003a48:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003a4c:	f04f 0100 	mov.w	r1, #0
 8003a50:	bf14      	ite	ne
 8003a52:	2340      	movne	r3, #64	@ 0x40
 8003a54:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003a58:	2000      	movs	r0, #0
 8003a5a:	6031      	str	r1, [r6, #0]
 8003a5c:	602b      	str	r3, [r5, #0]
 8003a5e:	b016      	add	sp, #88	@ 0x58
 8003a60:	bd70      	pop	{r4, r5, r6, pc}
 8003a62:	466a      	mov	r2, sp
 8003a64:	f000 f848 	bl	8003af8 <_fstat_r>
 8003a68:	2800      	cmp	r0, #0
 8003a6a:	dbec      	blt.n	8003a46 <__swhatbuf_r+0x12>
 8003a6c:	9901      	ldr	r1, [sp, #4]
 8003a6e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003a72:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003a76:	4259      	negs	r1, r3
 8003a78:	4159      	adcs	r1, r3
 8003a7a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003a7e:	e7eb      	b.n	8003a58 <__swhatbuf_r+0x24>

08003a80 <__smakebuf_r>:
 8003a80:	898b      	ldrh	r3, [r1, #12]
 8003a82:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003a84:	079d      	lsls	r5, r3, #30
 8003a86:	4606      	mov	r6, r0
 8003a88:	460c      	mov	r4, r1
 8003a8a:	d507      	bpl.n	8003a9c <__smakebuf_r+0x1c>
 8003a8c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003a90:	6023      	str	r3, [r4, #0]
 8003a92:	6123      	str	r3, [r4, #16]
 8003a94:	2301      	movs	r3, #1
 8003a96:	6163      	str	r3, [r4, #20]
 8003a98:	b003      	add	sp, #12
 8003a9a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003a9c:	ab01      	add	r3, sp, #4
 8003a9e:	466a      	mov	r2, sp
 8003aa0:	f7ff ffc8 	bl	8003a34 <__swhatbuf_r>
 8003aa4:	9f00      	ldr	r7, [sp, #0]
 8003aa6:	4605      	mov	r5, r0
 8003aa8:	4639      	mov	r1, r7
 8003aaa:	4630      	mov	r0, r6
 8003aac:	f7ff fbbc 	bl	8003228 <_malloc_r>
 8003ab0:	b948      	cbnz	r0, 8003ac6 <__smakebuf_r+0x46>
 8003ab2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003ab6:	059a      	lsls	r2, r3, #22
 8003ab8:	d4ee      	bmi.n	8003a98 <__smakebuf_r+0x18>
 8003aba:	f023 0303 	bic.w	r3, r3, #3
 8003abe:	f043 0302 	orr.w	r3, r3, #2
 8003ac2:	81a3      	strh	r3, [r4, #12]
 8003ac4:	e7e2      	b.n	8003a8c <__smakebuf_r+0xc>
 8003ac6:	89a3      	ldrh	r3, [r4, #12]
 8003ac8:	6020      	str	r0, [r4, #0]
 8003aca:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003ace:	81a3      	strh	r3, [r4, #12]
 8003ad0:	9b01      	ldr	r3, [sp, #4]
 8003ad2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003ad6:	b15b      	cbz	r3, 8003af0 <__smakebuf_r+0x70>
 8003ad8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003adc:	4630      	mov	r0, r6
 8003ade:	f000 f81d 	bl	8003b1c <_isatty_r>
 8003ae2:	b128      	cbz	r0, 8003af0 <__smakebuf_r+0x70>
 8003ae4:	89a3      	ldrh	r3, [r4, #12]
 8003ae6:	f023 0303 	bic.w	r3, r3, #3
 8003aea:	f043 0301 	orr.w	r3, r3, #1
 8003aee:	81a3      	strh	r3, [r4, #12]
 8003af0:	89a3      	ldrh	r3, [r4, #12]
 8003af2:	431d      	orrs	r5, r3
 8003af4:	81a5      	strh	r5, [r4, #12]
 8003af6:	e7cf      	b.n	8003a98 <__smakebuf_r+0x18>

08003af8 <_fstat_r>:
 8003af8:	b538      	push	{r3, r4, r5, lr}
 8003afa:	4d07      	ldr	r5, [pc, #28]	@ (8003b18 <_fstat_r+0x20>)
 8003afc:	2300      	movs	r3, #0
 8003afe:	4604      	mov	r4, r0
 8003b00:	4608      	mov	r0, r1
 8003b02:	4611      	mov	r1, r2
 8003b04:	602b      	str	r3, [r5, #0]
 8003b06:	f7fd fa00 	bl	8000f0a <_fstat>
 8003b0a:	1c43      	adds	r3, r0, #1
 8003b0c:	d102      	bne.n	8003b14 <_fstat_r+0x1c>
 8003b0e:	682b      	ldr	r3, [r5, #0]
 8003b10:	b103      	cbz	r3, 8003b14 <_fstat_r+0x1c>
 8003b12:	6023      	str	r3, [r4, #0]
 8003b14:	bd38      	pop	{r3, r4, r5, pc}
 8003b16:	bf00      	nop
 8003b18:	20000220 	.word	0x20000220

08003b1c <_isatty_r>:
 8003b1c:	b538      	push	{r3, r4, r5, lr}
 8003b1e:	4d06      	ldr	r5, [pc, #24]	@ (8003b38 <_isatty_r+0x1c>)
 8003b20:	2300      	movs	r3, #0
 8003b22:	4604      	mov	r4, r0
 8003b24:	4608      	mov	r0, r1
 8003b26:	602b      	str	r3, [r5, #0]
 8003b28:	f7fd f9ff 	bl	8000f2a <_isatty>
 8003b2c:	1c43      	adds	r3, r0, #1
 8003b2e:	d102      	bne.n	8003b36 <_isatty_r+0x1a>
 8003b30:	682b      	ldr	r3, [r5, #0]
 8003b32:	b103      	cbz	r3, 8003b36 <_isatty_r+0x1a>
 8003b34:	6023      	str	r3, [r4, #0]
 8003b36:	bd38      	pop	{r3, r4, r5, pc}
 8003b38:	20000220 	.word	0x20000220

08003b3c <_sbrk_r>:
 8003b3c:	b538      	push	{r3, r4, r5, lr}
 8003b3e:	4d06      	ldr	r5, [pc, #24]	@ (8003b58 <_sbrk_r+0x1c>)
 8003b40:	2300      	movs	r3, #0
 8003b42:	4604      	mov	r4, r0
 8003b44:	4608      	mov	r0, r1
 8003b46:	602b      	str	r3, [r5, #0]
 8003b48:	f7fd fa08 	bl	8000f5c <_sbrk>
 8003b4c:	1c43      	adds	r3, r0, #1
 8003b4e:	d102      	bne.n	8003b56 <_sbrk_r+0x1a>
 8003b50:	682b      	ldr	r3, [r5, #0]
 8003b52:	b103      	cbz	r3, 8003b56 <_sbrk_r+0x1a>
 8003b54:	6023      	str	r3, [r4, #0]
 8003b56:	bd38      	pop	{r3, r4, r5, pc}
 8003b58:	20000220 	.word	0x20000220

08003b5c <_init>:
 8003b5c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b5e:	bf00      	nop
 8003b60:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b62:	bc08      	pop	{r3}
 8003b64:	469e      	mov	lr, r3
 8003b66:	4770      	bx	lr

08003b68 <_fini>:
 8003b68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b6a:	bf00      	nop
 8003b6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b6e:	bc08      	pop	{r3}
 8003b70:	469e      	mov	lr, r3
 8003b72:	4770      	bx	lr
